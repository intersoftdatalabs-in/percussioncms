<!--
  ~     Percussion CMS
  ~     Copyright (C) 1999-2020 Percussion Software, Inc.
  ~
  ~     This program is free software: you can redistribute it and/or modify
  ~     it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
  ~
  ~     This program is distributed in the hope that it will be useful,
  ~     but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~     GNU Affero General Public License for more details.
  ~
  ~     Mailing Address:
  ~
  ~      Percussion Software, Inc.
  ~      PO Box 767
  ~      Burlington, MA 01803, USA
  ~      +01-781-438-9900
  ~      support@percussion.com
  ~      https://www.percussion.com
  ~
  ~     You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd


http://www.springframework.org/schema/util
http://www.springframework.org/schema/util/spring-util.xsd">

    <bean id="sys_protoLegacyDataSource"
          class="com.percussion.util.PSDataSourceFactory"
          factory-method="createDataSource" >
        <constructor-arg>
            <props>
                <prop key="driverClassName">org.apache.derby.jdbc.ClientDriver</prop>
                <prop key="url">jdbc:derby://localhost:8011/CMDB</prop>
                <prop key="username">CMDB</prop>
                <prop key="password">demo</prop>

                <prop key="database"/>

                <prop key="driverLocation"/>
            </props>
        </constructor-arg>
    </bean>
    <bean id="sys_mockJndiContextHelper"
          class="com.percussion.utils.jndi.PSNamingContextHelper">
        <!-- Set root before bindings! -->
        <property name="root" value="java:comp/env"/>
        <property name="bindings">
            <util:map>
                <entry key="jdbc/rxdefault" value-ref="sys_protoLegacyDataSource"/>
            </util:map>
        </property>
    </bean>

    <bean id="sys_rhythmyxinfo"
          class="com.percussion.services.general.impl.PSRhythmyxInfo">
        <property name="bindings">
            <util:map>
                <entry key="UNIT_TESTING" value="true"/>
            </util:map>
        </property>
    </bean>

    <bean id="sys_datasourceResolver"
          depends-on="sys_mockJndiContextHelper"
          class="com.percussion.utils.jdbc.PSDatasourceResolver">
        <property name="repositoryDatasource" value="rxdefault"/>
        <property name="datasourceConfigurations">
            <list>
                <bean id="rxdefault"
                      class="com.percussion.utils.jdbc.PSDatasourceConfig">
                    <property name="name" value="rxdefault"/>
                    <property name="dataSource" value="jdbc/rxdefault"/>
                    <property name="database" value="CMDB"/>
                    <property name="origin" value=""/>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="sys_hibernateDialects"
          class="com.percussion.services.datasource.PSHibernateDialectConfig">
        <property name="dialects">
            <util:map>
                <entry key="sqlserver" value="org.hibernate.dialect.SQLServer2012Dialect"/>
                <entry key="jtds:sqlserver" value="org.hibernate.dialect.SQLServer2012Dialect"/>
                <entry key="inetdae7" value="org.hibernate.dialect.SQLServer2012Dialect"/>
                <entry key="oracle:thin" value="org.hibernate.dialect.OracleDialect"/>
                <entry key="db2" value="org.hibernate.dialect.DB2Dialect"/>
                <entry key="derby" value="org.hibernate.dialect.DerbyTenSevenDialect"/>
                <entry key="mysql" value="org.hibernate.dialect.MySQLInnoDBDialect"/>
            </util:map>
        </property>
    </bean>

    <bean id="sys_beanConfiguration"
          class="com.percussion.services.utils.general.PSServiceConfigurationBean">
        <property name="maxCachedContentNodeSize" value="100000"/>
    </bean>

    <bean id="sys_testSetup"
          class="com.percussion.testing.PSTestSetupBean">
        <property name="config">
            <util:map>
                <entry key="extensionDir" value="build/unitTestConfig/extensions" />
            </util:map>
        </property>
    </bean>

    <bean id="sys_deliveryManager"
          class="com.percussion.rx.delivery.impl.PSLocalDeliveryManager">
    </bean>

    <!-- Setup all JMS queues and topics here that need to be available
         for unit testing -->
    <bean id="sys_mockJmsConnectionFactory"
          class="com.percussion.utils.spring.PSMockJmsConnectionFactoryHelper">
        <constructor-arg ref="sys_mockJndiContextHelper"/>
        <property name="destinations">
            <util:map>
                <entry key="queue/notificationQueue" value="queue"/>
                <entry key="topic/notificationTopic" value="topic"/>
                <entry key="queue/publishQueue" value="queue"/>
                <entry key="queue/emailQueue" value="queue"/>
                <entry key="queue/publishResultQueue" value="queue"/>
            </util:map>
        </property>
    </bean>
    <!-- Quartz beans needed for testing -->
    <bean id="sys_quartzScheduler"
          class="com.percussion.services.schedule.impl.PSSchedulerBean"
          destroy-method="destroy">
        <!-- Configurable scheduler factory properties
             org.quartz.threadPool.threadCount property is defined in sys_beanConfiguration
        -->
        <property name="quartzProperties">
            <value>
                org.quartz.scheduler.instanceName=DefaultQuartzScheduler
                org.quartz.scheduler.rmi.export=false
                org.quartz.scheduler.rmi.proxy=false
                org.quartz.scheduler.wrapJobExecutionInUserTransaction=false
                org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
                org.quartz.threadPool.threadPriority=5
                org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=true
                org.quartz.jobStore.misfireThreshold=60000
                org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
                org.quartz.jobStore.tablePrefix=PSX_Q
                org.quartz.jobStore.dataSource=rhythmyxDataSource
                org.quartz.dataSource.rhythmyxDataSource.connectionProvider.class=com.percussion.services.schedule.impl.PSRhythmyxConnectionProvider
            </value>
        </property>
        <property name="datasourceManager" ref="sys_datasourceManager"/>
        <property name="configurationBean" ref="sys_beanConfiguration"/>
    </bean>
    <bean id="sys_schedulingService"
          class="com.percussion.services.schedule.impl.PSSchedulingService">
        <property name="sessionFactory" ref="sys_sessionFactory"/>
        <property name="scheduler" ref="sys_quartzScheduler"/>
    </bean>
</beans>
