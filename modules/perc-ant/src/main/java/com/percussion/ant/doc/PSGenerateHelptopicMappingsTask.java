/*
 *     Percussion CMS
 *     Copyright (C) 1999-2020 Percussion Software, Inc.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Affero General Public License for more details.
 *
 *     Mailing Address:
 *
 *      Percussion Software, Inc.
 *      PO Box 767
 *      Burlington, MA 01803, USA
 *      +01-781-438-9900
 *      support@percussion.com
 *      https://www.percussion.com
 *
 *     You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>
 */
package com.percussion.ant.doc;

import com.percussion.security.xml.PSSecureXMLUtils;
import com.percussion.security.xml.PSXmlSecurityOptions;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Task;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * Read the mappings file and resolve the necessary java help topics to urls in
 * the map.xml file from documentation. This task is run as part of manufacture.
 * 
 * @author dougrand
 */
public class PSGenerateHelptopicMappingsTask extends Task
{
   /**
    * This file contains the helptopicmapping input data. The input data is an
    * XML file where each element contains a tuple. The id of the tuple is the
    * Java topic name and the text value is the map.xml file url.
    * <P>
    * &lt;mapping key="ContentExplorer" url="Content_Explorer_Interface.htm"
    * /&gt;
    */
   String m_keysFile;

   /**
    * The map file is generated by the documentation authoring tools. It
    * consists of elements that map a topic id (target) to a url.
    */
   String m_mapFile;

   /**
    * This file receives the property mappings, which map the Java topic name to
    * the ids.
    */
   String m_destFile;

   /**
    * If this is set to <code>true</code>, then don't throw a build exception
    * if the map file is not found. Instead, print a warning and return.
    */
   boolean m_suppressError = false;

   /**
    * If this is set to <code>true</code>, then always recreate the
    * properties file, regardless of the DTM of the source files.
    */
   boolean m_alwaysRegen = false;

   /**
    * Record problems to be spat out at the end of the task. These are just
    * strings
    */
   List<String> m_problems = new ArrayList<>();

   /**
    * Default ctor
    */
   public PSGenerateHelptopicMappingsTask() {
      super();

   }

   /*
    * (non-Javadoc)
    * 
    * @see org.apache.tools.ant.Task#execute()
    */
   @Override
   public void execute() throws BuildException
   {
      // Validate the keys and map files
      File keyFile = new File(m_keysFile);
      File mapFile = new File(m_mapFile);
      if (!keyFile.exists())
      {
         throw new BuildException("Key file " + keyFile + " does not exist");
      }
      if (!mapFile.exists())
      {
         if (m_suppressError)
         {
            m_problems.add("Map file " + mapFile + " does not exist");
            return;
         }
         else
         {
            throw new BuildException("Map file " + mapFile + " does not exist");
         }
      }
      File destFile = new File(m_destFile);
      if (destFile.exists() && !isAlwaysRegen())
      {
         // If destFile up to date, return
         if (destFile.lastModified() >= mapFile.lastModified()
               && destFile.lastModified() >= keyFile.lastModified())
         {
            handleOutput("Mapping file " + destFile + " up to date");
            return;
         }
      }

      handleOutput("Processing key file " + m_keysFile);

      try(Writer w = new FileWriter(destFile))
      {
         try(PrintWriter out  = new PrintWriter(w)){

         out.println("#");
         out.println("# This is a machine generated file, do not edit");
         out.println("# Generated: " + new Date());
         out.println("#");

         DocumentBuilderFactory fact = PSSecureXMLUtils.getSecuredDocumentBuilderFactory(
                 new PSXmlSecurityOptions(
                         true,
                         true,
                         true,
                         false,
                         true,
                         false
                 )
         );
         DocumentBuilder builder = fact.newDocumentBuilder();

         Map topics = readKeys(builder, keyFile);
         Map mappings = readMappings(builder, mapFile);

         Iterator kiter = topics.keySet().iterator();
         while (kiter.hasNext()) {
            String key = (String) kiter.next();
            String desturl = (String) topics.get(key);

            if (desturl.trim().length() == 0) {
               if (m_suppressError) {
                  m_problems.add("Error, " + key
                          + " is missing a destination url");
               } else {
                  throw new BuildException("Error, " + key
                          + " is missing a destination url");
               }
            } else {
               String index = (String) mappings.get(desturl);
               if (index != null) {
                  out.println(key + "=" + index);
               } else {
                  if (m_suppressError) {
                     m_problems
                             .add("Error, no mapping found for key: " + key);
                  } else {
                     throw new BuildException(
                             "Error, no mapping found for key: " + key);
                  }
               }
            }
         }
         if (!m_problems.isEmpty()) {
            handleErrorOutput("Problems while processing " + m_keysFile);
            for (String message : m_problems) {
               handleErrorOutput(message);
            }
         }
         handleOutput("");
      }
      }
      catch (Exception e)
      {
         throw new BuildException("Problem running helptopic mappings task ", e);
      }

   }

   /**
    * @param builder
    * @param mapFile
    * @throws IOException
    * @throws SAXException
    */
   private Map readMappings(DocumentBuilder builder, File mapFile)
         throws SAXException, IOException
   {
      return readKeyValueData(builder, mapFile, "mapID", "url", "target");
   }

   /**
    * @param builder
    * @param mapFile
    * @param nodeName
    * @param keyName
    * @param valName
    * @throws SAXException
    * @throws IOException
    */
   @SuppressFBWarnings("XXE_DOCUMENT")  // False positive - see PSSecureXMLUtils
   private Map readKeyValueData(DocumentBuilder builder, File mapFile,
                                String nodeName, String keyName, String valName) throws SAXException,
         IOException
   {
      Document d = builder.parse(mapFile);
      NodeList nl = d.getElementsByTagName(nodeName);
      int len = nl.getLength();
      Map<String, String> rval = new HashMap<>();
      for (int i = 0; i < len; i++)
      {
         Element el = (Element) nl.item(i);
         String t = el.getAttribute(valName);
         String url = el.getAttribute(keyName);
         rval.put(url, t);
      }
      return rval;
   }

   /**
    * @param builder
    * @param keyFile
    * @throws IOException
    * @throws SAXException
    */
   private Map readKeys(DocumentBuilder builder, File keyFile)
         throws SAXException, IOException
   {
      return readKeyValueData(builder, keyFile, "mapping", "key", "url");
   }

   /*
    * (non-Javadoc)
    * 
    * @see org.apache.tools.ant.Task#getDescription()
    */
   @Override
   public String getDescription()
   {
      return "Load the mapping file and generate the helpset mappings for"
            + " javahelp";
   }

   /**
    * @return Returns the destFile.
    */
   public String getDestFile()
   {
      return m_destFile;
   }

   /**
    * @param destFile The destFile to set.
    */
   public void setDestFile(String destFile)
   {
      m_destFile = destFile;
   }

   /**
    * @return Returns the keysFile.
    */
   public String getKeysFile()
   {
      return m_keysFile;
   }

   /**
    * @param keysFile The keysFile to set.
    */
   public void setKeysFile(String keysFile)
   {
      m_keysFile = keysFile;
   }

   /**
    * @return Returns the mapFile.
    */
   public String getMapFile()
   {
      return m_mapFile;
   }

   /**
    * @param mapFile The mapFile to set.
    */
   public void setMapFile(String mapFile)
   {
      m_mapFile = mapFile;
   }

   /**
    * @return Returns the suppressError.
    */
   public boolean isSuppressError()
   {
      return m_suppressError;
   }

   /**
    * @param suppressError The suppressError to set.
    */
   public void setSuppressError(boolean suppressError)
   {
      m_suppressError = suppressError;
   }

   /**
    * @return Returns the alwaysRegen.
    */
   public boolean isAlwaysRegen()
   {
      return m_alwaysRegen;
   }

   /**
    * @param alwaysRegen The alwaysRegen to set.
    */
   public void setAlwaysRegen(boolean alwaysRegen)
   {
      m_alwaysRegen = alwaysRegen;
   }
}
