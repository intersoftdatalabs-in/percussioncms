/*
 *     Percussion CMS
 *     Copyright (C) 1999-2020 Percussion Software, Inc.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Affero General Public License for more details.
 *
 *     Mailing Address:
 *
 *      Percussion Software, Inc.
 *      PO Box 767
 *      Burlington, MA 01803, USA
 *      +01-781-438-9900
 *      support@percussion.com
 *      https://www.percusssion.com
 *
 *     You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>
 */

/**
 *    PercSiteTemplatesWidget.js
 *
 *    This widget generates and handles user interaction of the Site Template UI.
 *    The widget is located at the bottom of the administration section accessible through
 *    http://localhost:9992/cm/app/admin.jsp
 *
 *    +-------------------------------------------------+
 *    |                                                 |
 *    +---------------------------+---------------------+
 *    |Site Template              |                     |
 *    |                           |                     |
 *    |+----------+  +----------+ |                     |
 *    ||       (X)|  |       (X)| |                     |
 *    ||          |  |          | |                     |
 *    ||          |  |          | |                     |
 *    ||          |  |          | |                     |
 *    ||          |  |          | |                     |
 *    |+----------+  +----------+ |                     |
 *    |Template Name Template Name|                     |
 *    +---------------------------+---------------------+
 *
 *    Gestures recognized by widget:
 *    (*)    (X) - Click on (X) button on a template to delete the template
 *    (*)    Click on Template - Click on template to select/highlight
 *    (*)    Hover on Template - Hover on template for feedback
 */
(function($)
{
    $.widget("ui.template_selected", {
        // Controller that handles events generated by the widget.
        controller: null,

        // List of templates associated to the selected site.
        templates: null,

        // Selection of Site Filter drop down. Default is to show all the templates for all the sites.
        siteFilterSelection: 'all',

        DEFAULT_ITEMS: 5,

        PAGE_GROUP_SIZE: 5,

        firstPagesArray: null,

        // Widget Initialization
        _init: function()
        {
            var self = this;

            self.firstPagesArray = new Object();

            this.controller = $.PercSiteTemplatesController(false);

            // load all the template summaries at startup
            this.controller.on("load", function()
            {
                self._afterLoad();
            });

            // bind the Update button to local dispatcher
            $('#perc-template-name-button').on("click",function()
            {
                self._renameTemplate();
            });
        },

        _afterLoad: function()
        {
            var self = this;
            this._setupEvents();
            // retrieve all the sites and notify the _setSites() method
            this.controller.getSites(false, function(sites)
            {
                self._setSites(sites);

                // Change the view here, after the items are loaded
                var memento;
                memento = $.PercNavigationManager.getMemento();

                if(memento.view != null)
                {
                    $.Percussion.setCurrentTemplatesView(memento.view);
                }

                if($("#perc-assigned-templates").data("scrollable") != null)
                {
                    $("#perc-assigned-templates").data("scrollable").updateItemWrap();
                }

                // check if any template is selected. Make the dropped template as a selected one.
                if(self.selectedTemplateName != null && self.selectedTemplateName != "")
                {
                    var newTemplateId = $("#perc-assigned-templates .perc-template-item .perc-template-label[title='" + self.selectedTemplateName + "']").parent().attr("id");
                    self.selectedTemplateName = null;
                    self._selectTemplate(newTemplateId);
                    // Auto-scroll to selected template
                    self.autoscrollToSelected();
                }
                else if($("#perc-assigned-templates .perc-selected").length != 0)
                {
                    self._selectTemplate($("#perc-assigned-templates .perc-selected").attr("id"));
                    // Auto-scroll to selected template
                    self.autoscrollToSelected();
                }
                else if(gSelectTemp != null && gSelectTemp != "")
                {
                    self._selectTemplate(gSelectTemp);
                    // Auto-scroll to selected template
                    self.autoscrollToSelected();
                }
                else if(memento.templateId)
                {
                    self._selectTemplate(memento.templateId);
                    // Auto-scroll to selected template
                    self.autoscrollToSelected();
                }
                else
                {
                    if($("#perc-assigned-templates").data("scrollable") != null)
                    {
                        // Scroll to the begining
                        $("#perc-assigned-templates").data("scrollable").begin();
                    }
                }
            });
        },

        /**
         * Callback function that scrolls the container to the selected element (if there is any).
         */
        autoscrollToSelected: function()
        {
            this.updateTemplatesPagingSize();
            if($("#perc-assigned-templates .perc-selected").length != 0)
            {
                if($.Percussion.getCurrentTemplatesView() == $.Percussion.VIEW_MODE_CATALOG)
                {
                    var selectedItem = $("#perc-assigned-templates .perc-selected");

                    var positionInCarousel = $("div#" + selectedItem.attr("id")).data("positionInCarousel");
                    $("#perc-assigned-templates").data("scrollable").seekTo(positionInCarousel);
                    $(".perc-templates-layout").animate(
                        {
                            scrollTop: 0
                        }, 500);
                }
                else
                {
                    var selectedItem = $("#perc-assigned-templates .perc-selected");
                    var selectedItemTop = selectedItem.offset().top;
                    $(".perc-templates-layout").animate(
                        {
                            scrollTop: selectedItemTop - selectedItem.height()
                        }, 500);
                }
            }

        },

        /**
         *    Setup User Interface Events
         *    1) Dragging and Dropping base templates
         *    2) Changing the Site Filter combo box
         *    3) Selecting a checkbox to assign a template to a site - actually this is done elsewhere
         */
        _setupEvents: function()
        {
            var self = this;

            $('#perc-site-filter').on("change",function(event, ui)
            {
                self._updateSiteTemplates();
            });

            // Create a custom event that binds the auto-scroll
            $('#perc-activated-templates-scrollable').on('autoscroll', function()
            {
                self.autoscrollToSelected();
            });

        },

        // Callback from the controller passing in all the sites
        // Updates the Site Filter and the Assigned Sites list of checkboxes
        _setSites: function(sites)
        {
            this.sites = sites;
            this._updateSiteTemplates();
        },
        updateTemplatesPagingSize: function(){
            var amountOfItems = parseInt(($("#perc-assigned-templates-container").width()) / 268);

            if(amountOfItems < 1)
            {
                amountOfItems = 1;
            }
            if($("#perc-assigned-templates .perc-template-item").length > amountOfItems)
                $("#perc-assigned-templates").data("scrollable").getConf().size = amountOfItems;

        },
        // update the list of templates associated to sites
        _updateSiteTemplates: function()
        {
            var self = this;

            var PAGE_GROUP_SIZE = self.PAGE_GROUP_SIZE;

            // get the selected site
            var site = $.PercNavigationManager.getSiteName();

            // get the templates from the controller based on the site filter selection
            if(site == '')
            {
                // No Site selected
            }
            else
            {
                this.templates = this.controller.getTemplates('site', site);
                this.templates.sort(function(x, y)
                {
                    var a = String(x.getTemplateName()).toUpperCase();
                    var b = String(y.getTemplateName()).toUpperCase();
                    if(a > b) return 1;
                    if(a < b) return -1;
                    return 0;
                });
            }

            // clear the list of templates assigned to sites
            var assignedTemplatesDiv = $("#perc-assigned-templates");
            assignedTemplatesDiv.html("");

            // This intermediate div is needed for carousel to work correctly
            var carouselContainerDiv;

            carouselContainerDiv = $('<div class="perc-items" />');
            assignedTemplatesDiv.append(carouselContainerDiv);

            buffer = "";
            assignedTemplatesDiv.append(buffer);

            // Set the width of the wrapper to fill all the container. If we don't do this the user
            // will not be able to drop the templates on the emtpy zone of the container.
            assignedTemplatesDiv.css('width', 'auto');

            var tLen = this.templates.length;

            // if no templates means no site is selected, show empty placeholder
            if(tLen == 0)
            {
                carouselContainerDiv.append('<div class="perc-template-item-empty" />');
                $(".perc-items").width("100%").css("text-align", "center");
            }

            var hideInThumbnail = "";
            if($.Percussion.getCurrentTemplatesView() == $.Percussion.VIEW_MODE_THUMBNAILS)
            {
                hideInThumbnail = ' style="display: none"';
                $(".perc-items").width("auto");
            }

            // re-render the list of templates assigned to sites
            for(var t = 0; t < tLen; t++)
            {
                var template = this.templates[t];
                var originalName = template.getTemplateName();
                var selected = "";
                if(this.selectedTemplateName == template.getTemplateName()) selected = "class='perc-selected'";
                buffer = '<div class="perc-template-item" id="' + template.getTemplateId() + '" ' + selected + '>';
                buffer += '    <div class="perc-apply" id="' + template.getTemplateId() + '-apply" title="' +I18N.message("perc.ui.site.templates.widget@Match Content To Template Layout") + '">' + '</div>';
                buffer += '    <div class="perc-edit" id="' + template.getTemplateId() + '-edit" title="' +I18N.message("perc.ui.site.templates.widget@Edit Template") + '">' + '</div>';
                buffer += '    <div class="perc-delete" id="' + template.getTemplateId() + '-delete" title="' +I18N.message("perc.ui.admin.packed@Delete Template") + '">' + '</div>';
                buffer += '    <div class="perc-template-label" title="' + originalName + '" alt="' + originalName + '" id="' + template.getTemplateId() + '-name">' + originalName + '</div>';
                buffer += '    <div percBaseTemplateName="' + template.getBaseTemplateName() + '" id="' + template.getTemplateId() + 'id" class="perc-template-thumbnail-container perc-template-background">';
                buffer += '         <img height = "122px" width="174px" src = "' + template.getImageUrl() + '" alt="' + I18N.message("perc.ui.new.site.dialog@Basic Template") + '" />';
                buffer += '    </div>';
                buffer += ' <div class="perc-template-paging-container"' + hideInThumbnail + '>';
                buffer += '    <ul class="perc-template-pages" templateVersion ="'+ template.getContentMigrationVersion() + '"templateId="' + template.getTemplateId() + '">';
                buffer += '         <li class="perc-template-pages-items" ></li>';
                buffer += '         <li class="perc-template-pages-items" ></li>';
                buffer += '         <li class="perc-template-pages-items" ></li>';
                buffer += '         <li class="perc-template-pages-items" ></li>';
                buffer += '         <li class="perc-template-pages-items" ></li>';
                buffer += '    </ul>';
                buffer += '    <form action="#" class="perc-template-pages-controls">';
                buffer += '        <div style="right:56px;" class="previous">Prev</div>';
                buffer += '        <input type="text" class="perc-jump" name="perc-template-pages-controls-jump" autocomplete="off" />';
                buffer += '        <div style="right:0px;" class="next">Next</div>';
                buffer += '    </form>';
                buffer += '    <div class="perc-template-showing" style="width: 100px; margin: 6px 0pt 0px 24px;">';
                buffer += '        Items: <span class="perc-template-page-group-range">0-0</span>';
                buffer += '    </div>';
                buffer += '    <div class="perc-template-showing" style="width: 100px; margin: 8px 0pt 13px 24px;">';
                buffer += '        Total Items: <span class="perc-template-total">0</span>';
                buffer += '    </div>';
                buffer += '    </div>';
                buffer += '</div>';


                carouselContainerDiv.append(buffer);
                carouselContainerDiv.find("div#" + template.getTemplateId()).data("positionInCarousel", t);

                // make the template labels editable
                $("#" + template.getTemplateId() + " li").on("click", function(event)
                {
                    if($(this).attr("title") == null || $(this).attr("title") == "") return;
                    $('.perc-template-item .perc-template-paging-container li').removeClass('perc-template-page-highlighted-color');
                    $(this).addClass('perc-template-page-highlighted-color');
                    self.selectedPageId = $(this).data("pageInfo").id;
                    self.selectedPageIdOriginalTemplateId = $(this).parents(".perc-template-item").attr("id");

                });

                $("#" + template.getTemplateId() + "-name").editable(
                    function(value, settings)
                    {
                        var theId = this.id.substr(0, this.id.length - 5);
                        value = $.perc_textFilters.URL(value);
                        var renameErrorMsg = null;
                        if($(this).attr("title") != value)
                            renameErrorMsg = self._renameTemplate(theId, value);
                        if(renameErrorMsg != null){
                            $.perc_utils.alert_dialog({
                                title: I18N.message("perc.ui.publish.title@Error"),
                                content: renameErrorMsg
                            });
                        }
                        return value;
                    },
                    {
                        event: "dblclick",
                        style: "padding:0px",
                        cssclass: "perc-template-edit-label",
                        width: "198px",
                        height: "14px",
                        select: true,
                        onblur: "submit",
                        fieldid: 'perc_inline_field_edit',
                        data: function(val, sets)
                        {
                            return $(this).attr("title");
                        },
                        callback: function()
                        {
                            fixTextOverflow();
                        }
                    }
                );
            }
            // Make the Template's Page List Container droppable.
            // On drop, call the service to assign the selected template to a dropped page and migrate the page content

            $('.perc-template-pages').droppable({
                accept: ".perc-imported-page, .perc-template-pages-items",
                activeClass: "ui-state-hover",
                hoverClass: "ui-state-active",
                drop: function( event, ui ) {
                    var templateId = $(this).attr('templateId');
                    var referencePageId = $(this).find('li.perc-template-pages-items').not(".perc-require-migration").first().attr('id');
                    var droppedPageIds = [];
                    droppedPageIds.push($(ui.draggable).attr('id'));
                    var sourceTemplateId = $(ui.draggable).parent().attr('templateId');
                    //Same template to same template drop.
                    if(templateId == sourceTemplateId)
                    {
                        return;
                    }
                    $.PercBlockUI();
                    var sourceType = sourceTemplateId?"TEMPLATE":"UNASSIGNED";
                    var migrateContentRestData =  {"MigrateContentRestData":{"siteName":$.PercNavigationManager.getSiteName(),"templateId":templateId,"refPageId":referencePageId,"pageIds":droppedPageIds,"sourceType":sourceType}};
                    $.PercTemplateService().assignTemplateAndMigrateContent(migrateContentRestData, function(status, result){
                        if(status)
                        {
                            if(result.MigrateResponse.status == "ERROR")
                            {
                                $.perc_utils.alert_dialog(
                                    {
                                        title: I18N.message("perc.ui.publish.title@Error"),
                                        content: result.MigrateResponse.message
                                    });
                            }
                            loadTemplatePages(templateId, 1);
                            if(ui.helper.dropCallback && $.isFunction(ui.helper.dropCallback))
                            {
                                ui.helper.dropCallback();
                            }
                            if(sourceTemplateId) {
                                loadTemplatePages(sourceTemplateId, 1);
                            }
                        }
                        $.unblockUI();
                    });
                }
            });
            // if catalog view, append carousel and controls
            if($.Percussion.getCurrentTemplatesView() == $.Percussion.VIEW_MODE_CATALOG)
            {
                if($(".perc-prev-templates-carousel").length == 0)
                {
                    var scrollbarDivLeft = $('<div class="perc-prev-templates-carousel" />').append($('<a id="perc_prev_templates_carousel_arrow" class="prevPageCarousel perc-prev-templates-carousel-arrow"></a>'));

                    assignedTemplatesDiv.css("overflow", "hidden");

                    var scrollbarDivRight = $('<div class="perc-next-templates-carousel" />').append($('<a id="perc_next_templates_carousel_arrow" class="nextPageCarousel perc-next-templates-carousel-arrow"></a>'));

                    assignedTemplatesDiv.parents("#perc-activated-templates-scrollable").prepend(scrollbarDivRight);
                    assignedTemplatesDiv.parents("#perc-activated-templates-scrollable").prepend(scrollbarDivLeft);
                }

                assignedTemplatesDiv.addClass("perc-scrollable-templates");
                var horizontalScrollable = assignedTemplatesDiv.scrollable(
                    {
                        items: ".perc-items",
                        size: self.DEFAULT_ITEMS,
                        globalNav: true,
                        prev: '.prevCarousel',
                        next: '.nextCarousel',
                        prevPage: '.prevPageCarousel',
                        nextPage: '.nextPageCarousel',
                        keyboard: false,
                        clickable: false // TODO: review this
                    });

                assignedTemplatesDiv.parents("#perc-activated-templates-scrollable").append($('<div class="resetPaging">'));

                // Automatically resize the scrolling items having into acount the visible portion of screen
                $(window).on("resize",function()
                {
                    self.updateTemplatesPagingSize();
                });
            }
            else
            {
                $(".perc-template-item-middle-droppable").height($(".perc-template-item").css("min-height"));
            }

            // Complete each template's page list
            $('.perc-template-item').each(function()
            {
                var templateId = $(this).attr('id');
                //Load the first pagegroup of pages that use this template (starting index = 1).
                loadTemplatePages(templateId, 1);
                //Set a filter to each of the paging selectors to allow only digits.
                $.perc_filterField($('#' + templateId).find(".perc-template-pages-controls .perc-jump"), $.perc_textFilters.ONLY_DIGITS);
            });

            // Pagination controls - Next button - Click
            $('#perc-activated-templates .perc-template-pages-controls .next').on("click", function()
            {
                //Get the template container that each button belongs to.
                var templateContainer = $(this).parents(".perc-template-item");
                var templateId = $(templateContainer).attr('id');
                var currentStartIndex = getCurrentStartIndex(templateId);
                var nextStartIndex = currentStartIndex + PAGE_GROUP_SIZE;
                var totalPages = parseInt($(templateContainer).find('.perc-template-total').html());
                if(nextStartIndex <= totalPages)
                {
                    loadTemplatePages(templateId, nextStartIndex);
                }
                else
                {
                    //If the next start index is greater than the number of pages,
                    //it means the selector is in the last page, so do nothing.
                    return false;
                }
            });

            $('.resetPaging').on("click", function(event)
            {

                if(typeof event.deletedPageId !== 'undefined' && event.deletedPageId === self.selectedPageId)
                {
                    var firstPageId = self.firstPagesArray[self.selectedPageIdOriginalTemplateId];
                    self.selectedPageId = firstPageId;

                    // Highlight the page
                    $('.perc-template-pages li#' + firstPageId).addClass("perc-template-page-highlighted-color");
                }
            });

            // Pagination controls - Previous button
            $('#perc-activated-templates .perc-template-pages-controls .previous').on("click", function(evt)
            {
                var templateContainer = $(this).parents(".perc-template-item");
                var templateId = $(templateContainer).attr('id');
                var currentStartIndex = getCurrentStartIndex(templateId);
                var nextStartIndex = currentStartIndex - PAGE_GROUP_SIZE;
                if(nextStartIndex > 0)
                {
                    loadTemplatePages(templateId, nextStartIndex);
                }
                else
                {
                    //If the next start index is lower or equal to zero,
                    //it means the selector is in the first page, so do nothing.
                    return false;
                }
            });

            // Pagination controls - Text input for page selector
            $('#perc-activated-templates .perc-template-pages-controls').submit(function()
            {
                var templateId = $(this).parents(".perc-template-item").attr('id');
                var totalPages = getTotalPagesByTemplateId(templateId);
                var jumpInput = $(this).find('.perc-jump');

                //If there are no pages, always go to page 1.
                if(totalPages == 0)
                {
                    jumpInput.val(1);
                    return false;
                }

                //If the field is not empty, go to the specified pagegroup
                var inputValue = jumpInput.val();
                if(inputValue != undefined && inputValue != '')
                {
                    goToPageGroup(templateId, inputValue);
                }
                else
                {
                    // If the field is empty, do nothing and refill the input with the current page group number.
                    // Since the value is no longer on the field, it needs to be recalculated from the page group range indicator.
                    var currentStartIndex = getCurrentStartIndex(templateId);
                    var currentPageGroupNumber = Math.ceil(currentStartIndex / PAGE_GROUP_SIZE);
                    $(this).find('.perc-jump').val(currentPageGroupNumber);
                }
                return false;
            });

            // bind apply button to template edition.
            $('#perc-assigned-templates-container').on('click', '.perc-apply', function()
            {
                var templateId = $(this).attr("id");
                templateId = templateId.replace("-apply", "");
                _migrateTemplateContent(templateId);
            });

            /**
             * Migrate the content for the selected pages
             */
            function _migrateTemplateContent(templateId)
            {
                $.PercBlockUI();
                $.PercTemplateService().applyTemplate(templateId, "ALL", function(status, result){
                    if(status)
                    {
                        if(result.MigrateResponse.status == "ERROR")
                        {
                            $.perc_utils.alert_dialog(
                                {
                                    title: I18N.message("perc.ui.publish.title@Error"),
                                    content: result.MigrateResponse.message
                                });
                        }
                        loadTemplatePages(templateId, 1);
                    }
                    $.unblockUI();
                });
            }

            /**
             * Given a template id, it loads a pagegroup of pages that use that template into the UI.
             * It gets PAGE_GROUP_SIZE pages, starting from startIndex.
             * Calls the service, and then updates paging indicators.
             */
            function loadTemplatePages(templateId, startIndex)
            {
                var memento;
                var pageId;
                memento = $.PercNavigationManager.getMemento();
                if(memento.templateId && memento.pageId && templateId == memento.templateId)
                {
                    pageId = memento.pageId;
                    memento.pageId = null;
                }
                $.PercPageService.getPagesWithTemplate(
                    templateId, {
                        'startIndex': startIndex,
                        'pageId': pageId,
                        'maxResults' : PAGE_GROUP_SIZE
                    }, function(status, data)
                    {
                        if(status === $.PercServiceUtils.STATUS_SUCCESS)
                        {
                            data.childrenInPage = $.perc_utils.convertCXFArray(data.childrenInPage);
                            var listElements = $('#' + templateId + ' .perc-template-pages li.perc-template-pages-items');
                            var templateVersion = $('#' + templateId + ' .perc-template-pages' ).attr('templateVersion');
                            listElements.removeClass("perc-template-page-highlighted-color");
                            // Clear the list of pages and their previous title attribute
                            if(data.firstItemId != null)
                            {
                                self.firstPagesArray[templateId] = data.firstItemId;
                            }

                            for(var i = 0; i < listElements.length; i++)
                            {
                                $(listElements[i]).html('').attr('title', '').removeClass('perc-require-migration');
                            }


                            // Appeand each of the pages returned by the service
                            for(var i = 0; i < data.childrenInPage.length; i++) {
                                // Remove the "/Sites" string from the path and set it as the title for the li element
                                var pagePath = data.childrenInPage[i].path.replace('\/\/' + $.perc_paths.SITES_ROOT_NO_SLASH, '');
                                var curPageId = data.childrenInPage[i].id;
                                var curPageElem = listElements.eq(i);
                                var recycledPage = false;
                                if(pagePath == "" || pagePath == undefined || pagePath == null){
                                    recycledPage = true;
                                }

                                if (curPageId == self.selectedPageId || (pageId && curPageId == pageId)) {
                                    curPageElem.addClass("perc-template-page-highlighted-color");
                                } else {
                                    curPageElem.removeClass("perc-template-page-highlighted-color");
                                }

                                if (self.selectedPageId == null && pageId) {
                                    self.selectedPageId = pageId;
                                    self.selectedPageIdOriginalTemplateId = memento.templateId;
                                }

                                var typeProps = getTypePropertyMap(data.childrenInPage[i].typeProperties.entries);

                                var dropDownElement = '<span class="perc-template-pages-items-dropdown"></span>';
                                var migrationEmptyWidgetIndicator = typeProps["migrationEmptyWidgetFlag"] == "yes" ?
                                    "<span><img src='../images/images/errorIcon.gif' title='Content migration did not populate all widgets on the page. The original content can be accessed in the Unused Asset tray.'/></span>" : "";
                                var html = '<span class="perc-template-pages-items-thumbnail"><img src="../images/images/inspectButton.png" alt="perc.ui.extend.ui.dialog@Inspect Button"/></span><div class="perc-template-page-title">' +
                                    data.childrenInPage[i].name + '</div>' + migrationEmptyWidgetIndicator + dropDownElement;
                                //because if pagePath is empty, then page is in recycle
                                //don't add drop down and change icon to broken
                                if (recycledPage) {
                                    html = '<span class="perc-template-pages-items-thumbnail"><img src="../images/images/brokenlink.png" alt="perc.ui.recycledPage@RecycledPage"/></span><div class="perc-template-page-title">' +
                                        data.childrenInPage[i].name + '</div>' + migrationEmptyWidgetIndicator + dropDownElement;
                                    curPageElem.attr('title', I18N.message("perc.ui.recycledPage@RecycledPage")).attr('id', curPageId)
                                        .data("pageInfo", data.childrenInPage[i])
                                        .html(html);
                                }else{
                                    curPageElem.attr('title', pagePath).attr('id', curPageId)
                                        .data("pageInfo", data.childrenInPage[i])
                                        .html(html);
                                }
                                if (!recycledPage)
                                    curPageElem.find(".perc-template-pages-items-thumbnail img").attr("data", JSON.stringify(data.childrenInPage[i]));
                                if (typeProps["contentMigrationVersion"] != templateVersion) {
                                    curPageElem.find(".perc-template-pages-items-thumbnail img").addClass('perc-require-migration');
                                }
                                var dropDownConfig = {
                                    percDropdownRootClass: "perc-dropdown-template-pages-items-dropdown",
                                    percDropdownOptionLabels: ["", I18N.message("perc.ui.site.templates.widget@Open Page"), I18N.message("perc.ui.page.menu@Change Template")],
                                    percDropdownCallbacks: [function () {
                                    },
                                        _openThisPage,
                                        _changeTemplate
                                    ],
                                    percDropdownCallbackData: ['', {
                                        pageId: curPageId,
                                        templateId: templateId
                                    }, {pageId: curPageId, templateId: templateId}]
                                }
                                if (recycledPage) {

                                    dropDownConfig = {
                                        percDropdownRootClass: "perc-dropdown-template-pages-items-dropdown",
                                        percDropdownOptionLabels: ["", I18N.message("perc.ui.page.menu@Change Template"),I18N.message("perc.ui.restorepage@Label"),I18N.message("perc.ui.purgepage@Label")],
                                        percDropdownCallbacks: [function () {
                                        },
                                            _changeTemplate,
                                            _restorePage,
                                            _purgePage

                                        ],
                                        percDropdownCallbackData: ['', {pageId: curPageId, templateId: templateId},{pageId: curPageId, templateId: templateId},{pageId: curPageId, templateId: templateId}]
                                    }
                                }
                                curPageElem.find(".perc-template-pages-items-dropdown").PercDropdown(dropDownConfig);
                            }
                            updateIndicators(templateId, data.childrenCount, data.startIndex);

                            $('.perc-template-pages-items .perc-template-pages-items-thumbnail img').PercImageTooltip();
                        }
                        else
                        {
                            $.perc_utils.alert_dialog(
                                {
                                    title: I18N.message('perc.ui.labels@Error'),
                                    content: I18N.message('perc.ui.sitetemplates.error@Get pages by template error')
                                });
                        }
                    });

                // Bind the draggble event to template page items
                /*$('.perc-template-pages-items').draggable({ opacity: 0.7,
                                    helper: "clone",
                                    revert: "invalid", // when not dropped, the item will revert back to its initial position
                                    containment: "document",
                                    cursor: "move",
                                    drag: function(event,ui){
                                        //update the zindex value here
                                        $(ui.helper).css("z-index",'900000000');
                                    },
                                    scroll: true
                });*/
            }

            function _changeTemplate(callbackData) {
                var templateId = callbackData.templateId;
                var pageId = callbackData.pageId;
                $.PercChangeTemplateDialog().openDialog(pageId, templateId, $.PercNavigationManager.getSiteName(), function() {  window.location.reload(); });
            }

            function _openThisPage(callbackData) {
                _openPage(callbackData.pageId);
            }

            function _purgePage(callbackData) {
                var templateId = callbackData.templateId;
                $.PercRecycleService.purgeItem(
                    callbackData.pageId,
                    $.perc_paths.PAGE_FORCE_PURGE,
                    function(status, data) {
                        if (status === $.PercServiceUtils.STATUS_ERROR) {
                            $.perc_utils.alert_dialog({title: I18N.message("perc.ui.publish.title@Error"), content: data});
                        } else {
                            window.location.reload();
                        }
                    }
                );
            }

            function _restorePage(callbackData) {
                var templateId = callbackData.templateId;
                var pageId = callbackData.pageId;
            $.PercRecycleService.restoreItem(pageId,  $.perc_paths.PAGE_RESTORE, function(status, data) {
                if (status === $.PercServiceUtils.STATUS_ERROR) {
                    $.perc_utils.alert_dialog({title: I18N.message("perc.ui.publish.title@Error"), content: data});
                } else {
                    window.location.reload();
                }
            });

        }

            /**
             * Update pagination indicators after loading paging groups.
             * Indicators are:
             * - Pagegroup range (First and last page in the group, eg. Items: 6-10)
             * - Total number of items (Total number of pages that
             * use the template. eg. Total Items: 25)
             * - Current pagegroup number (The pagegroup currently
             * displayed and shown in the input selector. eg. 2)
             * - Next/Previous buttons as enabled/disabled.
             */
            function updateIndicators(templateId, totalNumberOfItems, startIndex)
            {
                //Update Total Pages indicator
                var totalPages = $('#' + templateId).find('.perc-template-total');
                $(totalPages).html(totalNumberOfItems);

                //Update page items indicator. (Range indicator)
                var currentPageGroupRange = $('#' + templateId).find('.perc-template-page-group-range');
                var endIndex = startIndex + PAGE_GROUP_SIZE - 1;
                var first = 0;
                var last = 0;
                if(totalNumberOfItems == 0 || totalNumberOfItems == 1)
                {
                    currentPageGroupRange.html(totalNumberOfItems);
                    last = totalNumberOfItems;
                }
                else
                {
                    first = startIndex;
                    last = endIndex;
                    if(totalNumberOfItems < startIndex)
                    {
                        first = 0;
                    }
                    if(endIndex > totalNumberOfItems)
                    {
                        last = totalNumberOfItems;
                    }
                    currentPageGroupRange.html(first + '-' + last);
                }

                //Update page entry input
                var pageNumber = Math.ceil(last / PAGE_GROUP_SIZE);
                if(pageNumber < 1)
                {
                    pageNumber = 1;
                }
                var jumpInput = $('#' + templateId).find('.perc-jump');
                jumpInput.val(pageNumber);

                //Disable/Enable prev and next buttons
                //If this is the first page, disable previous button
                if(startIndex <= 1)
                {
                    $('#' + templateId).find('.perc-template-pages-controls div.previous').removeClass('previous').addClass('previous-disabled');
                }
                else
                {
                    var disabledPrevButton = $('#' + templateId).find('.perc-template-pages-controls div.previous-disabled');
                    if(disabledPrevButton != undefined) $(disabledPrevButton).removeClass('previous-disabled').addClass('previous');
                }

                //If this is the last page, disable next button
                if(endIndex >= totalNumberOfItems)
                {
                    $('#' + templateId).find('.perc-template-pages-controls div.next').removeClass('next').addClass('next-disabled');
                }
                else
                {
                    var disabledNextButton = $('#' + templateId).find('.perc-template-pages-controls div.next-disabled');
                    if(disabledNextButton != undefined) $(disabledNextButton).removeClass('next-disabled').addClass('next');
                }
            }

            /**
             * Given a template id, show pages from a given page group number.
             * Used to "jump" to a paging group of page entries from the page selector.
             */
            function goToPageGroup(templateId, pageNumber)
            {
                var startIndex = calcStartIndexFromPageNumber(pageNumber);
                var totalPages = getTotalPagesByTemplateId(templateId);
                if(startIndex < 1)
                {
                    $(this).find('.perc-jump').val(1);
                    loadTemplatePages(templateId, 1);
                }
                else
                {
                    // (startIndex > totalPages) validation is not necessary because it is done server side.
                    loadTemplatePages(templateId, startIndex);
                }
            }

            /** Auxiliary paging functions */

            /**
             * Given a page group number (the one displayed in the paging selector text input)
             * returns the starting index for the page range.
             */
            function calcStartIndexFromPageNumber(pageNumber)
            {
                return(pageNumber * PAGE_GROUP_SIZE) - PAGE_GROUP_SIZE + 1;
            }

            /**
             * Given a template id, gets the total ammount of pages using that template.
             * It gets the total from the total indicator in the paging controls.
             * Returns number of total pages (int).
             */
            function getTotalPagesByTemplateId(templateId)
            {
                return parseInt($('#' + templateId).find('.perc-template-total').html());
            }

            /**
             * Given a template id, it gets the current start index from the page range indicator.
             */
            function getCurrentStartIndex(templateId)
            {
                var currentPageGroupRange = $('#' + templateId).find('.perc-template-page-group-range').html();
                var currentStartIndex = parseInt(currentPageGroupRange.split('-')[0]);
                return currentStartIndex;
            }

            /** END Auxiliary paging functions */

            // Redirects to edit template page, with the selected id open for edition.
            function editTemplate(templateId)
            {
                var pageId = null;

                if(templateId == self.selectedPageIdOriginalTemplateId && $.Percussion.getCurrentTemplatesView() == $.Percussion.VIEW_MODE_CATALOG)
                {
                    pageId = self.selectedPageId;
                }

                var view = $.Percussion.getCurrentTemplatesView();

                var querystring = $.deparam.querystring();
                var currentTemplateName = $("#" + templateId).find('.perc-template-thumbnail-container').attr('percbasetemplatename');
                var memento = {
                    'templateName': currentTemplateName,
                    'templateId': templateId,
                    'pageId': pageId,
                    'view': view,
                    'tabId': "perc-tab-layout"
                };
                // Use the PercNavigationManager to switch to the template editor
                $.PercNavigationManager.goToLocation(
                    $.PercNavigationManager.VIEW_EDIT_TEMPLATE, querystring.site, null, null, null, querystring.path, null, memento);
            }

            // Adds a filter for non valid characters
            $.perc_filterField($("div.perc-template-label"), $.perc_textFilters.URL);

            function fixTextOverflow()
            {
                $.PercTextOverflow($("div.perc-template-label"), 202);
            }

            fixTextOverflow();
            fixBottomHeight();

            // bind each template to click event to select it
            var self = this;
            $('.perc-template-thumbnail-container').parent().on("click",function(event)
            {
                //if ($(event.target).parent().hasClass("perc-template-pages-items-thumbnail"))
                //    loadPageThumbnail(event.target);


                if(self.selectedTemplateId == $(this).attr('id')) return;
                if($(event.target).hasClass("perc-edit")) return;

                // If target is one of the page entries li elements and it's not empty, it shouldn't autoselect the first item.
                // The second param in _selectTemplate function autoselects the first page item when true.
                if(($(event.target).parent().hasClass("perc-template-pages-items") || $(event.target).hasClass("perc-template-pages-items")) && ($(event.target).attr("title") != "")) self._selectTemplate($(this).attr('id'), false);
                else self._selectTemplate($(this).attr('id'), true);
            });

            $('.perc-template-pages-items').on("dblclick", function(event)
            {
                var templateId = $(event.target).parents(".perc-template-item").attr('id');
                var pageId = $(event.target).attr('id');
                if (pageId == null)
                    pageId = $(event.target).parents(".perc-template-pages-items").attr('id');

                self.selectedPageIdOriginalTemplateId = templateId;
                self.selectedPageId = pageId;

                editTemplate(templateId);
            });

            function loadPageThumbnail(element, pageId)
            {
                $(element).parents(".perc-template-item").find(".perc-template-thumbnail-container img")
                    .attr("src", "/Rhythmyx/rx_resources/images/TemplateImages/" + $.PercNavigationManager.getSiteName() + "/" + pageId + "-page.jpg?nocache=" + Math.random())
                    .attr("alt", "");
            }

            function loadPage(eventTarget)
            {
                var pageId = $(eventTarget).parents(".perc-template-pages-items").attr("id");
                _openPage(pageId);
            }

            function _openPage(pageId) {
                $.PercPathService.getPathItemById(pageId, function(status, data){
                    if(status == $.PercServiceUtils.STATUS_SUCCESS) {
                        var querystring = $.deparam.querystring();
                        var isEditMode = true;
                        var folderPath = "";
                        if(Array.isArray(data.PathItem.folderPaths)){
                            folderPath = data.PathItem.folderPaths[0];
                        }else{
                            folderPath = data.PathItem.folderPaths;
                        }
                        data.PathItem.path = folderPath.replace('//', '/') + '/' + data.PathItem.name;
                        $.PercNavigationManager.handleOpenPage(data.PathItem, isEditMode);
                    } else {
                        $.perc_utils.alert_dialog({title: I18N.message("perc.ui.publish.title@Error"), content: data});
                        return;
                    }
                });
            }

            // bind each template thumbnail to double click event to edit it
            $('.perc-template-thumbnail-container').on("dblclick",function()
            {
                var templateId = $(this).parent().attr('id');
                editTemplate(templateId);
            });

            // bind copy button to controller copyTemplate event
            $('.perc-copy').on("click",function()
            {
                var templateId = $(this).parent().attr('id');
                self.controller.copyTemplate(templateId, null);
                self._updateSiteTemplates();
            });

            // bind edit button to template edition.
            $('.perc-edit').on("click",function()
            {
                var templateId = $(this).parent().attr('id');
                if(templateId !== self.selectedTemplateId || typeof self.selectedPageId === 'undefined' || self.selectedPageId == null || $(this).closest(".perc-template-item").find("#" + self.selectedPageId).length==0)
                {
                    self._selectTemplate(templateId, true);
                }
                editTemplate(templateId);
            });

            // bind delete button to controller deleteTemplate event
            $('.perc-delete').on("click",function()
            {
                var templateId = $(this).parent().attr('id');
                var options = {
                    id: 'perc-template-delete-confirm',
                    title: I18N.message("perc.ui.admin.packed@Delete Template"),
                    question: I18N.message("perc.ui.admin.packed@Template") + $('#' + templateId + '-name').text() + "<br/><br/>" + I18N.message("perc.ui.sitetemplates.warning@Confirm"),
                    //type:"YES_NO",
                    cancel: function()
                    {},
                    success: function()
                    {
                        $.PercBlockUI();
                        self.controller.deleteTemplate(templateId, function(success)
                        {
                            $.unblockUI();
                            if(success)
                            {
                                self._updateSiteTemplates();
                                self._setSelectedTemplateIndicator("");
                                // Fix problem with the scrollable wrapper
                                $("#perc-assigned-templates").data("scrollable").updateItemWrap();
                                // Scroll to the begining
                                $("#perc-assigned-templates").data("scrollable").begin();
                            }
                        });
                    }
                };
                $.perc_utils.confirm_dialog(options);
            });

            var tempName = $.cookie("templateImport");
            if(tempName == null) return "";
            else
            {
                jQuery("div[title ='" + tempName + "']").trigger("click");
                $.cookie("templateImport", null);
            }
        },

        // get the new template name and then delegate to the controller to rename the template
        _renameTemplate: function(templateId, newTemplateName)
        {
            var errorMsg = this.controller.renameTemplate(templateId, newTemplateName);
            this._save();
            return errorMsg;
        },

        /**
         * Persist changes to the server.
         */
        _save: function()
        {
            $.PercBlockUI();
            var self = this;
            self.controller.saveTemplateChanges(function(status, result)
            {
                $.unblockUI();
                if(!status)
                {
                    perc_utils.alert_dialog(
                        {
                            title: I18N.message("perc.ui.publish.title@Error"),
                            content: result
                        });
                }
                else
                {
                    self._afterLoad();
                }
            });
        },

        // If doCleanSelectedPage is sent, it means the selection comes from another template and needs to autoselect the first page
        _selectTemplate: function(templateId, doCleanSelectedPage)
        {
            // unselect/unhighlight other templates
            $('.perc-template-item').removeClass('perc-template-page-highlighted-color').removeClass('perc-template-highlighted-color-border').removeClass('perc-selected');

            if(doCleanSelectedPage)
            {
                // unselect / unhighlight other pages selection
                $('.perc-template-pages li').removeClass("perc-template-page-highlighted-color");

                var firstPageId = this.firstPagesArray[templateId];
                this.selectedPageId = firstPageId;
                this.selectedPageIdOriginalTemplateId = templateId;
                $('.perc-template-pages li#' + firstPageId).addClass("perc-template-page-highlighted-color");

                // Load Thumbnail
                $('.perc-template-pages li#' + firstPageId).parents(".perc-template-item").find(".perc-template-thumbnail-container img")
                    .attr("src", "/Rhythmyx/rx_resources/images/TemplateImages/" + $.PercNavigationManager.getSiteName() + "/" + firstPageId + "-page.jpg"  + "?nocache=" + Math.random())
                    .attr("alt", "");
            }

            // highlight and select this template
            var templateToSelect = $('#' + templateId);
            templateToSelect.addClass('perc-selected');
            templateToSelect.addClass('perc-template-highlighted-color-border');

            // update the selected template indicator
            this._setSelectedTemplateIndicator("Selected template: " + $('#' + templateId + "-name").attr("title"));
            this.selectedTemplateId = templateId;

            // get the current template name to update text field
            var template = this.controller.getTemplateById(templateId);
            var currentTemplateName = template.getTemplateName();
            $("#perc-template-name-field").attr("value", currentTemplateName);

            // TODO: change this from a global variable to a function call on the template widget
            // set the global selected template
            gSelectTemp = templateId;

            // Clear any cached theme name for the CSS Gallery.
            // FIXME: WE NEED A DIALOGUE BOX IF THINGS CHANGED DURING EDITING!
            sGalleryThemeName = "";

            // Trigger the template select event, so other components waiting for this event will
            // updated accordingly
            var changeEventData = {
                templateId: templateId,
                templateName: currentTemplateName
            };
            this._trigger('.change', null, changeEventData);

            // enableExportTemplateOption(true);
            // set the href reference for the export option
            //$(".perc-dropdown-option-ExportTemplate").attr("href", $.perc_paths.TEMPLATE_EXPORT + "/" + templateId + "/" + currentTemplateName + ".xml");
        },

        _assignSiteToCurrentlySelectedTemplate: function(check)
        {
            template = this.controller.getTemplateById(this.selectedTemplateId);
            if(check.checked) this.controller.assignTemplateToSite(template, check.id);
            else this.controller.unassignTemplateFromSite(template, check.id);
        },

        _setSelectedTemplateIndicator: function(msg)
        {
            $("#perc_selected_template_name").text(msg);
        },

        destroy: function()
        {
            $.widget.prototype.apply(this, arguments); // default destroy
            // now do other stuff particular to this widget
        },

        /**
         * Refresh the the widget conent and selects a template if passed as an argument.
         * @param String selectedTemplateName (optional)
         */
        refresh: function(selectedTemplateName)
        {
            if (selectedTemplate !== undefined || selectedTemplate !== '')
            {
                this.selectedTemplateName = selectedTemplateName;
                this._afterLoad();
            }else{
                this._updateSiteTemplates();
            }

        }
    });

    // Create a dialog for Importing Template
    function createDialog(isError)
    {
        var self = this;

        // Wrap the import form in an iframe
        var dialogHTML = "<div id='perc-import-template-wrapper'>" + "<iframe name='perc-import-template-frame' id='perc-import-template-frame' height='41px' FRAMEBORDER='0' width='100%' src='../app/importTemplate.jsp'></iframe>" + "</div>";

        // If there is an error on file upload - load the dialog again with an error message in it.
        if(isError)
        {
            dialogHTML = "<div id='perc-import-template-wrapper'>" + "<iframe name='perc-import-template-frame' id='perc-import-template-frame' height='83px' FRAMEBORDER='0' width='100%' src='../app/importTemplate.jsp?status=PERC_ERROR&message=The file you attempted to import is not a valid XML file. Choose a valid CM1 template XML file for upload'></iframe>" + "</div>";
        }

        // Wrap the iframe inside the dialog
        dialog = $(dialogHTML).perc_dialog(
            {
                resizable: false,
                title: I18N.message("perc.ui.template.design.view@Import Template"),
                modal: true,
                closeOnEscape: true,
                percButtons: {
                    "Import": {
                        click: function()
                        {
                            var actionUrl = $.perc_paths.TEMPLATE_IMPORT;
                            $.PercTemplateService().getSiteProperties($.PercNavigationManager.getSiteName(), function(status, result)
                            {
                                if(status)
                                {
                                    actionUrl = actionUrl + "/" + result.SiteProperties.id;
                                    var checkValue = $("#perc-import-template-frame").contents().find(".perc-template-import-field").val();

                                    // Show error message if user clicks Import without selecting any file.
                                    if(checkValue === "")
                                    {
                                        $("#perc-import-template-frame").css('height', '67px');
                                        $("#perc-import-template-frame").contents().find(".perc-import-error").show();
                                        return;
                                    }
                                    $("#perc-import-template-frame").contents().find("#perc-import-template-form").attr("action", actionUrl);
                                    $("#perc-import-template-frame").contents().find("#perc-import-template-form").submit();
                                    $("#perc-import-template-frame").on("load", function()
                                    {
                                        closeDialogOnSuccess();
                                    });
                                }
                            });
                        },
                        id: "perc-template-import"
                    },
                    "Cancel": {
                        click: function()
                        {
                            dialog.remove();
                        },
                        id: "perc-import-dialog-cancel"
                    }
                },
                id: "perc-import-dialog",
                width: 490

            });
    }

    // Close or reload the dialog based on server feedback after import.
    function closeDialogOnSuccess()
    {
        // Close the dialog if import of the template is success
        var templateName = $("#perc-import-template-frame").contents().find("body").text();

        //if import is success - reload the page and pass the name of newly created template as a parameter.
        if(templateName != "null")
        {
            dialog.remove();
            $.cookie("templateImport", templateName);
            location.reload();
        }
        // Reload the dialog with an error message if import fails
        else
        {
            dialog.remove();
            createDialog(true);
        }
    }

    // Import the template.
    function _importTemplate()
    {
        createDialog();
    }

    /**
     * Add template.
     */
    function _addTemplate()
    {
        // Instance the "Add template" dialog.
        // The newTemplateName argument in the callback function will be bound
        // to the new template name
        $.PercAddTemplateDialog(function refreshAndFocusNewTemplate(newTemplateName)
        {
            // Invoke the jQuery widget method refresh passing the (optional) template
            // name to fouse is after refreshing the panel
            $("#perc-assigned-templates").template_selected('refresh', newTemplateName);
        });
    }

    //Converts the supplied type properties and returns them as an associated array of name and value.
    function getTypePropertyMap(typePropertyEntries)
    {
        var tempArray = [];
        if(!Array.isArray(typePropertyEntries.entry))
            tempArray.push(typePropertyEntries.entry);
        else
            tempArray = typePropertyEntries.entry;
        var result = [];
        $(tempArray).each(function(){
            result[this.key] = this.value;
        });
        return result;
    }

    // Export the template.
    function _exportTemplate(callbackData)
    {
        var templateId = $("#perc-activated-templates").find('.perc-selected').attr('id');
        var templateName = $("#" + templateId).find('.perc-template-thumbnail-container').attr('percbasetemplatename');
        $.PercTemplateService().exportTemplate(templateId, templateName, function(status, result)
        {
            if(status)
            {
                //Do nothing
            }
            else
            {
                perc_utils.alert_dialog(
                    {
                        title: I18N.message("perc.ui.publish.title@Error"),
                        content: result
                    });
            }
        });
    }

    $.extend($.ui.template_selected, {
        getter: "value length",
        defaults: {
            option1: "defaultValue"
        }
    });
})(jQuery);
