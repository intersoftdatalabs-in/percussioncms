/*
 *     Percussion CMS
 *     Copyright (C) 1999-2020 Percussion Software, Inc.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Affero General Public License for more details.
 *
 *     Mailing Address:
 *
 *      Percussion Software, Inc.
 *      PO Box 767
 *      Burlington, MA 01803, USA
 *      +01-781-438-9900
 *      support@percussion.com
 *      https://www.percussion.com
 *
 *     You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>
 */

package com.percussion.design.catalog.system.server;

import com.percussion.design.catalog.IPSCatalogErrors;
import com.percussion.design.catalog.IPSCatalogRequestHandler;
import com.percussion.design.catalog.PSCatalogRequestHandler;
import com.percussion.error.PSIllegalArgumentException;
import com.percussion.i18n.PSLocale;
import com.percussion.i18n.PSLocaleException;
import com.percussion.i18n.PSLocaleManager;
import com.percussion.server.PSRequest;
import com.percussion.xml.PSXmlDocumentBuilder;

import java.util.Iterator;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 * This class is the server-side implementation to handle requests generated by 
 * the {@link com.percussion.design.catalog.system.PSLocaleCatalogHandler}.  
 * See that class for more info.
 */
public class PSLocaleCatalogHandler
   extends PSCatalogRequestHandler
   implements IPSCatalogRequestHandler
{
   /**
    * Constructs an instance of this handler. This is used primarily
    * by the cataloger.
    */
   public PSLocaleCatalogHandler()
   {
      super();
   }

   /* ********  IPSCatalogRequestHandler Interface Implementation ******** */

   /**
    * Get the request type(s) (XML document types) supported by this
    * handler.
    * 
    * @return      the supported request type(s)
    */
   public String[] getSupportedRequestTypes()
   {
      return new String[] {ms_requestDTD};
   }

   /* ************ IPSRequestHandler Interface Implementation ************ */

   /**
    * Process the catalog request. This uses the XML document sent as the
    * input data. The results are written to the specified output
    * stream using the appropriate XML document format.
    *
    * @param   request     the request object containing all context
    *                      data associated with the request
    */
   public void processRequest(PSRequest request)
   {
      Document doc = request.getInputDocument();
      Element root = null;
      if ((doc == null) || ((root = doc.getDocumentElement()) == null))
      {
         Object[] args = {ms_requestCategory, ms_requestType, ms_requestDTD};
         createErrorResponse(
            request, new PSIllegalArgumentException(IPSCatalogErrors.
                  REQ_DOC_MISSING, args));
         return;
      }

      /* verify this is the appropriate request type */
      if (!ms_requestDTD.equals(root.getTagName()))
      {
         Object[] args = {ms_requestDTD, root.getTagName()};
         createErrorResponse(request,
            new PSIllegalArgumentException(IPSCatalogErrors.
                  REQ_DOC_INVALID_TYPE, args));
         return;
      }

      Document retDoc = PSXmlDocumentBuilder.createXmlDocument();

      root = PSXmlDocumentBuilder.createRoot(retDoc, ms_requestDTD +
            "Results");

      // load the locales
      try
      {
         PSLocaleManager localeMgr = PSLocaleManager.getInstance();
         Iterator<PSLocale> locales = localeMgr.getLocales();
         while (locales.hasNext())
         {
            Element locEl = PSXmlDocumentBuilder.addEmptyElement(doc, root, 
            "locale");

            PSXmlDocumentBuilder.addElement(doc, locEl, "languageString", 
                  locales.next().getLanguageString());
         }
      }
      catch (PSLocaleException e)
      {
         createErrorResponse(request, e);
         return;
      }
     
      /* and send the result to the caller */
      sendXmlData(request, retDoc);
   }

   /**
    * Shutdown the request handler, freeing any associated resources.
    */
   public void shutdown()
   {
      /* nothing to do here */
   }

   private static final String   ms_requestCategory   = "system";
   private static final String   ms_requestType       = "Locale";
   private static final String   ms_requestDTD        = "PSXLocaleCatalog";
}

