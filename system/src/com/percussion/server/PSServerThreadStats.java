/*
 *     Percussion CMS
 *     Copyright (C) 1999-2020 Percussion Software, Inc.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Affero General Public License for more details.
 *
 *     Mailing Address:
 *
 *      Percussion Software, Inc.
 *      PO Box 767
 *      Burlington, MA 01803, USA
 *      +01-781-438-9900
 *      support@percussion.com
 *      https://www.percusssion.com
 *
 *     You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>
 */
package com.percussion.server;



/**
* This class holds the thread information for E2 server. Admin client gets
* a collection of all the running threads from E2 server and displays in its
* UI.
* <P><B>This class implemnts IPSComponent interface to handle XML data from
* server</B></P>
*
* @author       Ravi Reddy
* @version      1.0
* @since        1.0
*/
public class PSServerThreadStats extends Object
{
   /**
   * All the thread data will be set in the constructor. There will not be any mutator
   * members of this class.Once the object is constructed only accessor membors
   * are available to access the data
   *
   * @param name        Name of the thread
   * @param strtTime    Time when the thread strted
   * @param status      Weather the thread is idle or procesisng
   */
    PSServerThreadStats(String name, java.util.Date startTime, boolean bProcessing)
    {

    }

    /**
    * To get the name of the thread. This will probably unique name or number
    * generated by E2 server automatically.
    *
    * @return   Thread name as string
    */
    public String getName()
    {
        return null;
    }

    /**
    * Thread start time in string format.
    *
    * @return   Time when this thread started
    */
    public String getStartTime()
    {
        return null;
    }

    /**
    * Returns true if the threads is processing requests.
    *
    * @return       <code>true</code> if the thread is active or
    *               <code>false</code>it is idle
    */
    public boolean IsProcessing()
    {
        return true;
    }

    private String                m_name;
    private java.util.Date        m_startTime;    //start time
    private boolean               m_processing;
}

