/*
 *     Percussion CMS
 *     Copyright (C) 1999-2020 Percussion Software, Inc.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Affero General Public License for more details.
 *
 *     Mailing Address:
 *
 *      Percussion Software, Inc.
 *      PO Box 767
 *      Burlington, MA 01803, USA
 *      +01-781-438-9900
 *      support@percussion.com
 *      https://www.percusssion.com
 *
 *     You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>
 */

package com.percussion.log;



/**
 * The PSApplicationLogReaderFilter class implements log message filtering
 * for applications. Construct a filter with the appropriate attributes,
 * then calling the IPSLogReader's
 * {@link com.percussion.log.IPSLogReader#read read} method. The filter
 * will cause only messages generated by the application to be read. A
 * time range for messages can optionally be applied.
 *
 * @author     Tas Giakouminakis
 * @version    1.0
 * @since      1.0
 */
public class PSApplicationLogReaderFilter implements IPSLogReaderFilter {

   /**
    * Construct an application log filter to retrieve all log entries for
    * an application.
    *
    * @param      applId         the application
    *
    * @param      out            the output stream to write the log entries
    *                            to
    *
    * @param      rawText        <code>true</code> to dump raw text;
    *                            <code>false</code> to use an XML format
    */
   public PSApplicationLogReaderFilter(int applId,
      java.io.OutputStream out,
      boolean rawText)
   {
      this(applId, out, rawText, null, null);
   }

   /**
    * Construct an application log filter to retrieve log entries within
    * the specified time range for an application.
    *
    * @param      applId         the application
    *
    * @param      out            the output stream to write the log entries
    *                            to
    *
    * @param      rawText        <code>true</code> to dump raw text;
    *                            <code>false</code> to use an XML format
    *
    * @param      startTime      the earliest log entry to read; use
    *                            <code>null</code> to ignore start time
    *
    * @param      endTime        the latest log entry to read; use
    *                            <code>null</code> to ignore end time
    */
   public PSApplicationLogReaderFilter(int applId,
      java.io.OutputStream out,
      boolean rawText,
      java.util.Date startTime,
      java.util.Date endTime)
   {
      super();
      m_startTime = startTime;
      m_endTime = endTime;
      m_rawText = rawText;
      m_applId = applId;
   }

   /**
    * Get the application id(s) to retrieve log entries for. Return
    * <code>null</code> to get all log entries (server or application).
    * Return an empty array to retrieve only server entries.
    * 
    * @return  the application id(s) to retrieve log entries for
    */
   public int[] getApplicationIds()
   {
      return new int[] { m_applId };
   }

   /**
    * Get the time to use as the earliest log entry to retrieve. Return
    * <code>null</code> to retrieve entries starting from the earliest
    * recorded log entry.
    * 
    * @return              the earliest log entry time to retrieve
    */
   public java.util.Date getStartTime()
   {
      return m_startTime;
   }

   /**
    * Get the time to use as the latest log entry to retrieve. Return
    * <code>null</code> to retrieve entries including the most recently
    * recorded log entry.
    * 
    * @return              the latest log entry time to retrieve
    */
   public java.util.Date getEndTime()
   {
      return m_endTime;
   }

   /**
    * Get the time to use for the next traversal of log entries. This
    * uses the latest log time read by processMessage. If this log filter
    * was not previously used in a call to the
    * {@link com.percussion.log.IPSLogReader#read IPSLogReader's read}
    * method, <code>null</code> will be returned.
    * 
    * @return              the time to use for the next traversal of
    *                      log entries
    */
   public java.util.Date getNextStartTime()
   {
      return null;
   }

   /**
    * Get the types of log entries to retrieve. Return
    * <code>null</code> or an empty array to retrieve all types of log
    * entries.
    * 
    * @return              the types of log entries
    */
   public int[] getEntryTypes()
   {
      return null;
   }

   /**
    * Process the next log message.
    *
    * @param      msg                     the log message which was read,
    *                                     or <code>null</code> to signify
    *                                     that no more log messages exist
    *
    * @param      filterWasApplied        <code>true</code> if the filter
    *                                     conditions were applied prior to
    *                                     this call by the log reader;
    *                                     <code>false</code> if applying
    *                                     filter conditions is not supported
    *                                     by the log reader
    */
   public void processMessage(PSLogEntry msg, boolean filterWasApplied)
   {
   }

   private java.util.Date m_startTime;
   private java.util.Date m_endTime;
   private boolean m_rawText;
   int m_applId;
}
