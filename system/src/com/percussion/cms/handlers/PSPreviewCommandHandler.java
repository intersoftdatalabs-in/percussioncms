/*
 *     Percussion CMS
 *     Copyright (C) 1999-2020 Percussion Software, Inc.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Affero General Public License for more details.
 *
 *     Mailing Address:
 *
 *      Percussion Software, Inc.
 *      PO Box 767
 *      Burlington, MA 01803, USA
 *      +01-781-438-9900
 *      support@percussion.com
 *      https://www.percusssion.com
 *
 *     You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>
 */
package com.percussion.cms.handlers;

import com.percussion.cms.IPSConstants;
import com.percussion.cms.PSEditorDocumentBuilder;
import com.percussion.cms.PSEditorDocumentContext;
import com.percussion.cms.PSPreviewDocumentBuilder;
import com.percussion.cms.PSPreviewDocumentBuilderEx;
import com.percussion.conn.PSServerException;
import com.percussion.data.PSDataExtractionException;
import com.percussion.data.PSExecutionData;
import com.percussion.design.objectstore.PSApplication;
import com.percussion.design.objectstore.PSContentEditor;
import com.percussion.design.objectstore.PSContentEditorPipe;
import com.percussion.design.objectstore.PSDisplayMapper;
import com.percussion.design.objectstore.PSNotFoundException;
import com.percussion.design.objectstore.PSSystemValidationException;
import com.percussion.error.PSIllegalArgumentException;
import com.percussion.extension.PSExtensionException;
import com.percussion.server.IPSServerErrors;
import com.percussion.server.PSApplicationHandler;
import com.percussion.server.PSRequest;
import com.percussion.util.IPSHtmlParameters;

import java.util.Iterator;

/**
 * This class handles the 'preview' command. It responds by building a page
 * of data that can be used to generate the preview of the content item. The
 * output document looks like the document generated by the 'edit' command
 * handler, except it only includes fields that have the 'showInPreview' flag
 * set to <code>true</code> and it also includes additional information used
 * by the stylesheet for generating links to actual previews of the data in
 * supported formats.
 * <p>There is exactly 1 preview page per editor.
 * <p>The following params are expected:
 * <ul>
 *   <li>sys_contentid</li>
 *   <li>outputformat</li>
 * </ul>
 * If these params are not present, an error will be returned.
 */
public class PSPreviewCommandHandler extends PSQueryCommandHandler
{

   /**
    * The internal name of this handler. When handler names are used in
    * config files, this is the name that must be used.
    */
   public static final String COMMAND_NAME = "preview";


   /**
    * Creates a handler to process requests for previewing existing content
    * items.
    * <p>See {@link PSQueryCommandHandler#PSQueryCommandHandler(
    * PSApplicationHandler, PSContentEditorHandler, PSContentEditor,
    * PSApplication, String) base} class for a description of the params and
    * exceptions that aren't listed below.
    *
    * @param eh The handler that will actually process the edit requests.
    *    This handler uses resources for the 'root' page when processing the
    *    preview request. Never <code>null</code>.
    */
   public PSPreviewCommandHandler( PSApplicationHandler ah,
         PSContentEditorHandler ceh, PSContentEditor ce,
         PSApplication dynamicApp, PSEditCommandHandler eh)
      throws PSNotFoundException, PSIllegalArgumentException,
         PSExtensionException, PSServerException, PSSystemValidationException
   {
      super( ah, ceh, ce, dynamicApp, COMMAND_NAME );

      PSEditorDocumentContext ctx = new PSEditorDocumentContext( ceh,
            ah.getApplicationDefinition(), ce );
      ctx.setPageInfoMap( eh.getPageMap());
      ctx.setDocumentMode( false );
      ctx.setCommandName( COMMAND_NAME );

      PSContentEditorPipe pipe = (PSContentEditorPipe) ce.getPipe();
      if ( null == pipe )
      {
         String [] args =
         {
               ce.getName(),
               ah.getApplicationDefinition().getName()
         };
         throw new PSSystemValidationException(
               IPSServerErrors.APP_NO_QUERY_PIPES_IN_DATASET, args );
      }
      PSDisplayMapper dispMapper =
            pipe.getMapper().getUIDefinition().getDisplayMapper();

      m_contentTypeId = new Integer((int) ce.getContentType());
      m_editHandler = eh;
      m_previewBuilder = new PSPreviewDocumentBuilder( ce, ctx, dispMapper,
            ROOT_PARENT_PAGE_ID, false );
      m_previewBuilderEx = new PSPreviewDocumentBuilderEx( ce, ctx, dispMapper,
            ROOT_PARENT_PAGE_ID, false);
   }


   /**
    * This is a convenience method that allows us
    * to do some pre processing before process request
    * does any real work, but allow any exceptions to be handled
    * by the processRequest's try/catch block.
    *
    * @param request the request to be preprocessed.
    *  Must not be <code>null</code>
    */
   public void preProcessRequest( PSRequest req )
   {
      // The variant lookup resource requires this parameter
      req.setParameter( "contenttypeid", m_contentTypeId );

   }


   // see base for description
   protected Iterator getAppList( int id, PSExecutionData data,
         boolean isNewDoc )
      throws PSDataExtractionException
   {
      // can't preview a new document
      if ( isNewDoc )
      {
         throw new PSDataExtractionException(
               IPSServerErrors.CE_CANT_PREVIEW_NEWDOC );
      }

      return m_editHandler.getAppList( id, data, false );
   }


   // See base class for description.
   protected PSEditorDocumentBuilder getDocumentBuilder(
      int id,
      PSExecutionData data)
   {
      if (data == null)
         throw new IllegalArgumentException("data may not be null");
         
      if (id != ROOT_PARENT_PAGE_ID)
         return null;
      
      PSRequest req = data.getRequest();

      String showAllField =
         req.getParameter(IPSHtmlParameters.SYS_SHOW_IN_PREVIEW);
         
      if (showAllField != null
         && showAllField.equalsIgnoreCase(IPSConstants.BOOLEAN_TRUE))
         return m_previewBuilderEx;
      else
         return m_previewBuilder;
   }


   /**
    * The builder of the preview output page. The actual editor is a
    * <code>PSPreviewDocumentBuilder</code>. Never <code>null</code> or
    * modified after construction.
    */
   private PSEditorDocumentBuilder m_previewBuilder;

   /**
    * The builder of the preview output page. The actual editor is a
    * <code>PSPreviewDocumentBuilderEx</code>. Use this to override the 
    * "showInPreview" of the fields to "yes". Never <code>null</code>
    * or modified after construction.
    */
   private PSEditorDocumentBuilder m_previewBuilderEx;

   /**
    * The handler for the edit pages of the editor associated with this
    * preview page. Never <code>null</code> or modified after construction.
    */
   private PSEditCommandHandler m_editHandler;

   /**
    * Every editor works on a particular type of content. The identifier of
    * this content type in the db is this value. We use it when making the
    * variant lookup. Set in ctor, then never modified.
    */
   private Integer m_contentTypeId;
}
