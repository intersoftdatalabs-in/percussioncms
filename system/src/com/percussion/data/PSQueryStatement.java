/*
 *     Percussion CMS
 *     Copyright (C) 1999-2020 Percussion Software, Inc.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Affero General Public License for more details.
 *
 *     Mailing Address:
 *
 *      Percussion Software, Inc.
 *      PO Box 767
 *      Burlington, MA 01803, USA
 *      +01-781-438-9900
 *      support@percussion.com
 *      https://www.percusssion.com
 *
 *     You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>
 */
package com.percussion.data;

import com.percussion.error.PSIllegalArgumentException;
import com.percussion.server.PSRequest;
import com.percussion.util.PSPreparedStatement;
import com.percussion.utils.jdbc.PSConnectionDetail;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;


/**
 * The PSQueryStatement class defines a query (SELECT) statement which can
 * be executed as part of a query execution plan.
 *
 * @author      Tas Giakouminakis
 * @version    1.0
 * @since      1.0
 */
public class PSQueryStatement extends PSStatement
{
   /**
    * Construct a query statement which can be executed as part of the
    * query execution plan. The query may contain place holders, which
    * must be filled prior to execution.
    *
    * @param   connKey      the connection key to use to get the db conn
    *
    * @param   blocks      the statement blocks comprising this statement
    *
    * @param   cursorName   the cursor name to use when performing a
    *                      positioned UPDATE based on this SELECT
    */
   public PSQueryStatement(
      int connKey, IPSStatementBlock[] blocks, String cursorName)
      throws com.percussion.data.PSDataExtractionException
   {
      super(connKey, blocks, isStoreSqlStatement(blocks));
      m_cursorName = cursorName;
      m_storeSqlStatement = isStoreSqlStatement(blocks);
   }

   /**
    * Construct a query statement which can be executed as part of the
    * query execution plan. The query may contain place holders, which
    * must be filled prior to execution.
    *
    * @param   connKey      the connection key to use to get the db conn
    *
    * @param   blocks      the statement blocks comprising this statement
    */
   public PSQueryStatement(
      int connKey, IPSStatementBlock[] blocks)
      throws com.percussion.data.PSDataExtractionException
   {
      this(connKey, blocks, null);
   }

   /**
    * Determines whether a static sql can be constructed from the specified
    * blocks. If <code>blocks</code> is <code>null</code> or empty array then
    * <code>true</code> is returned.
    *
    * @param blocks statement blocks, may be <code>null</code> or empty array
    *
    * @return <code>true</code> if a static sql can be constructed from the
    * specified blocks, <code>false</code> otherwise
    */
   private static boolean isStoreSqlStatement(IPSStatementBlock[] blocks)
   {
      boolean storeSqlStatement = true;
      if ((blocks != null) && (blocks.length > 0))
      {
         for (int i = 0; i < blocks.length; i++)
         {
            if ((!blocks[i].isStaticBlock()) || (!blocks[i].hasStaticSql()))
            {
               storeSqlStatement = false;
               break;
            }
         }
      }
      return storeSqlStatement;
   }

   /* ************  IPSExecutionStep Interface Implementation ************ */

   /**
    * Execute the query statement as a step in the execution plan.
    * The result set generated by executing this query will be added to
    * the execution data.
    * <p>
    * The following steps are performed during execution:
    * <ol>
    * <li>PSQueryHandler filled in the statement before calling execute.
    * We can now check the cache to see if the statement already
    * exists in the cache (if caching is enabled for this pipe).</li>
    * <li>if the statement was in cache, we can add its results to the
    * execution data and return</li>
    * <li>otherwise, we need to execute the statement through the db pool
    * and add its results to the execution data</li>
    * <li>if caching is enabled, we also need to add its results to the
    * cache</li>
    * </ol>
    *
    * @param   data    the execution data associated with this plan
    *
    * @exception    SQLException If a SQL error occurs.
    */
   public void execute(PSExecutionData data)
      throws java.sql.SQLException,
         com.percussion.data.PSDataExtractionException,
         com.percussion.error.PSErrorException
   {
      /* *TODO* (future)
       * if the statement was in cache, we can add its results to the
       * execution data and return
       */

      /* otherwise, we need to execute the statement through the db pool
       * and add its results to the execution data
       */
      PreparedStatement stmt   = null;
      Connection conn = null;
      PSConnectionDetail connDetail = null;

      try
      {
         try
         {
            conn = data.getDbConnection(m_connKey);
            connDetail = data.getDbConnectionDetail(m_connKey);
         }
         catch (PSIllegalArgumentException ie)
         {
            throw new SQLException(ie.getMessage());
         }

         String sqlString;
         if (m_storeSqlStatement)
            sqlString = m_sqlString;
         else
            sqlString = buildSqlString(data, true);

         // log the statement (if full user activity is on)
         logPreparedStatement(data, sqlString);
         /* workaround for JDK Bug Id  4423012 */
         boolean preparedStatementHasParams = (sqlString.indexOf("?") >= 0);
         stmt = PSPreparedStatement.getPreparedStatement(conn, sqlString);
         data.addPreparedStatement(stmt);

         // set the cursor name if specified
         if (m_cursorName != null)
            stmt.setCursorName(m_cursorName);

         PSRequest req = data.getRequest();

         try {
            stmt.setMaxFieldSize(0);   // unlimited size permitted
         } catch (java.sql.SQLException se) {
            // if this is not supported, that's ok. otherwise, treat it
            // as an error
            if (!PSSqlException.hasFeatureNotSupported(se, 
               connDetail.getDriver()))
            {
               throw se;
            }
         }
         if (preparedStatementHasParams)
            stmt.clearParameters();
         int bindStart = 1;
         for (int i = 0; i < m_blocks.length; i++) {
            bindStart = m_blocks[i].setColumnData(data, stmt, bindStart);
         }

         // Tune the ResultSet for the number of rows to handle
         int maxRows = data.getMaxRows();
         if (maxRows > 0)
            stmt.setMaxRows(maxRows);

         ResultSet rs = stmt.executeQuery();
         data.getResultSetStack().push(rs);

         /* *TODO* (future)
          * if caching is enabled, we must add the result set to the cache
          *
          * when this is the case, we must convert the result set
          * to our PSResultSet which allows it to be read multiple
          * times, etc.
          */
      }
      catch (java.sql.SQLException e)
      {
         joinSqlExceptions(conn, stmt, e);
         if (stmt != null) {
            stmt.close();
            data.removePreparedStatement(stmt);
         }

         throw e;
      }
   }


   protected String m_cursorName;
   protected boolean m_storeSqlStatement;
}

