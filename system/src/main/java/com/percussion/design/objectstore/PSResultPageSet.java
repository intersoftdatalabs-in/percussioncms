/*
 * Copyright 1999-2023 Percussion Software, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.percussion.design.objectstore;

import com.percussion.util.PSCollection;
import com.percussion.xml.PSXmlTreeWalker;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import java.util.List;
import java.util.Objects;


/**
 * The PSResultPageSet class defines the results being generated by a
 * data set. One data set may produce HTML or XML results. It may also
 * associate a different stylesheet with the output, depending upon user
 * defined conditions.
 *
 * @see PSDataSet
 *
 * @author      Tas Giakouminakis
 * @version    1.0
 * @since      1.0
 */
public class PSResultPageSet extends PSComponent implements IPSResults
{
   /**
    * Construct a Java object from its XML representation. See the
    * {@link #toXml(Document) toXml} method for a description of the XML object.
    *
    * @param      sourceNode      the XML element node to construct this
    *                                    object from
    *
    * @param      parentDoc      the Java object which is the parent of this
    *                                    object
    *
    * @param      parentComponents   the parent objects of this object
    *
    * @exception   PSUnknownNodeTypeException
    *                                    if the XML element node is not of the
    *                                    appropriate type
    */
   public PSResultPageSet(org.w3c.dom.Element sourceNode,
      IPSDocument parentDoc, List parentComponents)
      throws PSUnknownNodeTypeException
   {
      this();
      fromXml(sourceNode, parentDoc, parentComponents);
   }

   /**
    * Construct a results object.
    */
   public PSResultPageSet()
   {
      super();
      m_resultPages = new PSCollection(com.percussion.design.objectstore.PSResultPage.class);
   }

   /**
    * Get the result pages defined as output from this data set.
    * Result pages are used to specify the style sheet to use for returned
    * pages. Conditionals can be associated with the result pages allowing
    * different results to be generated based upon the request context.
    *
    * @return      a collection containing the result pages
    *                  (PSResultPage objects) (may be null)
    */
   public com.percussion.util.PSCollection getResultPages()
   {
      return m_resultPages;
   }

   /**
    * Overwrite the result pages associated with the specified collection.
    * If you only want to modify certain pages, add a new page, etc. use
    * getResultPages to get the existing collection and modify the returned
    * collection directly.
    * <p>
    * Result pages are used to specify the style sheet to use for returned
    * pages. Conditionals can be associated with the result pages allowing
    * different results to be generated based upon the request context.
    * <p>
    * The PSCollection object supplied to this method will be stored with
    * the PSResultPageSet object. Any subsequent changes made to the object
    * by the caller will also effect the results object.
    *
    * @param      pages    the new result pages (may be null)
    *
    * @see         PSResultPage
    */
   public void setResultPages(com.percussion.util.PSCollection pages)
   {
      IllegalArgumentException ex = validateResultPages(pages);
      if (ex != null)
         throw ex;

      m_resultPages = pages;
   }

   private static IllegalArgumentException validateResultPages(
      PSCollection pages)
   {
      if (pages != null) {
         String collectionClass = pages.getMemberClassName();
         if (!com.percussion.design.objectstore.PSResultPage.class.isAssignableFrom(
            pages.getMemberClassType()))
         {
            return new IllegalArgumentException("coll bad content type, Result Page: " +
               pages.getMemberClassName());
         }
      }

      return null;
   }

   /* **************  IPSComponent Interface Implementation ************** */

   /**
    * This method is called to create a PSXResultPageSet XML element
    * node containing the data described in this object.
    * <p>
    * The structure of the XML document is:
    * <pre><code>
    *       &lt;!--
    *            PSXResultPageSet defines the results being generated by a data
    *            set. One data set may produce HTML or XML results. It may also
    *            associate a different stylesheet with the output, depending upon
    *            user defined conditions.
    *
    *            Object References:
    *
    *            PSXResultPage - the result pages defined as output from this data
    *            set. Result pages are used to specify the style sheet to use for
    *            returned pages. Conditionals can be associated with the result
    *            pages allowing different results to be generated based upon the
    *            request context.
    *       --&gt;
    *       &lt;!ELEMENT PSXResultPageSet (PSXResultPage*)&gt;
    * </code></pre>
    *
    * @return     the newly created PSXResultPageSet XML element node
    */
   public Element toXml(Document doc)
   {
      Element   root = doc.createElement(ms_NodeType);
      root.setAttribute("id", String.valueOf(m_id));

      //private          PSCollection        m_resultPages = null; //PSXResultPage objects
      if (m_resultPages != null) {
         PSResultPage      page;
         int size = m_resultPages.size();
         for (int i=0; i < size; i++) {
            page = (PSResultPage)m_resultPages.get(i);
            if(null != page)
               root.appendChild(page.toXml(doc));
         }
      }

      return root;
   }

   /**
    * This method is called to populate a PSResultPageSet Java object
    * from a PSXResultPageSet XML element node. See the
    * {@link #toXml(Document) toXml} method for a description of the XML object.
    *
    * @exception   PSUnknownNodeTypeException if the XML element node is not
    *                                             of type PSXResults
    */
   public void fromXml(Element sourceNode, IPSDocument parentDoc,
                        List parentComponents)
      throws PSUnknownNodeTypeException
   {
      parentComponents = updateParentList(parentComponents);
      int parentSize = parentComponents.size() - 1;

      try {
         if (sourceNode == null)
            throw new PSUnknownNodeTypeException(
               IPSObjectStoreErrors.XML_ELEMENT_NULL, ms_NodeType);

         if (false == ms_NodeType.equals (sourceNode.getNodeName()))
         {
            Object[] args = { ms_NodeType, sourceNode.getNodeName() };
            throw new PSUnknownNodeTypeException(
               IPSObjectStoreErrors.XML_ELEMENT_WRONG_TYPE, args);
         }

         PSXmlTreeWalker   tree = new PSXmlTreeWalker(sourceNode);

         String sTemp = tree.getElementData("id");
         try {
            m_id = Integer.parseInt(sTemp);
         } catch (Exception e) {
            Object[] args = { ms_NodeType, ((sTemp == null) ? "null" : sTemp) };
            throw new PSUnknownNodeTypeException(
               IPSObjectStoreErrors.XML_ELEMENT_INVALID_ID, args);
         }

         int firstFlags = PSXmlTreeWalker.GET_NEXT_ALLOW_CHILDREN;
         int nextFlags = PSXmlTreeWalker.GET_NEXT_ALLOW_SIBLINGS;
         firstFlags |= PSXmlTreeWalker.GET_NEXT_RESET_CURRENT;
         nextFlags  |= PSXmlTreeWalker.GET_NEXT_RESET_CURRENT;

         m_resultPages.clear();
         String curNodeType = PSResultPage.ms_NodeType;
         if (tree.getNextElement(curNodeType, firstFlags) != null){
            PSResultPage   page;
            do{
               page = new PSResultPage(
                  (Element)tree.getCurrent(), parentDoc, parentComponents);
               m_resultPages.add(page);
            } while (tree.getNextElement(curNodeType, nextFlags) != null);
         }
      } finally {
         resetParentList(parentComponents, parentSize);
      }
   }

   /**
    * Validates this object within the given validation context. The method
    * signature declares that it throws PSSystemValidationException, but the
    * implementation must not directly throw any exceptions. Instead, it
    * should register any errors with the validation context, which will
    * decide whether to throw the exception (in which case the implementation
    * of <CODE>validate</CODE> should not catch it unless it is to be
    * rethrown).
    *
    * @param   cxt The validation context.
    *
    * @throws PSSystemValidationException According to the implementation of the
    * validation context (on warnings and/or errors).
    */
   public void validate(IPSValidationContext cxt) throws PSSystemValidationException
   {
      if (!cxt.startValidation(this, null))
         return;

      IllegalArgumentException ex = validateResultPages(m_resultPages);

      // do children
      cxt.pushParent(this);
      try
      {
         if (m_resultPages != null)
         {
            for (int i = 0; i < m_resultPages.size(); i++)
            {
               Object o = m_resultPages.get(i);
               if (o == null)
                  cxt.validationError(this, 0, "result page " + i + " == null");
               else if (!(o instanceof PSResultPage))
               {
                  Object[] args = new Object[] { "result page " + i, o.getClass().getName() };
                  cxt.validationError(this, 0, args);
               }
               else
               {
                  PSResultPage page = (PSResultPage)o;
                  page.validate(cxt);
               }
            }
         }
      }
      finally
      {
         cxt.popParent();
      }
   }

   @Override
   public boolean equals(Object o) {
      if (this == o) return true;
      if (!(o instanceof PSResultPageSet)) return false;
      if (!super.equals(o)) return false;
      PSResultPageSet that = (PSResultPageSet) o;
      return Objects.equals(m_resultPages, that.m_resultPages);
   }

   @Override
   public int hashCode() {
      return Objects.hash(super.hashCode(), m_resultPages);
   }

   /**
    * Creates a deep copy of this PSResultPageSet
    * @return a clone object of this instance
    */
   public Object clone()
   {
      PSResultPageSet copy = (PSResultPageSet) super.clone();
      copy.m_resultPages = (PSCollection) m_resultPages.clone();
      return copy;
   }

   private          PSCollection        m_resultPages = null; //PSResultPage objects

   /* package access on this so they may reference each other in fromXml */
   static final String   ms_NodeType            = "PSXResultPageSet";
}

