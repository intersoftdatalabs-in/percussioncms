/*
 * Copyright 1999-2023 Percussion Software, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.percussion.cms.objectstore;

import com.percussion.design.objectstore.IPSObjectStoreErrors;
import com.percussion.design.objectstore.PSUnknownNodeTypeException;
import com.percussion.util.PSXMLDomUtil;
import com.percussion.xml.PSXmlTreeWalker;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * This class wraps a set of results returned by a processor. The object is
 * logically immutable (meaning you can't change it directly, but you could
 * get the objects it manages and change those).
 *
 * @author Paul Howard
 * @version 1.0
 */
public class PSSaveResults implements IPSCmsComponent
{
   /**
    * Create a new instance.
    *
    * @param comps Never <code>null</code>.
    *
    * @param stats Never <code>null</code>.
    */
   public PSSaveResults(IPSDbComponent[] comps, PSProcessingStatistics stats)
   {
      if (null == comps)
         throw new IllegalArgumentException("Component array cannot be null");
      if (null == stats)
         throw new IllegalArgumentException("Statistics object cannot be null");

      m_comps = comps;
      m_stats = stats;
   }


   /**
    * Creates a new instance from a previously serialized one.
    *
    * @param src  Never <code>null</code>.
    *
    * @throws PSUnknownNodeTypeException See <code>{@link #fromXml(Element)}
    *    </code>.
    */
   public PSSaveResults(Element src)
      throws PSUnknownNodeTypeException
   {
      if (null == src)
         throw new IllegalArgumentException("Source element cannot be null.");
      fromXml(src);
   }

   /**
    * Returns the array supplied in the ctor.
    *
    * @return Never <code>null</code>.
    */
   public IPSDbComponent[] getResults()
   {
      return m_comps;
   }

   /**
    * Returns the statistics object supplied in the ctor.
    *
    * @return Never <code>null</code>.
    */
   public PSProcessingStatistics getResultStats()
   {
      return m_stats;
   }


   /**
    * See {@link IPSCmsComponent#toXml(Document) interface} for description.
    * The document generated by this class conforms to the following dtd:
    * <pre><code>
    *    &lt;!ELEMENT getNodeName() (getResultStats().getNodeName(),
    *       PSDbComponentList.getNodeName()*)&gt;
    * </code></pre>
    * <p>There will be a component list for each group of components that are
    * the same. Note that the array from a re-serialized object does not
    * necessarily have the same sequence of components as the original if the
    * compnent types were intermingled.
    */
   public Element toXml(Document doc)
   {
      if (null == doc)
         throw new IllegalArgumentException("Document cannot be null.");

      //key = component type, value = PSDbComponentList for those types
      Map compGroups = new HashMap();
      for (int i=0; i < m_comps.length; i++)
      {
         PSDbComponentList l = (PSDbComponentList)
               compGroups.get(m_comps[i].getComponentType());
         if (null == l)
         {
            l = new PSDbComponentList(m_comps[i].getClass());
            compGroups.put(m_comps[i].getComponentType(), l);
         }
         l.add(m_comps[i]);
      }
      Element root = doc.createElement(getNodeName());
      root.appendChild(m_stats.toXml(doc));
      Iterator it = compGroups.values().iterator();
      while (it.hasNext())
         root.appendChild(((PSDbComponentList) it.next()).toXml(doc));
      return root;
   }

   //see interface for description
   public String getNodeName()
   {
      String name = getClass().getName().substring(
            getClass().getName().lastIndexOf('.')+1);
      if ( name.startsWith("PS"))
         name = "PSX" + name.substring(2);
      return name;
   }

   //see interface for description
   public void fromXml(Element src)
      throws PSUnknownNodeTypeException
   {
      if (src == null)
         throw new IllegalArgumentException("Source element cannot be null.");

      PSXMLDomUtil.checkNode(src, getNodeName());

      PSXmlTreeWalker w = new PSXmlTreeWalker(src);
      Element stats = w.getNextElement(PSXmlTreeWalker.GET_NEXT_ALLOW_CHILDREN);
      if (null == stats)
      {
         String[] args =
         {
            getNodeName(),
            PSProcessingStatistics.XML_NODE_NAME,
            "missing node"
         };
         throw new PSUnknownNodeTypeException(
               IPSObjectStoreErrors.XML_ELEMENT_INVALID_CHILD, args);
      }
      m_stats = new PSProcessingStatistics(stats);

      List all = new ArrayList();
      Element el = w.getNextElement(PSXmlTreeWalker.GET_NEXT_ALLOW_SIBLINGS);
      while (null != el)
      {
         PSDbComponentList l = new PSDbComponentList(el);
         for (int i=0; i < l.size(); i++)
         {
            all.add(l.get(i));
         }
         el = w.getNextElement(PSXmlTreeWalker.GET_NEXT_ALLOW_SIBLINGS);
      }
      m_comps = new IPSDbComponent[all.size()];
      all.toArray(m_comps);
   }


   //see interface for description
   public Object clone()
   {
      /**@todo: Implement this com.percussion.cms.objectstore.IPSCmsComponent method*/
      throw new java.lang.UnsupportedOperationException("Method clone() not yet implemented.");
   }


   //see interface for description
   public boolean equals(Object obj)
   {
      /**@todo: Implement this com.percussion.cms.objectstore.IPSCmsComponent method*/
      throw new java.lang.UnsupportedOperationException("Method equals() not yet implemented.");
   }

   /**
    * Not implemented. Overrides {@link Object#hashCode()}.
    */
   @Override
   public int hashCode()
   {
      throw new UnsupportedOperationException("Not Implemented");
   }

   /**
    * Set in ctor, then never <code>null</code> or changed after that.
    */
   private IPSDbComponent[] m_comps;

   /**
    * Set in ctor, then never <code>null</code> or changed after that.
    */
   private PSProcessingStatistics m_stats;
}
