/*
 *     Percussion CMS
 *     Copyright (C) 1999-2020 Percussion Software, Inc.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Affero General Public License for more details.
 *
 *     Mailing Address:
 *
 *      Percussion Software, Inc.
 *      PO Box 767
 *      Burlington, MA 01803, USA
 *      +01-781-438-9900
 *      support@percussion.com
 *      https://www.percussion.com
 *
 *     You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>
 */

package com.percussion.data;

import com.percussion.security.PSAuthenticationFailedException;
import com.percussion.security.PSAuthorizationException;
import com.percussion.server.PSRequest;
import org.w3c.dom.Document;

/**
 * Internal request access interface.  This will allow request handlers to
 *  make requests through other request handlers directly through a method call.
 */
public interface IPSInternalRequestHandler
{
   /**
    * Make an direct request call to this handler.
    *
    * @param request the context (session, authentication, parameters, etc.)
    * that will be used to make the request, not <code>null</code>.
    *
    * @return The execution data associated with the internal request call
    * when finished, this execution data must be released by calling its
    * <code>release()</code> method.  Can be <code>null</code> for basic
    * internal request handlers like the <code>PSUpdateHandler</code> class.
    *
    * @throws PSInternalRequestCallException if any error occurs processing
    *    the internal request call
    *
    * @throws PSAuthorizationException if the user is not authorized
    *
    * @throws PSAuthenticationFailedException if the user failed to authenticate
    *
    * @throws IllegalArgumentException if the request is <code>null</code>
    *
    * @see IPSInternalResultHandler
    */
   public PSExecutionData makeInternalRequest(PSRequest request)
      throws PSInternalRequestCallException, PSAuthorizationException,
      PSAuthenticationFailedException;


   /**
    * Makes an direct request to this handler and returns the resulting XML.
    * <p>
    * TODO: If this handler represents an update with a redirect, the XML
    * document will be generated by making an internal request to the resource
    * indicated by the redirect.  Until then, this method will throw
    * <code>UnsupportedOperationException</code> for update handlers.
    *
    * @param request the context (session, authentication, parameters, etc.)
    * that will be used to make the request, not <code>null</code>.
    *
    * @return The generated document from this request, not <code>null</code>.
    *
    * @throws IllegalArgumentException if the request is <code>null</code>.
    * @throws UnsupportedOperationException if this handler does not provide
    * XML results, such as a binary (non-text) resource.
    * @throws PSInternalRequestCallException if any error occurs processing
    * the request.
    * @throws PSAuthorizationException if the user is not authorized to perform
    * the request.
    * @throws PSAuthenticationFailedException if the user fails to authenticate.
    */
   public Document getResultDocument(PSRequest request)
      throws PSInternalRequestCallException, PSAuthorizationException,
      PSAuthenticationFailedException;

   /**
    * Returns the type of resource to which request can be made using this
    * object.
    *
    * @return one of <code>IPSInternalRequest.REQUEST_TYPE_xxx</code> values
    *
    * see {@link com.percussion.server.IPSInternalRequest#getRequestType()}
    * for details.
    */
   public int getRequestType();
   
   /**
    * Returns <code>true</code> if the request handler returns binary data. 
    * This is defined here as non-document data.
    * @param req the request, never <code>null</code>
    * @return <code>true</code> if the request handler is not returning a 
    * document
    */
   public boolean isBinary(PSRequest req);
}

