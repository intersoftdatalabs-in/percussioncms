#Fri, 05 Aug 2016 15:45:28 -0400
#[ Version.properties ]*******************************************************
#
# COPYRIGHT (c) 1999 - 2013 by Percussion Software, Inc., Woburn, MA USA.
# All rights reserved. This material contains unpublished, copyrighted
# work including confidential and proprietary information of Percussion.
#
#*****************************************************************************
#
# This properties file is used to define the version of a percussion JAR delivered
# with the product. It contains 6 elements which are:
#     - display prefix
#       valid entries are: BETA, RELEASE, INTERNAL, QA, PATCH, TEST
#     - version (majorVersion.minorVersion microVersion)
#       valid entries are: anyNumber.anyNumber
#     - build number
#       valid entries are: anyNumber
#     - build id
#       valid entries are: anyNumber
#     - optional id
#       valid entries are: anyString
#
# This informations are used to specify a unique version for each build made.
# The properties versionString, majorVersion and minorVersion must be set
# manually each time we go for a new version phase and/or version. The properties
# buildNumber and buildId will be updated each time the appropriate JAR file
# is created.
#

# the display prefix for the version string
versionString=PATCH


# the major version number
majorVersion=5

# the minor version number
minorVersion=3

# the micro version number
microVersion=15

# This is a monotonically increasing value that increments every time a
# release build is created. (this will be replaced while the JAR is built)
buildId=0

# the build number, in the format YYYYMMNN, eg 20011231. This is the year/month and counter for
# the build and is used by everyone outside development to reference
# a build. Always 8 digits. (this will be replaced while the JAR is built)
buildNumber=20160805

# This is a monotonically increasing value that is only incremented when
# changes are made to the workbench and server such that the workbench is no
# longer forward compatible with newer versions of the server.
#
# The rules are that the Client will be compatible with any server that has a
# version specified by the client, and has
# an InterfaceVersion that is <= to the client's.  This allows for backward
# compatiblity with particular versions of the server (this is controlled by the
# client using the major and possibly minor version), but will allow the server
# to control whether or not older clients are able to connect to newer servers
# using the interface version.
interfaceVersion=9

# An optional id string used for TEST and PATCH builds
optionalId=5315_20161102

displayVersion=5.3.15
