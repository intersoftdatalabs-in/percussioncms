<!--
  ~     Percussion CMS
  ~     Copyright (C) 1999-2020 Percussion Software, Inc.
  ~
  ~     This program is free software: you can redistribute it and/or modify
  ~     it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
  ~
  ~     This program is distributed in the hope that it will be useful,
  ~     but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~     GNU Affero General Public License for more details.
  ~
  ~     Mailing Address:
  ~
  ~      Percussion Software, Inc.
  ~      PO Box 767
  ~      Burlington, MA 01803, USA
  ~      +01-781-438-9900
  ~      support@percussion.com
  ~      https://www.percusssion.com
  ~
  ~     You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>
  -->

<project name="CM1 Patch Installer" default="install" basedir=".">
    <description>CM1 Patch Installer</description>

    <!-- CM1 installation properties -->
    <property name="rhythmyx.home" value="${basedir}/../../.."/>
    <property name="rhythmyx.deploy" value="${rhythmyx.home}/AppServer/server/rx/deploy"/>
    <property name="rhythmyx.rxapp" value="${rhythmyx.deploy}/rxapp.ear/rxapp.war"/>
    <property name="rhythmyx.rxapp.lib" value="${rhythmyx.rxapp}/WEB-INF/lib"/>
    <property name="rhythmyx.rx.lib" value="${rhythmyx.home}/AppServer/server/rx/lib"/>
    <property name="rhythmyx.Extensions" value="${rhythmyx.home}/Extensions"/>

    <!-- Patch properties -->
    <property name="patch.base" value="${basedir}/../.."/>
    <property name="patch.home" value="${basedir}/.."/>
    <property name="patch.backup" value="${patch.home}/backup"/>
    <property name="patch.Extensions" value="${patch.backup}/Extensions"/>
    <property name="patch.files" value="${patch.home}/files"/>
    <property name="patchid" value="@PATCHID@"/>
    <property name="patch.files.dts" value="${patch.files}/Patch/${patchid}/files"/>
    <property name="derby.port" value="1527"/>
    <property file="${patch.backup}/Version.properties" prefix="previousVersion"/>
    
    <!-- Install toolkit properties -->
    <property name="toolkit.lib" value="${patch.base}/InstallToolkit/lib"/>

    <!-- Define the ant extension classpath -->
    <path id="antExt.class.path">
        <pathelement location="${toolkit.lib}/psantextensions.jar"/>
        <pathelement location="${toolkit.lib}/ant-contrib-0.6.jar"/>
    </path>
    
    <!-- Define the ant extension classpath for table action -->
    <path id="antTableAction.class.path">
        <pathelement location="${patch.files}/rxantinstall.jar"/>
        <pathelement location="${patch.files}/rxclient.jar"/>
        <pathelement location="${patch.files}/rxinstall.jar"/>
        <pathelement location="${patch.files}/rxtablefactory.jar"/>
        <pathelement location="${patch.files}/rxutils.jar"/>
    	<pathelement location="${patch.files}/rxmisctools.jar"/>
    	<pathelement location="${rhythmyx.rxapp.lib}/commons-lang-2.4.jar"/>
        <pathelement location="${rhythmyx.rx.lib}/jtds.jar"/>
        <pathelement location="${rhythmyx.rx.lib}/log4j.jar"/>
        <pathelement location="${rhythmyx.rx.lib}/commons-logging-1.1.1.jar"/>
        <pathelement location="${rhythmyx.rx.lib}/derbyclient.jar"/>
        <pathelement location="${rhythmyx.rx.lib}/mysql-connector.jar"/>
    </path>

    <!-- Set the custom task defs -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="antExt.class.path"/>
    <taskdef name="PSCheckVersion" classname="com.percussion.ant.PSCheckVersion" classpathref="antExt.class.path"/>
    <taskdef name="PSLog" classname="com.percussion.ant.PSLog" classpathref="antExt.class.path"/>
    <taskdef name="PSExecSQLStmt" classname="com.percussion.ant.install.PSExecSQLStmt" classpathref="antTableAction.class.path"/>
    <taskdef name="PSTableAction" classname="com.percussion.ant.install.PSTableAction" classpathref="antTableAction.class.path"/>

    <!-- Check for empty backup files directory -->
    <if>
        <available file="${patch.backup}"/>
        <then>
            <path id="patch.backup.files">
                <fileset dir="${patch.backup}" excludes="Extensions/**"/>
            </path>
            <property name="path.backup.files" refid="patch.backup.files"/>
        </then>
    </if>

    <!-- Check for empty backup Extensions directory -->
    <if>
        <available file="${patch.Extensions}"/>
        <then>
            <path id="patch.backup.Extensions">
                <fileset dir="${patch.Extensions}"/>
            </path>
            <property name="path.backup.Extensions" refid="patch.backup.Extensions"/>
        </then>
    </if>

    <!-- Conditional properties -->
    <condition property="shouldInstallExtensions">
        <available file="${rhythmyx.Extensions}"/>
    </condition>

    <condition property="shouldUninstallExtensions">
        <and>
            <isset property="shouldInstallExtensions"/>
            <available file="${patch.Extensions}"/>
            <isset property="path.backup.Extensions"/>
            <not>
                <equals arg1="${path.backup.Extensions}" arg2="" trim="true"/>
            </not>
        </and>
    </condition>

    <condition property="shouldUninstallFiles">
        <and>
            <available file="${patch.backup}"/>
            <isset property="path.backup.files"/>
            <not>
                <equals arg1="${path.backup.files}" arg2="" trim="true"/>
            </not>
        </and>
    </condition>

    <condition property="shouldUninstall">
        <or>
            <and>
                <isset property="shouldUninstallFiles"/>
                <isset property="shouldUninstallExtensions"/>
            </and>
            <and>
                <isset property="shouldUninstallFiles"/>
                <not>
                    <isset property="shouldInstallExtensions"/>
                </not>
            </and>
        </or>
    </condition>
    
    <condition property="isDTSOnly">
        <not>
            <available file="${rhythmyx.home}/AppServer"/>
        </not>
    </condition>

    <!-- Initialization targets -->
    <target name="init">
        <property name="absolute.path" location="${rhythmyx.home}"/>
        
        <if>
             <istrue value="${SKIP_VERSION}"/>
             <then>
                 <echo>Skip version is true</echo>
             </then>
             <else>
                 <echo>Skip version is false</echo>
             </else>
         </if>
        
        <condition property="isWindows">
            <os family="windows" />
        </condition>

        <condition property="isLinux">
            <os family="unix" />
        </condition>
        
        <record name="${patch.home}/install.log" append="yes"/>
        <tstamp>
            <format property="START.TIME" pattern="MM/dd/yyyy hh:mm aa"/>
        </tstamp>
    </target>
    
    <target name="initForInstall" depends="init">
        <antcall target="detectIfDTSLocked" inheritall="true"/>
        <if>
            <not>
                <istrue value="${SKIP_VERSION}"/>
            </not>
            <then>
                <echo>Running Version Check for Install...</echo>
                <PSCheckVersion root="${rhythmyx.home}" jarFile="${patch.files}/rxserver.jar" operation="install"/>
				 <echo>If the Version Check failed and you need to force patch install, re-run the install command with the --skipVersion flag.</echo>
            </then>
        </if>
        <PSLog file="${patch.base}/history.log" message="${START.TIME} : Installing ${patchid}." append="true"/>
    </target>
    
    <target name="shouldUninstallSchema" depends="init">
        <!-- Check to see if the previous version was lower than patch with initial
             schema updates.  If it is lower, it will uninstall the schema, otherwise
             it will not. --> 
        <property name="previousVersion" value="${previousVersion.optionalId}"/>
        <propertyregex property="previousVersion"
              input="${previousVersion}"
              override="true"
              regexp="\_(.*)"
              select="\1"
              casesensitive="false" />
        <if>
            <bool>
                <islessthan arg1="${previousVersion}" arg2="20181221"/>
            </bool>
            <then>
                <echo>Detected a version lower than the schema changes.  Uninstalling schema from publishing tables.</echo>
                <property name="shouldUninstallSchema" value="true"/>
            </then>
            <else>
                <echo>Detected previous version is more recent than schema updates.  Not uninstalling publishing schema.</echo>
                <property name="shouldUninstallSchema" value="false"/>
            </else>
        </if>
    </target>

    <target name="initForUninstall" depends="shouldUninstallSchema">
        <antcall target="detectIfDTSLocked" inheritall="true"/>
        <if>
            <not>
                <istrue value="${SKIP_VERSION}"/>
            </not>
            <then>
                <echo>Running Version Check for Uninstall...</echo>
                <PSCheckVersion root="${rhythmyx.home}" jarFile="${patch.files}/rxserver.jar" operation="uninstall"/>
				<echo>If the Version Check failed and you need to force patch uninstall, re-run the uninstall command with the --skipVersion flag.</echo>
            </then>
        </if>
        <fail unless="shouldUninstall"
              message="Can not uninstall patch ${patchid}.  Patch file backup directory expected at ${patch.backup} is missing or is missing required files."/>
        <PSLog file="${patch.base}/history.log" message="${START.TIME} : Uninstalling ${patchid}." append="true"/>
    </target>

    <!-- Backup targets -->
    <target name="backupFiles">
        <!-- back up main cm1 install if it exists-->
        <if>
            <available file="${rhythmyx.home}/AppServer" type="dir"/>
            <then>
                <ant antfile="backupFiles.xml" inheritall="true"/>
                <antcall target="backupFilesMisc" inheritall="true"/>
            </then>
        </if>
    </target>

    <target name="backupExtensions">
        <mkdir dir="${patch.Extensions}"/>
        <copy todir="${patch.Extensions}" verbose="true">
            <fileset dir="${rhythmyx.Extensions}"/>
        </copy>
    </target>

    <!-- Install targets -->
    <target name="install" depends="initForInstall">
        <echo>Starting installation of Patch ${patchid}.</echo>
                
        <antcall target="cleanupPrevious" inheritall="true"/>
        <!-- Check to see if there is a CM1 install, if so, patch accordingly -->
        <if>
            <available file="${rhythmyx.home}/AppServer" type="dir"/>
            <then>
                <echo>Patching CM1, please wait...</echo>
                <antcall target="installFiles" inheritall="true"/>
                <antcall target="installFilesMisc" inheritall="true"/>
                <antcall target="installExtensions" inheritall="true"/>
                <antcall target="updateTableSchema" inheritall="true"/>
                <chmod dir="${rhythmyx.home}" perm="ug+rx" includes="**/*.sh"/>
            </then>
        </if>
        <!-- See if we have patch resources and check to see if there is a DTS install, if so, patch accordingly -->
        <if>
            <available file="${patch.files.dts}/delivery-tier-suite.zip"/>
            <then>
                <if>
                    <available file="${rhythmyx.home}/Deployment/Server" type="dir"/>
                    <then>
                        <echo>Patching DTS, please wait...</echo>
                        <antcall target="installDTSFiles" inheritall="true"/>
                        <!-- If we have a tomcat directory, proceed to update it in the production dts install -->
                        <if>
                            <available file="${patch.files.dts}/Server.zip"/>
                            <then>
                                <echo> Updating Tomcat installation for production DTS</echo>
                                <antcall target="installTomcatFiles" inheritall="true"/>
                            </then>
                        </if>
                    </then>
                </if>
                <!-- Check to see if there is a Staging install, if so, patch accordingly -->
                <if>
                    <available file="${rhythmyx.home}/Staging/Deployment/Server" type="dir"/>
                    <then>
                        <echo>Patching Staging, please wait...</echo>
                        <antcall target="installStagingFiles" inheritall="true"/>
                        <!-- If we have a tomcat directory, proceed to update it in the staging dts installs -->
                        <if>
                            <available file="${patch.files.dts}/Server.zip"/>
                            <then>
                                <echo>Updating Tomcat installation for Staging DTS</echo>
                                <antcall target="installStagingTomcatFiles" inheritall="true"/>
                            </then>
                        </if>
                    </then>
                </if>
            </then>
        </if>
        <chmod dir="${rhythmyx.home}" perm="ug+rx" 
             includes="**/*.sh"/>
        <echo>Finished installation of Patch ${patchid}.</echo>
    </target>

    <target name="installFiles" depends="backupFiles">
        <ant antfile="installFiles.xml" inheritall="true"/>
        <!-- CM1 install only.  Make sure phantomjs is executable -->
        <if>
            <equals arg1="${isLinux}" arg2="true" />
            <then>
                <echo message="Linux OS...making phantomjs executable"/>
                <chmod file="${rhythmyx.home}/bin/phantomjs" perm="754"/>
                <!-- Remove duplicate package file -->
                <delete casesensitive="true" failonerror="false" file="${rhythmyx.home}/Packages/Percussion/perc.categoryDropDownControl.ppkg"></delete>
            </then>
        </if>
    </target>

    <target name="installExtensions" if="shouldInstallExtensions">
        <antcall target="backupExtensions" inheritall="true"/>
        <updateExtensions extDir="${basedir}/Exits/Java"/>
        <updateExtensions extDir="${basedir}/Exits/JavaScript"/>
    </target>
    
    <target name="checkDerby">
        <if>
            <available file="${rhythmyx.home}/DatabaseStartup.bat"/>
            <then>
                <echo>Detected Derby startup file for Windows.</echo>
                <if>
                    <not>
                        <socket server="127.0.0.1" port="${derby.port}"/>
                    </not>
                    <then>
                        <echo>Derby is not running...starting Derby (will take 30 seconds).</echo>
                        <exec dir="${rhythmyx.home}" executable="DatabaseStartup.bat" spawn="true" resolveexecutable="true"/>
                        <sleep seconds="30"/>
                    </then>
                    <else>
                        <echo>Derby is already running.  Proceeding with patch install.</echo>
                    </else>
                </if>
            </then>
            <elseif>
                <available file="${rhythmyx.home}/DatabaseStartup.sh"/>
                <then>
                    <echo>Detected Derby startup file for Linux.</echo>
                    <if>
                        <not>
                            <socket server="127.0.0.1" port="${derby.port}"/>
                        </not>
                        <then>
                            <echo>Derby is not running...starting Derby (will take 30 seconds).</echo>
                            <exec dir="${rhythmyx.home}" executable="DatabaseStartup.sh" spawn="true" resolveexecutable="true"/>
                            <sleep seconds="30"/>
                        </then>
                        <else>
                            <echo>Derby is already running.  Proceeding with patch install.</echo>
                        </else>
                    </if>
                </then>
            </elseif>
        </if>
    </target>
    
    <target name="shutdownDerby">
        <if>
            <available file="${rhythmyx.home}/DatabaseStartup.bat"/>
            <then>
                <echo>Detected Derby startup file for Windows.</echo>
                <if>
                    <not>
                        <socket server="127.0.0.1" port="${derby.port}"/>
                    </not>
                    <then>
                        <echo>Derby is not running...resuming patch.</echo>
                    </then>
                    <else>
                        <echo>Derby is currently running; stopping Derby (will take 15 seconds).</echo>
                        <exec dir="${rhythmyx.home}" executable="DatabaseShutdown.bat" spawn="true" resolveexecutable="true">
                            <arg value="demo"/>
                        </exec>
                        <sleep seconds="15"/>
                    </else>
                </if>
            </then>
            <elseif>
                <available file="${rhythmyx.home}/DatabaseStartup.sh"/>
                <then>
                    <echo>Detected Derby startup file for Linux.</echo>
                    <if>
                        <not>
                            <socket server="127.0.0.1" port="${derby.port}"/>
                        </not>
                        <then>
                            <echo>Derby is not running...resuming patch.</echo>
                        </then>
                        <else>
                            <echo>Derby is currently running; stopping Derby (will take 15 seconds).</echo>
                            <exec dir="${rhythmyx.home}" executable="DatabaseShutdown.sh" spawn="true" resolveexecutable="true">
                                <arg value="demo"/>
                            </exec>
                            <sleep seconds="15"/>
                        </else>
                    </if>
                </then>
            </elseif>
            <else>
                <echo>Derby was not detected -- no need to shut down Derby.</echo>
            </else>
        </if>
    </target>
    
    <target name="updateTableSchema" depends="checkDerby">
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames=""
            qualifyViewNames="" sql="DROP VIEW RXSITEITEMS"/>
        
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames="PSX_PUBLICATION_SITE_ITEM"
            qualifyViewNames="" sql="RENAME TABLE PSX_PUBLICATION_SITE_ITEM TO PSX_PUBLICATION_SITE_ITEM_BAK_PATCH"
            sqlSqlServer="EXEC sp_rename 'PSX_PUBLICATION_SITE_ITEM', 'PSX_PUBLICATION_SITE_ITEM_BAK_PATCH';" />
        
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames="PSX_PUBLICATION_SITE_ITEM_BAK_PATCH"
            qualifyViewNames="" sqlDerby="ALTER TABLE PSX_PUBLICATION_SITE_ITEM_BAK_PATCH DROP CONSTRAINT PK_PSX_PUBLICATION_SITE_ITEM" />
        
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames="PSX_PUBLICATION_SITE_ITEM_BAK_PATCH"
            qualifyViewNames="" sqlDerby="ALTER TABLE PSX_PUBLICATION_SITE_ITEM_BAK_PATCH DROP CONSTRAINT FK_SITE_ITEMS_REF_1" />
        
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames=""
            qualifyViewNames="" sqlDerby="DROP INDEX IX_SITE_ITEMS"/>
        
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames=""
            qualifyViewNames="" sqlDerby="DROP INDEX IX_REF_SERV_CONTXT"/>

        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames=""
            qualifyViewNames="" sqlDerby="DROP INDEX IX_WORKING_CONTXT"/>
        
        <PSTableAction rootDir="${rhythmyx.home}" repositoryLocation="${rhythmyx.home}/rxconfig/Installer/rxrepository.properties"
            tableFactoryLogFile="${rhythmyx.home}/logs/tableFactory.log" tableData="${rhythmyx.home}/rxconfig/Installer/cmstableData.xml"
            tableDef="${rhythmyx.home}/rxconfig/Installer/cmstableDef.xml" />
        
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames="PSX_PUBLICATION_SITE_ITEM,
            PSX_PUBLICATION_SITE_ITEM_BAK_PATCH, PSX_PUBLICATION_DOC"
            qualifyViewNames="RXSITEITEMS, RXPUBDOCS" sql="INSERT INTO PSX_PUBLICATION_SITE_ITEM (
                      REFERENCE_ID, VERSION, SITE_ID, CONTEXT_ID, 
                      UNPUBLISH_INFO, SERVER_ID, STATUS_ID, CONTENT_ID, 
                      REVISION_ID, FOLDER_ID, TEMPLATE_ID, LOCATION, 
                      PUBLISHING_DATE, OPERATION, ASSEMBLY_URL, ELAPSED, 
                      STATUS, PAGE, PAGE_REFERENCE_ID, DELIVERY_TYPE, UNPUBLISH_REF_ID
                  )
                  SELECT
                      i.REFERENCE_ID, i.VERSION, i.SITE_ID, i.CONTEXT_ID,
                      i.UNPUBLISH_INFO, i.SERVER_ID, d.STATUS_ID, d.CONTENT_ID,
                      d.REVISION_ID, d.FOLDER_ID, d.TEMPLATE_ID, d.LOCATION,
                      d.PUBLISHING_DATE, d.OPERATION, d.ASSEMBLY_URL, d.ELAPSED,
                      d.STATUS, d.PAGE, d.PAGE_REFERENCE_ID, d.DELIVERY_TYPE, d.UNPUBLISH_REF_ID
                  FROM PSX_PUBLICATION_SITE_ITEM_BAK_PATCH i
                  INNER JOIN PSX_PUBLICATION_DOC d
                  ON i.REFERENCE_ID = d.REFERENCE_ID" />
        
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames="PSX_PUBLICATION_SITE_ITEM"
            qualifyViewNames="RXPUBDOCS" sql="CREATE VIEW RXSITEITEMS AS SELECT PD.PUBSTATUSID, PD.CONTENTID, PD.VARIANTID, PD.LOCATIONHASH, 
            PD.PUBSTATUS, PD.PUBDATE, PD.PUBOP AS PUBOPERATION, PD.PUBLOCATION AS LOCATION, PD.CONTENTURL, PD.VERSIONID, PD.REVISIONID, PD.ELAPSETIME,
            PD.REFERENCE_ID, PSI.SITE_ID AS SITEID, PSI.CONTEXT_ID AS CONTEXT FROM PSX_PUBLICATION_SITE_ITEM AS PSI INNER JOIN RXPUBDOCS AS
            PD ON PSI.REFERENCE_ID = PD.REFERENCE_ID" />
        
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames="PSX_PUBLICATION_SITE_ITEM_BAK_PATCH"
            qualifyViewNames="RXSITEITEMS" sql="DROP TABLE PSX_PUBLICATION_SITE_ITEM_BAK_PATCH" />
        <antcall target="shutdownDerby"/>
    </target>

    <!-- Uninstall targets -->
    <target name="uninstall" depends="initForUninstall">
        <echo>Started to uninstall Patch ${patchid}.</echo>
        <!-- Check to see if there is a CM1 install, if so, uninstall the patch accordingly -->
        <if>
            <available file="${rhythmyx.home}/AppServer" type="dir"/>
            <then>
                <echo>Uninstalling the patch for CM1.</echo>
                <antcall target="uninstallExtensions" inheritall="true"/>
                <ant antfile="uninstallFiles.xml" inheritall="true"/>
                <antcall target="uninstallFilesMisc" inheritall="true"/>
                <if>
                    <equals arg1="${shouldUninstallSchema}" arg2="true"/>
                    <then>
                        <antcall target="downgradeTableSchema" inheritall="true"/>
                    </then>
                </if>
                
                <!-- CM1 uninstall only.  Makes phantomjs executable -->
                <if>
                    <equals arg1="${isLinux}" arg2="true" />
                    <then>
                        <echo message="Linux OS...making phantomjs executable after patch uninstall"/>
                        <chmod file="${rhythmyx.home}/bin/phantomjs" perm="754"/>
                    </then>
                </if>
            </then>
        </if>
        <!-- Check to see if we have a backup directory and check to see if there is a DTS install, if so, uninstall the patch from DTS -->

        <if>
            <and>
                <available file="${rhythmyx.home}/Deployment/Server" type="dir"/>
                <available file="${patch.backup}/Deployment/Server" type="dir"/>
            </and>
            <then>
                <echo>Uninstalling the patch for DTS, please wait...</echo>
                <antcall target="uninstallDTSFiles" inheritall="true"/>
                <if>
                    <available file="${patch.backup}/Deployment/Server/conf/catalina.properties"/>
                    <then>
                        <echo> Downgrading Deployment Tomcat </echo>
                        <antcall target="uninstallTomcatFiles" inheritall="true"/>
                    </then>
                </if>
            </then>
        </if>


        <!-- Check to see if we have a backup directory and check to see if there is a Staging install, if so, uninstall the patch from the staging directory -->
        <if>
            <and>
                <available file="${rhythmyx.home}/Staging/Deployment/Server" type="dir"/>
                <available file="${patch.backup}/Staging/Deployment/Server" type="dir"/>
            </and>
            <then>
                <echo>Uninstalling the patch for Staging DTS, please wait...</echo>
                <antcall target="uninstallStagingFiles"
                         inheritall="true"/>
                <if>
                    <available file="${patch.backup}/Staging/Deployment/Server/conf/catalina.properties"/>
                    <then>
                        <echo> Downgrading Deployment Tomcat </echo>
                        <antcall target="uninstallStagingTomcatFiles" inheritall="true"/>
                    </then>
                </if>
            </then>
        </if>

        <echo>Finished the uninstall of Patch ${patchid}.</echo>
    </target>

    <target name="uninstallExtensions" if="shouldUninstallExtensions">
        <copy todir="${rhythmyx.Extensions}" verbose="true" overwrite="true">
            <fileset dir="${patch.Extensions}"/>
        </copy>
    </target>

    <target name="downgradeTableSchema" depends="checkDerby">
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames=""
            qualifyViewNames="" sql="DROP VIEW RXSITEITEMS"/>
        
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames="PSX_PUBLICATION_SITE_ITEM"
            qualifyViewNames="" sql="RENAME TABLE PSX_PUBLICATION_SITE_ITEM TO PSX_PUBLICATION_SITE_ITEM_BAK_PATCH"
            sqlSqlServer="EXEC sp_rename 'PSX_PUBLICATION_SITE_ITEM', 'PSX_PUBLICATION_SITE_ITEM_BAK_PATCH';" />
        
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames="PSX_PUBLICATION_SITE_ITEM_BAK_PATCH"
            qualifyViewNames="" sqlDerby="ALTER TABLE PSX_PUBLICATION_SITE_ITEM_BAK_PATCH DROP CONSTRAINT PK_PSX_PUBLICATION_SITE_ITEM" />
       
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames="PSX_PUBLICATION_SITE_ITEM_BAK_PATCH"
            qualifyViewNames="" sqlDerby="ALTER TABLE PSX_PUBLICATION_SITE_ITEM_BAK_PATCH DROP CONSTRAINT FK_SITE_ITEMS_REF_1" />
        
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames=""
            qualifyViewNames="" sqlDerby="DROP INDEX IX_SITE_ITEMS"/>
        
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames=""
            qualifyViewNames="" sqlDerby="DROP INDEX IX_REF_SERV_CONTXT"/>
        
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames=""
            qualifyViewNames="" sqlDerby="DROP INDEX IX_WORKING_CONTXT"/>
        
        <PSTableAction rootDir="${rhythmyx.home}" repositoryLocation="${rhythmyx.home}/rxconfig/Installer/rxrepository.properties"
            tableFactoryLogFile="${rhythmyx.home}/logs/tableFactory.log" tableData="${rhythmyx.home}/rxconfig/Installer/cmstableData.xml"
            tableDef="${rhythmyx.home}/rxconfig/Installer/cmstableDef.xml" />
        
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames="PSX_PUBLICATION_SITE_ITEM, PSX_PUBLICATION_SITE_ITEM_BAK_PATCH, PSX_PUBLICATION_DOC"
            qualifyViewNames="RXSITEITEMS, RXPUBDOCS" sql="INSERT INTO PSX_PUBLICATION_SITE_ITEM (
                      REFERENCE_ID, VERSION, SITE_ID, CONTEXT_ID, 
                      UNPUBLISH_INFO, SERVER_ID
                  )
                  SELECT
                      i.REFERENCE_ID, i.VERSION, i.SITE_ID, i.CONTEXT_ID,
                      i.UNPUBLISH_INFO, i.SERVER_ID
                  FROM PSX_PUBLICATION_SITE_ITEM_BAK_PATCH i
                  INNER JOIN PSX_PUBLICATION_DOC d
                  ON i.REFERENCE_ID = d.REFERENCE_ID" />
        
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames="PSX_PUBLICATION_SITE_ITEM"
            qualifyViewNames="RXPUBDOCS" sql="CREATE VIEW RXSITEITEMS AS SELECT PD.PUBSTATUSID, PD.CONTENTID, PD.VARIANTID, PD.LOCATIONHASH, 
            PD.PUBSTATUS, PD.PUBDATE, PD.PUBOP AS PUBOPERATION, PD.PUBLOCATION AS LOCATION, PD.CONTENTURL, PD.VERSIONID, PD.REVISIONID, PD.ELAPSETIME,
            PD.REFERENCE_ID, PSI.SITE_ID AS SITEID, PSI.CONTEXT_ID AS CONTEXT FROM PSX_PUBLICATION_SITE_ITEM AS PSI INNER JOIN RXPUBDOCS AS
            PD ON PSI.REFERENCE_ID = PD.REFERENCE_ID" />
        
        <PSExecSQLStmt rootDir="${rhythmyx.home}" printExceptionStackTrace="true" qualifyTableNames="PSX_PUBLICATION_SITE_ITEM_BAK_PATCH"
            qualifyViewNames="" sql="DROP TABLE PSX_PUBLICATION_SITE_ITEM_BAK_PATCH" />
        <antcall target="shutdownDerby"/>
    </target>

    <!-- Cleanup of previous patch -->
    <target name="cleanupPrevious">
        <delete includeemptydirs="true">
            <fileset dir="${patch.base}">
                <include name="RX-*/backup/**"/>
                <include name="RX-*/files/*"/>
                <exclude name="${patchid}/**"/>
            </fileset>
        </delete>
    </target>

    <!-- Detect if we have a lock file in our derbydata that would tell us if DTS is running or is locked -->
    <target name="detectIfDTSLocked">
        <!-- Detect if DTS is locked-->
        <echo> Detecting if there are any DTS database lock files</echo>

        <if>
            <or>
                <available file="${rhythmyx.home}/Deployment/Server/derbydata/percakamaiqueuedata/dbex.lck"/>
                <available file="${rhythmyx.home}/Deployment/Server/derbydata/perccomments/dbex.lck"/>
                <available file="${rhythmyx.home}/Deployment/Server/derbydata/percfeeds/dbex.lck"/>
                <available file="${rhythmyx.home}/Deployment/Server/derbydata/percforms/dbex.lck"/>
                <available file="${rhythmyx.home}/Deployment/Server/derbydata/percmembership/dbex.lck"/>
                <available file="${rhythmyx.home}/Deployment/Server/derbydata/percmetadata/dbex.lck"/>
                <available file="${rhythmyx.home}/Deployment/Server/derbydata/percpolls/dbex.lck"/>
            </or>
            <then>
                <echo>Detected database lock files, please ensure that the DTS is down and then use the following command to remove the locks:</echo>
                <echo message="find ${absolute.path}/Deployment/Server/derbydata/ -type f -name '*dbex.lck' -delete"/>
                <fail>
                    Use the above commands to remove the dbex.lck files.
                </fail>
            </then>
        </if>
        
        
        <!-- Detect if Staging is locked-->
        <echo> Detecting if there are any Staging database lock files</echo>
        <if>
            <or>
                <available file="${rhythmyx.home}/Staging/Deployment/Server/derbydata/percakamaiqueuedata/dbex.lck"/>
                <available file="${rhythmyx.home}/Staging/Deployment/Server/derbydata/perccomments/dbex.lck"/>
                <available file="${rhythmyx.home}/Staging/Deployment/Server/derbydata/percfeeds/dbex.lck"/>
                <available file="${rhythmyx.home}/Staging/Deployment/Server/derbydata/percforms/dbex.lck"/>
                <available file="${rhythmyx.home}/Staging/Deployment/Server/derbydata/percmembership/dbex.lck"/>
                <available file="${rhythmyx.home}/Staging/Deployment/Server/derbydata/percmetadata/dbex.lck"/>
                <available file="${rhythmyx.home}/Staging/Deployment/Server/derbydata/percpolls/dbex.lck"/>
            </or>
            <then>
                <echo>Detected database lock files in Staging, please ensure that the Staging DTS is down and then use the following command to remove the locks:</echo>
                <echo message="find ${absolute.path}/Staging/Deployment/Server/derbydata/ -type f -name '*dbex.lck' -delete"/>
                <fail>
                    Use the above command to remove the staging dbex.lck files.
                </fail>
            </then>
        </if>
        
        <echo>No database lock files in the DTS, continuing...</echo>
        
    </target>
    
    <!-- Takes a file set indicated by dbLockFile and displays the deletion command-->
    <target name="listDBLockFiles">
        <if>
            <equals arg1="${isWindows}" arg2="true" />
            <then>
                <echo message="del ${dbLockFile}"/>
            </then>
            <else>
                <echo message="rm ${dbLockFile}"/>
            </else>
        </if>
    </target>
                
    
    <!--===================================-->
    <!-- updateExtensions                  -->
    <!--                                   -->
    <!-- This macrodef runs the extensions -->
    <!-- install tool on the Rhythmyx root -->
    <!-- using the Extensions.xml found in -->
    <!-- extDir.                           -->
    <macrodef name="updateExtensions">
        <attribute name="extDir"/>
        <sequential>
            <java classname="com.percussion.util.PSExtensionInstallTool" fork="true">
                <arg value="${rhythmyx.home}"/>
                <arg value="@{extDir}"/>
                <classpath>
                    <fileset dir="${rhythmyx.rx.lib}"/>
                    <fileset dir="${rhythmyx.deploy}/rxapp.ear/rxapp.war/WEB-INF/lib">
                        <include name="rxclient.jar"/>
                    	<include name="rxmisctools.jar"/>
                        <include name="rxserver.jar"/>
                        <include name="rxservices.jar"/>
                        <include name="jcr-1.0.jar"/>
                        <include name="json-20070829.jar"/>
                        <include name="rxbusiness.jar"/>
                        <include name="commons-lang-2.4.jar"/>
                        <include name="commons-jexl-1.1.1-patched.jar"/>
                    </fileset>
                </classpath>
            </java>
        </sequential>
    </macrodef>


    <!--===================================-->
    <!-- backupFilesMisc                   -->
    <!--                                   -->
    <!-- Backup files that will be edited  -->
    <!-- outside the patch.config process. -->
    <target name="backupFilesMisc">
        <!-- delivery servers.xml -->
          <if>
            <available file="${rhythmyx.home}/rxconfig/DeliveryServer/delivery-servers.xml"/>
            <then>
                <copy file="${rhythmyx.home}/rxconfig/DeliveryServer/delivery-servers.xml"
                      todir="${patch.backup}/rxconfig/DeliveryServer/"
                      verbose="true" failonerror="true" overwrite="true"/>
            </then>
        </if>
        <!-- ehcache.xml -->
          <if>
            <available file="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/classes/ehcache.xml"/>
            <then>
                <copy file="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/classes/ehcache.xml"
                      todir="${patch.backup}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/classes/"
                      verbose="true" failonerror="true" overwrite="true"/>
            </then>
        </if>
        <!-- package manifest -->
        <if>
            <available file="${rhythmyx.home}/rxconfig/Installer/InstallPackages.xml"/>
            <then>
                <copy file="${rhythmyx.home}/rxconfig/Installer/InstallPackages.xml"
                      todir="${patch.backup}/rxconfig/Installer/"
                      verbose="true" failonerror="true" overwrite="true"/>
            </then>
        </if>
        
        <if>
           <available file="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/config/spring/beans.xml"/>
           <then>
              <copy file="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/config/spring/beans.xml" todir="${patch.backup}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/config/spring" verbose="true" failonerror="true" overwrite="true"/>
           </then>
        </if>
        
        <!-- backup packages -->
        <if>
            <available file="${rhythmyx.home}/Packages" type="dir"/>
            <then>
                <copy todir="${patch.backup}/Packages">
                    <fileset dir="${rhythmyx.home}/Packages"/>
                </copy>
            </then>
        </if>
        <if>
       <available file="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/web.xml"/>
            <then>
                <copy file="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/web.xml" todir="${patch.backup}" verbose="true" failonerror="true" overwrite="true"/>
            </then>
        </if>
        <if>
        <available file="${rhythmyx.home}/AppServer/server/rx/conf/jboss-service.xml"/>
            <then>
                <copy file="${rhythmyx.home}/AppServer/server/rx/conf/jboss-service.xml" todir="${patch.backup}/AppServer/server/rx/conf" verbose="true" failonerror="true" overwrite="true"/>
            </then>
        </if>
        <if>
        <available file="${rhythmyx.home}/AppServer/server/rx/deploy/jms/uil2-service.xml"/>
            <then>
                <copy file="${rhythmyx.home}/AppServer/server/rx/deploy/jms/uil2-service.xml" todir="${patch.backup}/AppServer/server/rx/deploy/jms" verbose="true" failonerror="true" overwrite="true"/>
            </then>
        </if>
        
        <copy todir="${patch.backup}" verbose="true" overwrite="true">
              <fileset dir="${rhythmyx.home}">
                <include name="*.lax"/>
              </fileset>
        </copy>

        <if>
        <available file="${rhythmyx.home}/AppServer/server/rx/deploy/jms/jbossmq-httpil.sar" type="dir"/>
            <then>
                <copy todir="${patch.backup}/AppServer/server/rx/deploy/jms" verbose="true" failonerror="true" overwrite="true">  
                  <fileset dir="${rhythmyx.home}/AppServer/server/rx/deploy/jms" includes="jbossmq-httpil.sar/**"/>
                </copy>
            </then>
        </if>
       <if>
        <available file="${rhythmyx.home}/sys_resources/tinymce" type="dir"/>
            <then>
                <copy todir="${patch.backup}/sys_resources" verbose="true" failonerror="true" overwrite="true">  
                  <fileset dir="${rhythmyx.home}/sys_resources" includes="tinymce/**"/>
                </copy>
                <if>
                    <available file="${rhythmyx.home}/sys_resources/tinymce/adv_config.js" type="file"/>
                    <then>
                        <delete dir="${rhythmyx.home}/sys_resources/tinymce" verbose="true" failonerror="false" />
                    </then>
                </if>
            </then>
        </if>
        <if>
        <available file="${rhythmyx.home}/sys_resources/tinymce-4.0b3" type="dir"/>
            <then>
                <copy todir="${patch.backup}/sys_resources" verbose="true" failonerror="false" overwrite="true">  
                  <fileset dir="${rhythmyx.home}/sys_resources" includes="tinymce-4.0b3/**"/>
                </copy>
            </then>
        </if>
         <if>
          <available file="${rhythmyx.home}/sys_resources/tinymce-4.3.3" type="dir"/>
            <then>
                <copy todir="${patch.backup}/sys_resources" verbose="true" failonerror="false" overwrite="true">  
                  <fileset dir="${rhythmyx.home}/sys_resources" includes="tinymce-4.3.3/**"/>
                </copy>
            </then>
        </if>
         <if>
          <available file="${rhythmyx.home}/sys_resources/tinymce-4.3.8" type="dir"/>
            <then>
                <copy todir="${patch.backup}/sys_resources" verbose="true" failonerror="false" overwrite="true">  
                  <fileset dir="${rhythmyx.home}/sys_resources" includes="tinymce-4.3.8/**"/>
                </copy>
            </then>
        </if>
        
        <!-- This should only be done the first time the schema is upgraded on patch install.
             Otherwise, the file should be backed up as it was previously there and not get 
             picked up by the following code. -->
        <if>
            <not>
                <available file="${patch.backup}/rxconfig/Installer/cmstableDef.xml"/>
            </not>
            <then>
                <if>
                    <available file="${patch.files}/rxconfig/Installer/cmstableDef-prev.xml"/>
                    <then>
                        <copy file="${patch.files}/rxconfig/Installer/cmstableDef-prev.xml" todir="${patch.backup}/rxconfig/Installer/" verbose="true" failonerror="true" overwrite="true"/>
                    </then>
                </if>
            </then>
        </if>
        <if>
            <not>
                <available file="${patch.backup}/rxconfig/Installer/cmstableData.xml"/>
            </not>
            <then>
                <if>
                    <available file="${patch.files}/rxconfig/Installer/cmstableData-prev.xml"/>
                    <then>
                        <copy file="${patch.files}/rxconfig/Installer/cmstableData-prev.xml" todir="${patch.backup}/rxconfig/Installer/" verbose="true" failonerror="true" overwrite="true"/>
                    </then>
                </if>
            </then>
        </if>
    	
    	<!-- Secure Membership Jars (get published from CM1 side) -->
    	<if>
    	<available file="${rhythmyx.home}/sys_resources/webapps" type="dir"/>
    	<then>
    		<echo>Backing up Secure Membership Site Template...</echo>
    		 <copy todir="${patch.backup}/sys_resources" verbose="true" failonerror="false" overwrite="true">  
    		      <fileset dir="${rhythmyx.home}/sys_resources" includes="webapps/**"/>
    		 </copy>
    	</then>
    	</if>
		
    </target>

    <!--===================================-->
    <!-- installFilesMisc                  -->
    <!--                                   -->
    <!-- modify misc files that are        -->
    <!-- outside the patch.config process. -->
    <target name="installFilesMisc">
         <xslt force="true" style="patchDeliveryServers.xsl" in="${patch.backup}/rxconfig/DeliveryServer/delivery-servers.xml"
                    out="${rhythmyx.home}/rxconfig/DeliveryServer/delivery-servers.xml"/>
                    
         <xslt force="true" style="patchehcache.xsl" in="${patch.backup}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/classes/ehcache.xml"
                        out="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/classes/ehcache.xml"/>
               
        <xslt force="true" style="patchInstallPackages.xsl" in="${patch.backup}/rxconfig/Installer/InstallPackages.xml"
              out="${rhythmyx.home}/rxconfig/Installer/InstallPackages.xml"/>
        
        <!-- create temp file to process uninstall of social promotion -->
        <tempfile property="tempPackagesFile" suffix=".xml"/>
        <copy file="${rhythmyx.home}/rxconfig/Installer/InstallPackages.xml" tofile="${tempPackagesFile}"/>
        <xslt force="true" style="patchUninstallSocialPromotion.xsl" in="${tempPackagesFile}"
              out="${rhythmyx.home}/rxconfig/Installer/InstallPackages.xml"/>
        <delete file="${tempPackagesFile}"/>
        
        <replace file="${rhythmyx.home}/AppServer/server/rx/conf/jboss-service.xml" token="${jboss.bind.address}" value="127.0.0.1"/> 
        <replace file="${rhythmyx.home}/AppServer/server/rx/deploy/jms/uil2-service.xml" token="${jboss.bind.address}" value="127.0.0.1"/>
        <if>
            <available file="${rhythmyx.home}/AppServer" type="dir"/>
            <then>
                <xslt force="true" style="patchwebxml.xsl" in="${patch.backup}/web.xml" out="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/web.xml" />
            </then>
        </if>
        <!-- Enable TLSv1.2 required for Java 7 default on Java 7 -->
        <if>
            <available file="${rhythmyx.home}/PercussionServer.lax"/>
            <then>
                <echo>Replacing HTTPS Protocols</echo>
                <replaceregexp file="${rhythmyx.home}/PercussionServer.lax"
                        match="^lax\.nl\.java\.option\.additional=((?!-Dhttps\.protocols=).)*$"
                        replace="\0 -Dhttps\.protocols=TLSv1\.1,TLSv1\.2"
                        byline="true" />
                <replaceregexp file="${rhythmyx.home}/PercussionServer.lax" 
                        match="((TLSv1,?(?!\.))|(,?TLSv1(?!\.)))"
                        replace=""
                        flags="g" />
             </then>
        </if>
        
        <!-- Add IP4 for DTS -->
        <if>
            <available file="${rhythmyx.home}/PercussionServer.lax"/>
            <then>
                <echo>Updating IPv4 Protocols</echo>
                <replaceregexp file="${rhythmyx.home}/PercussionServer.lax"
                        match="^lax\.nl\.java\.option\.additional=((?!-Djava\.net\.preferIPv4Stack=).)*$"
                        replace="\0 -Djava\.net\.preferIPv4Stack=true"
                        byline="true" />
             </then>
        </if>
        
        <if>
           <available file="${rhythmyx.home}/AppServer" type="dir"/>
           <then>
             <xslt force="true" style="patchspringserverbeans.xsl" in="${patch.backup}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/config/spring/beans.xml" out="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/config/spring/beans.xml" />
           </then>
        </if>
        
        <if>
            <available file="${rhythmyx.home}/PercussionServer.bin.lax"/>
            <then>
                <echo>Replacing HTTPS protocols</echo>
                <replaceregexp file="${rhythmyx.home}/PercussionServer.bin.lax"
                       match="^lax\.nl\.java\.option\.additional=((?!-Dhttps\.protocols=).)*$"
                       replace="\0 -Dhttps\.protocols=TLSv1\.1,TLSv1\.2"
                       byline="true" />
                <replaceregexp file="${rhythmyx.home}/PercussionServer.bin.lax"
                        match="((TLSv1,?(?!\.))|(,?TLSv1(?!\.)))"
                        replace=""
                        flags="g" />
             </then>
        </if>
        
        <if>
            <available file="${rhythmyx.home}/PercussionServer.bin.lax"/>
            <then>
                <echo>Updating IPv4 Protocols</echo>
                <replaceregexp file="${rhythmyx.home}/PercussionServer.bin.lax"
                        match="^lax\.nl\.java\.option\.additional=((?!-Djava\.net\.preferIPv4Stack=).)*$"
                        replace="\0 -Djava\.net\.preferIPv4Stack=true"
                        byline="true" />
             </then>
        </if>
        
        <if>
        <available file="${rhythmyx.home}/AppServer/server/rx/deploy/jms/jbossmq-httpil.sar" type="dir"/>
        <then>
            <delete dir="${rhythmyx.home}/AppServer/server/rx/deploy/jms/jbossmq-httpil.sar" verbose="true" quiet="true" />
        </then>
        </if>

        <if>
        <available file="${rhythmyx.home}/web_resoureces" type="dir"/>
        <then>
            <delete dir="${rhythmyx.home}/web_resoureces" verbose="true" quiet="false" />
        </then>
        </if>

        <if>
        <available file="${rhythmyx.home}/sys_resources/tinymce-4.3.8" type="dir"/>
         <then>
            <delete dir="${rhythmyx.home}/sys_resources/tinymce-4.3.8" verbose="true" quiet="false" />
        </then>
        </if>
        <if>
        <available file="${rhythmyx.home}/sys_resources/tinymce-4.3.3" type="dir"/>
         <then>
            <delete dir="${rhythmyx.home}/sys_resources/tinymce-4.3.3" verbose="true" quiet="false" />
        </then>
        </if>
        <if>
        <available file="${rhythmyx.home}/sys_resources/tinymce-4.0b3" type="dir"/>
         <then>
            <delete dir="${rhythmyx.home}/sys_resources/tinymce-4.0b3" verbose="true" quiet="false" />
        </then>
        </if>
        <if>
            <not>
               <available file="${rhythmyx.home}/rx_resources/tinymce/config/customer_config_override.json" type="file"/>
            </not>
            <then>
               <copy file="${rhythmyx.home}/sys_resources/tinymce/config/customer_config_override.json" todir="${rhythmyx.home}/rx_resources/tinymce/config" verbose="true" failonerror="false" overwrite="false"/>
            </then>
        </if>
        
        <!-- Modify the server.properties file -->
         <propertyfile file="${rhythmyx.home}/rxconfig/Server/server.properties">
             <entry key="requireContentSecurityPolicy" default="false"/>
             <entry key="contentSecurityPolicy" default="default-src 'self' *.percussion.com *.percussion.marketing *.percussion.services 'unsafe-inline' 'unsafe-eval'; script-src 'self' *.siteimprove.net  'unsafe-inline' 'unsafe-eval'"/>
             <entry key="requireStrictTransportSecurity" default="false"/>
             <entry key="stricttransportsecuritymaxage" default="300"/>
             <entry key="requireXFrameOptions" default="true"/>
             <entry key="xFrameOptions" default="SAMEORIGIN"/>
             <entry key="requireXXSSProtection" default="true"/>
             <entry key="xXSSProtection" default="1; mode=block"/>
             <entry key="requireXContentTypeOptions" default="true"/>
             <entry key="xContentTypeOptions" default="nosniff"/>
             <entry key="requireCacheControl" default="true"/>
             <entry key="cacheControl" default="no-cache='Set-Cookie, Set-Cookie2',must-revalidate"/>
             <entry key="autotuneCachePercentage" default="40"/>
         	 <entry key="enabledCiphers" default="TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_DH_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDH_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,SSL_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,TLS_ECDHE_RSA_WITH_RC4_128_SHA,SSL_RSA_WITH_RC4_128_SHA,TLS_ECDH_ECDSA_WITH_RC4_128_SHA,TLS_ECDH_RSA_WITH_RC4_128_SHA,SSL_RSA_WITH_RC4_128_MD5,TLS_EMPTY_RENEGOTIATION_INFO_SCSV"/>
         </propertyfile>
    	
    	<!-- Secure Membership Jars (get published from CM1 side) -->
    	<if>
    	<available file="${patch.files.dts}/delivery-tier-app-lib.zip" type="file"/>
    	<then>
    		<echo>Updating Secure Membership Library Template...</echo>
    		<delete dir="${rhythmyx.home}/sys_resources/webapps/secure/WEB-INF/lib" failonerror="false" />
    		<unzip dest="${rhythmyx.home}/sys_resources/webapps/secure/WEB-INF/lib" overwrite="true" src="${patch.files.dts}/delivery-tier-app-lib.zip"></unzip>
    	</then>
    	</if>
    		

    </target>

    <!--===================================-->
    <!-- uninstallFilesMisc                -->
    <!--                                   -->
    <!-- Restore files back to original.   -->
    <target name="uninstallFilesMisc">
        
        <!-- Copy over the installPackages to our patch directory so that we may transform it -->
        <copy file="${rhythmyx.home}/rxconfig/Installer/InstallPackages.xml" tofile="${patch.home}/files/UninstallPackages.xml"/>

        <!-- method to compare patch backup/packages and patch/files/packages directory
             to see how they compare.  newly installed packages should be processed as UNINSTALL -->
        <fileset dir="${patch.home}/files/Packages/Percussion" id="onlyInPatch">
        <not>
            <present targetdir="${patch.backup}/Packages/Percussion"></present>
        </not>
        </fileset>

        <!-- process InstallPackages.xml first with all REVERT as most packages are not new -->
        <xslt force="true" style="patchUninstallPackages.xsl" in="${patch.home}/files/UninstallPackages.xml"
                      out="${rhythmyx.home}/rxconfig/Installer/InstallPackages.xml"/>
        
        <!-- iterate through all new packages (to uninstall them) in patch to process InstallPackages.xml once more -->
        <for list="${toString:onlyInPatch}" delimiter=";" param="package">
            <sequential>
                <tempfile property="tempPackagesFile" suffix=".xml"/>
                <var name="packageName" value="@{package}" />
                <echo>Marking package @{package} for uninstall</echo>
                <copy file="${rhythmyx.home}/rxconfig/Installer/InstallPackages.xml" tofile="${tempPackagesFile}"/>
                <xslt force="true" style="patchUninstallNewPackages.xsl" in="${tempPackagesFile}"
                      out="${rhythmyx.home}/rxconfig/Installer/InstallPackages.xml">
                      <param name="Parameter2" expression="${packageName}"/>
                </xslt>
                <delete file="${tempPackagesFile}"/>
            </sequential>
        </for>
                      
        <!-- backup packages -->
        <if>
            <available file="${patch.backup}/Packages" type="dir"/>
            <then>
                <copy todir="${rhythmyx.home}/Packages">
                    <fileset dir="${patch.backup}/Packages"/>
                </copy>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/web.xml"/>
            <then>
                <if>
                    <available file="${patch.backup}/web.xml"/>
                    <then>
                        <copy file="${patch.backup}/web.xml" todir="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF" verbose="true" failonerror="true" overwrite="true"/>
                    </then>
                <elseif>
                <available file="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/web.xml"/>
                    <then>
                        <delete file="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/web.xml" verbose="true" quiet="true"/>
                    </then>
                </elseif>
                </if>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/rxconfig/DeliveryServer/delivery-servers.xml"/>
            <then>
                <if>
                    <available file="${patch.backup}/rxconfig/DeliveryServer/delivery-servers.xml"/>
                    <then>
                        <copy file="${patch.backup}/rxconfig/DeliveryServer/delivery-servers.xml" todir="${rhythmyx.home}/rxconfig/DeliveryServer/" verbose="true" failonerror="true" overwrite="true"/>
                    </then>
                <elseif>
                <available file="${rhythmyx.home}/rxconfig/DeliveryServer/delivery-servers.xml"/>
                    <then>
                        <delete file="${rhythmyx.home}/rxconfig/DeliveryServer/delivery-servers.xml" verbose="true" quiet="true"/>
                    </then>
                </elseif>
                </if>
            </then>
        </if>
        <if>
          <available file="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/config/spring/beans.xml"/>
          <then>
            <if>
              <available file="${patch.backup}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/config/spring/beans.xml"/>
              <then>
                <copy file="${patch.backup}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/config/spring/beans.xml" todir="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/config/spring" verbose="true" failonerror="true" overwrite="true"/>
              </then>
              <elseif>
                <available file="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/config/spring/beans.xml"/>
                <then>
                  <delete file="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/config/spring/beans.xml" verbose="true" quiet="true"/>
                </then>
              </elseif>
            </if>
          </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/classes/ehcache.xml"/>
            <then>
                <if>
                    <available file="${patch.backup}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/classes/ehcache.xml"/>
                    <then>
                        <copy file="${patch.backup}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/classes/ehcache.xml" todir="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/classes/" verbose="true" failonerror="true" overwrite="true"/>
                    </then>
                <elseif>
                <available file="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/classes/ehcache.xml"/>
                    <then>
                        <delete file="${rhythmyx.home}/AppServer/server/rx/deploy/rxapp.ear/rxapp.war/WEB-INF/classes/ehcache.xml" verbose="true" quiet="true"/>
                    </then>
                </elseif>
                </if>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/AppServer/server/rx/conf/jboss-service.xml"/>
                <then>
                    <if>
                        <available file="${patch.backup}/AppServer/server/rx/conf/jboss-service.xml"/>
                            <then>
                                <copy file="${patch.backup}/AppServer/server/rx/conf/jboss-service.xml" todir="${rhythmyx.home}/AppServer/server/rx/conf" verbose="true" failonerror="true" overwrite="true"/>
                            </then>
                    <elseif>
                    <available file="${patch.files}/AppServer/server/rx/conf/jboss-service.xml"/>
                        <then>
                            <delete file="${rhythmyx.home}/AppServer/server/rx/conf/jboss-service.xml" verbose="true" quiet="true"/>
                        </then>
                    </elseif>
                </if>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/AppServer/server/rx/deploy/jms/uil2-service.xml"/>
                <then>
                    <if>
                        <available file="${patch.backup}/AppServer/server/rx/deploy/jms/uil2-service.xml"/>
                            <then>
                            <copy file="${patch.backup}/AppServer/server/rx/deploy/jms/uil2-service.xml" todir="${rhythmyx.home}/AppServer/server/rx/deploy/jms" verbose="true" failonerror="true" overwrite="true"/>
                            </then>
                    <elseif>
                    <available file="${patch.files}/AppServer/server/rx/deploy/jms/uil2-service.xml"/>
                        <then>
                            <delete file="${rhythmyx.home}/AppServer/server/rx/deploy/jms/uil2-service.xml" verbose="true" quiet="true"/>
                        </then>
                    </elseif>
                </if>
            </then>
        </if>
        
        <copy todir="${rhythmyx.home}" verbose="true" overwrite="true">
              <fileset dir="${patch.backup}">
                <include name="*.lax"/>
              </fileset>
        </copy>

        <if>
        <available file="${patch.backup}/AppServer/server/rx/deploy/jms/jbossmq-httpil.sar" type="dir"/>
            <then>
                <copy todir="${rhythmyx.home}/AppServer/server/rx/deploy/jms"  verbose="true" failonerror="true" overwrite="true">  
                  <fileset dir="${patch.backup}/AppServer/server/rx/deploy/jms" includes="jbossmq-httpil.sar/**"/>
                </copy>
            </then>
        </if>

<if>
        <available file="${patch.backup}/sys_resources/tinymce-4.3.8" type="dir"/>
            <then>
                <copy todir="${rhythmyx.home}/sys_resources"  verbose="true" failonerror="true" overwrite="true">  
                  <fileset dir="${patch.backup}/sys_resources" includes="tinymce-4.3.8/**"/>
                </copy>
            </then>
        </if>
        <if>
        <available file="${patch.backup}/sys_resources/tinymce-4.3.3" type="dir"/>
            <then>
                <copy todir="${rhythmyx.home}/sys_resources"  verbose="true" failonerror="true" overwrite="true">  
                  <fileset dir="${patch.backup}/sys_resources" includes="tinymce-4.3.3/**"/>
                </copy>
            </then>
        </if>

<if>
        <available file="${patch.backup}/sys_resources/tinymce-4.0b3" type="dir"/>
            <then>
                <copy todir="${rhythmyx.home}/sys_resources"  verbose="true" failonerror="true" overwrite="true">  
                  <fileset dir="${patch.backup}/sys_resources" includes="tinymce-4.0b3/**"/>
                </copy>
            </then>
        </if>

        <if>
        <available file="${patch.backup}/sys_resources/tinymce" type="dir"/>
            <then>
                <copy todir="${rhythmyx.home}/sys_resources"  verbose="true" failonerror="true" overwrite="true">  
                  <fileset dir="${patch.backup}/sys_resources" includes="tinymce/**"/>
                </copy>
               
            </then>
        </if>

        <!-- if this file exists, it means there was not a previous version of the file, and
             was the first time applying table schema on patch install. For this reason,
             we can delete the rxconfig file and replace with the previous version for schema 
             downgrade. -->
        <if>
            <available file="${patch.backup}/rxconfig/Installer/cmstableData-prev.xml"/>
            <then>
                <copy file="${patch.backup}/rxconfig/Installer/cmstableData-prev.xml" tofile="${rhythmyx.home}/rxconfig/Installer/cmstableData.xml" verbose="true" overwrite="true" failonerror="true"/>
            </then>
        </if>
        <if>
            <available file="${patch.backup}/rxconfig/Installer/cmstableDef-prev.xml"/>
            <then>
                <copy file="${patch.backup}/rxconfig/Installer/cmstableDef-prev.xml" tofile="${rhythmyx.home}/rxconfig/Installer/cmstableDef.xml" verbose="true" overwrite="true" failonerror="true"/>
            </then>
        </if>
    	
    	
    	<if>
    	<available file="${patch.backup}/sys_resources/webapps" type="dir"/>
    	<then>
    		<echo>Uninstalling Secure Membership Site Template...</echo>
    		<delete dir="${rhythmyx.home}/sys_resources/webapps/secure/WEB-INF/lib" failonerror="false" /> 
    		<copy todir="${rhythmyx.home}/sys_resources" verbose="true" failonerror="false" overwrite="true">  
    		      <fileset dir="${patch.backup}/sys_resources" includes="webapps/**"/>
    		 </copy>
    	</then>
    	</if>
		
    </target>

    <!--===================================-->
    <!-- DTS Patch Installation            -->
    <!--                                   -->
    <!-- Install DTS Patches for            -->
    <!-- Deployment and a staging install  -->

    <target name="installDTSFiles" depends="backupDTSFiles">
    
        <antcall target="cleanDTSWarDirectories" inheritall="true"/>
        <!-- Extract delivery-tier-suite wars -->
        <unzip src="${patch.files.dts}/delivery-tier-suite.zip" dest="${patch.files.dts}/"/>
        <!-- copy patch wars-->
        <copy todir="${rhythmyx.home}/Deployment/Server/webapps" verbose="true" failonerror="true" overwrite="true">
            <fileset dir="${patch.files.dts}" includes="*.war"/>
        </copy>
        <!-- copy the three jars to {rhythmyx.home}\Deployment\Server\lib-->
        <copy todir="${rhythmyx.home}/Deployment/Server/lib/" verbose="true" failonerror="true" overwrite="true">
            <fileset dir="${patch.files.dts}" includes="*.jar"/>
        </copy>

        <!-- Remove perc-lib-->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/perc-lib" type="dir"/>
            <then>
                <move todir="${patch.backup}/Deployment/Server/perc-lib" verbose="true" failonerror="true" overwrite="true">
                    <fileset dir="${rhythmyx.home}/Deployment/Server/perc-lib"/>
                </move>
            </then>
        </if>
        <!-- Remove log4j.properties from lib-->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/lib/log4j.properties"/>
            <then>
                <move tofile="${patch.backup}/Deployment/Server/lib/log4j.properties" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${rhythmyx.home}/Deployment/Server/lib/log4j.properties"/>
                </move>
            </then>
        </if>
        <!-- Remove log4j-1.2.14.jar from lib-->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/lib/log4j-1.2.14.jar"/>
            <then>
                <move tofile="${patch.backup}/Deployment/Server/lib/log4j-1.2.14.jar" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${rhythmyx.home}/Deployment/Server/lib/log4j-1.2.14.jar"/>
                </move>
            </then>
        </if>
        
        <!-- Remove jasper-jdt.jar from lib-->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/lib/jasper-jdt.jar"/>
            <then>
                <move tofile="${patch.backup}/Deployment/Server/lib/jasper-jdt.jar" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${rhythmyx.home}/Deployment/Server/lib/jasper-jdt.jar"/>
                </move>
            </then>
        </if>
        
        <!-- Remove tomcat6.exe from bin -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/bin/tomcat6.exe"/>
            <then>
                <move tofile="${patch.backup}/Deployment/Server/bin/tomcat6.exe" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${rhythmyx.home}/Deployment/Server/bin/tomcat6.exe"/>
                </move>
            </then>
        </if>
        
        <!-- Remove tomcat6w.exe from bin -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/bin/tomcat6w.exe"/>
            <then>
                <move tofile="${patch.backup}/Deployment/Server/bin/tomcat6w.exe" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${rhythmyx.home}/Deployment/Server/bin/tomcat6w.exe"/>
                </move>
            </then>
        </if>
        
        <!-- Remove logging.properties from conf -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/conf/logging.properties"/>
            <then>
                <move tofile="${patch.backup}/Deployment/Server/conf/logging.properties" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${rhythmyx.home}/Deployment/Server/conf/logging.properties"/>
                </move>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/conf/server.xml" type="file"/>
            <then>
                <xslt force="true" style="updatedtsserverxml.xsl" in="${patch.backup}/Deployment/Server/conf/server.xml" out="${rhythmyx.home}/Deployment/Server/conf/server.xml" />
                <replaceregexp file="${rhythmyx.home}/Deployment/Server/conf/server.xml" 
                        match="((TLSv1,?(?!\.))|(,?TLSv1(?!\.)))"
                        replace=""
                        flags="g" />
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/JRE/lib/security"  type="dir" />
            <then>
                <if>
                    <equals arg1="${isDTSOnly}" arg2="true"/>
                    <then>
                        <copy todir="${rhythmyx.home}/JRE/lib/security" verbose="true" failonerror="false" overwrite="true">
                            <fileset dir="${patch.files}/JRE/lib/security">
                                <include name="java.security"/>
                                <include name="US_export_policy.jar"/>
                                <include name="local_policy.jar"/>
                                <include name="README.txt"/>
                            </fileset>
                        </copy>
                    </then>
                </if>
            </then>
        </if>
    </target>

    <target name="installStagingFiles" depends="backupStagingFiles">
        <antcall target="cleanStagingWarDirectories" inheritall="true"/>
        <!-- Extract delivery-tier-suite wars -->
        <unzip src="${patch.files.dts}/delivery-tier-suite.zip" dest="${patch.files.dts}/"/>
        <!-- copy patch wars-->
        <copy todir="${rhythmyx.home}/Staging/Deployment/Server/webapps" verbose="true" failonerror="true" overwrite="true">
            <fileset dir="${patch.files.dts}" includes="*.war"/>
        </copy>
        
        <!-- copy the three jars to {rhythmyx.home}\Deployment\Server\lib -->
        <copy todir="${rhythmyx.home}/Staging/Deployment/Server/lib" verbose="true" failonerror="true" overwrite="true">
            <fileset dir="${patch.files.dts}" includes="*.jar"/>
        </copy>

        <!-- Remove staging perc-lib-->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/perc-lib" type="dir"/>
            <then>
                <move todir="${patch.backup}/Staging/Deployment/Server/perc-lib" verbose="true" failonerror="true" overwrite="true">
                    <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/perc-lib"/>
                </move>
            </then>
        </if>
        <!-- Remove log4j.properties from staging lib-->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/lib/log4j.properties"/>
            <then>
                <move tofile="${patch.backup}/Staging/Deployment/Server/lib/log4j.properties" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${rhythmyx.home}/Staging/Deployment/Server/lib/log4j.properties"/>
                </move>
            </then>
        </if>
        
        <!-- Remove log4j-1.2.14.jar from staging lib-->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/lib/log4j-1.2.14.jar"/>
            <then>
                <move tofile="${patch.backup}/Staging/Deployment/Server/lib/log4j-1.2.14.jar" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${rhythmyx.home}/Staging/Deployment/Server/lib/log4j-1.2.14.jar"/>
                </move>
            </then>
        </if>
        
        <!-- Remove jasper-jdt.jar from lib-->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/lib/jasper-jdt.jar"/>
            <then>
                <move tofile="${patch.backup}/Staging/Deployment/Server/lib/jasper-jdt.jar" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${rhythmyx.home}/Staging/Deployment/Server/lib/jasper-jdt.jar"/>
                </move>
            </then>
        </if>
        
        <!-- Remove tomcat6.exe from staging bin -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/bin/tomcat6.exe"/>
            <then>
                <move tofile="${patch.backup}/Staging/Deployment/Server/bin/tomcat6.exe" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${rhythmyx.home}/Staging/Deployment/Server/bin/tomcat6.exe"/>
                </move>
            </then>
        </if>
        
        <!-- Remove tomcat6w.exe from staging bin -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/bin/tomcat6w.exe"/>
            <then>
                <move tofile="${patch.backup}/Staging/Deployment/Server/bin/tomcat6w.exe" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${rhythmyx.home}/Staging/Deployment/Server/bin/tomcat6w.exe"/>
                </move>
            </then>
        </if>
        
        <!-- Remove logging.properties from staging conf -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/conf/logging.properties"/>
            <then>
                <move tofile="${patch.backup}/Staging/Deployment/Server/conf/logging.properties" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${rhythmyx.home}/Staging/Deployment/Server/conf/logging.properties"/>
                </move>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/conf/server.xml" type="file"/>
            <then>
                <xslt force="true" style="updatedtsserverxml.xsl" in="${patch.backup}/Staging/Deployment/Server/conf/server.xml" out="${rhythmyx.home}/Staging/Deployment/Server/conf/server.xml" />
                <replaceregexp file="${rhythmyx.home}/Staging/Deployment/Server/conf/server.xml" 
                        match="((TLSv1,?(?!\.))|(,?TLSv1(?!\.)))"
                        replace=""
                        flags="g" />
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Staging/JRE/lib/security"  type="dir" />
            <then>
                <if>
                    <equals arg1="${isDTSOnly}" arg2="true"/>
                    <then>
                        <copy todir="${rhythmyx.home}/Staging/JRE/lib/security" verbose="true" failonerror="false" overwrite="true">
                            <fileset dir="${patch.files}/JRE/lib/security">
                                <include name="java.security"/>
                                <include name="US_export_policy.jar"/>
                                <include name="local_policy.jar"/>
                                <include name="README.txt"/>
                            </fileset>
                        </copy>
                    </then>
                </if>
            </then>
        </if>
    </target>
    
    <!--===================================-->
    <!-- Tomcat Patch Installation         -->
    <!--                                   -->
    <!-- Upgrade Tomcat installation for   -->
    <!-- deployment and a staging install  -->
    <target name="installTomcatFiles" depends="backupTomcatFiles">
        <echo>Upgrading Tomcat...</echo>
        <unzip src="${patch.files}/Patch/${patchid}/files/Server.zip" dest="${patch.files}/Tools"/>
        
        <touch>
            <fileset dir="${patch.files}"/>
        </touch>
        
        <copy todir="${rhythmyx.home}/Deployment/Server" verbose="true" failonerror="true" overwrite="true">
            <fileset dir="${patch.files}/Tools/Server">
                <include name="bin/**"/>
                <include name="lib/**"/>
                <include name="conf/context.xml"/>
                <include name="conf/catalina**"/>
                <include name="webapps/ROOT/**"/>
                <include name="RELEASE-NOTES"/>
                <include name="LICENSE"/>
                <include name="NOTICE"/>
            </fileset>
        </copy>
        
       

        <!-- Upgrade Tomcat start and shutdown batch scripts-->
        <if>
            <available file="${rhythmyx.home}/TomcatStartup.bat"/>
            <then>
                <echo>Upgrading TomcatStartup.bat</echo>
                <copy file="${patch.files}/Patch/${patchid}/files/TomcatStartup.bat" tofile="${rhythmyx.home}/TomcatStartup.bat"/>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/TomcatShutdown.bat"/>
            <then>
                <echo>Upgrading TomcatShutdown.bat</echo>
                <copy file="${patch.files}/Patch/${patchid}/files/TomcatShutdown.bat" tofile="${rhythmyx.home}/TomcatShutdown.bat"/>
            </then>
        </if>
        
        <!-- Upgrade Tomcat start and shutdown shell scripts-->
        <if>
            <available file="${rhythmyx.home}/TomcatStartup.sh"/>
            <then>
                <echo>Upgrading TomcatStartup.sh</echo>
                <copy file="${patch.files}/Patch/${patchid}/files/TomcatStartup.sh" tofile="${rhythmyx.home}/TomcatStartup.sh"/>
                <chmod file="${rhythmyx.home}/TomcatStartup.sh" perm="754"/>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/TomcatShutdown.sh"/>
            <then>
                <echo>Upgrading TomcatShutdown.sh</echo>
                <copy file="${patch.files}/Patch/${patchid}/files/TomcatShutdown.sh" tofile="${rhythmyx.home}/TomcatShutdown.sh"/>
                <chmod file="${rhythmyx.home}/TomcatShutdown.sh" perm="754"/>
            </then>
        </if>
        
        <!-- Update Version.properties file (need to check if DTS Only) -->
        <if>
            <equals arg1="${isDTSOnly}" arg2="true" />
            <then>
                <if>
                    <available file="${rhythmyx.home}/Version.properties"/>
                    <then>
                        <echo>Upgrading Version.properties</echo>
                        <copy file="${patch.files}/Version.properties" tofile="${rhythmyx.home}/Version.properties"/>
                    </then>
                </if>
            </then>
        </if>

        <!-- Upgrade Tomcat robots.txt.  No need to check if available as we want to deploy this if not. -->
        <echo>Upgrading robots.txt</echo>
        <copy file="${patch.files}/Patch/${patchid}/files/robots.txt" tofile="${rhythmyx.home}/Deployment/Server/webapps/ROOT/robots.txt"/>
        
        <!-- Dropping in perc-metadata-services.properties.sample.  No need to check if available as we want to deploy this if not.-->
        <echo>Dropping in perc-metadata-services.properties.sample</echo>
        <copy file="${patch.files}/Patch/${patchid}/files/perc-metadata-services.properties.sample" tofile="${rhythmyx.home}/Deployment/Server/conf/perc/perc-metadata-services.properties.sample"/>
        
        <!-- Upgrade easyXDM.js -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.js"/>
            <then>
                <echo>Upgrading easyXDM.js</echo>
                <copy file="${patch.files}/Patch/${patchid}/files/easyXDM.js" tofile="${rhythmyx.home}/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.js"/>
            </then>
        </if>

        <!-- Upgrade easyXDM.min.js -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.min.js"/>
            <then>
                <echo>Upgrading easyXDM.min.js</echo>
                <copy file="${patch.files}/Patch/${patchid}/files/easyXDM.min.js" tofile="${rhythmyx.home}/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.min.js"/>
            </then>
        </if>

        <echo>Upgrading Tomcat complete.</echo>

    </target>
    
    <target name="installStagingTomcatFiles" depends="backupStagingTomcatFiles">
        <echo>Upgrading Staging Tomcat...</echo>
        <unzip src="${patch.files}/Patch/${patchid}/files/Server.zip" dest="${patch.files}/Tools"/>
        
        <touch>
            <fileset dir="${patch.files}/"/>
        </touch>
        
        <copy todir="${rhythmyx.home}/Staging/Deployment/Server" verbose="true" failonerror="true" overwrite="true">
            <fileset dir="${patch.files}/Tools/Server">
                <include name="bin/**"/>
                <include name="lib/**"/>
                <include name="conf/catalina**"/>
                <include name="conf/context.xml"/>
                <include name="webapps/ROOT/**"/>
                <include name="RELEASE-NOTES"/>
                <include name="LICENSE"/>
                <include name="NOTICE"/>
            </fileset>
        </copy>
        
        <!-- Upgrade Staging Tomcat start and shutdown batch scripts-->
        <if>
            <available file="${rhythmyx.home}/Staging/TomcatStartup.bat"/>
            <then>
                <echo>Upgrading Staging TomcatStartup.bat</echo>
                <copy file="${patch.files}/Patch/${patchid}/files/TomcatStartup.bat" tofile="${rhythmyx.home}/Staging/TomcatStartup.bat"/>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Staging/TomcatShutdown.bat"/>
            <then>
                <echo>Upgrading Staging TomcatShutdown.bat</echo>
                <copy file="${patch.files}/Patch/${patchid}/files/TomcatShutdown.bat" tofile="${rhythmyx.home}/Staging/TomcatShutdown.bat"/>
            </then>
        </if>
        
        <!-- Upgrade Tomcat Staging start and shutdown shell scripts-->
        <if>
            <available file="${rhythmyx.home}/Staging/TomcatStartup.sh"/>
            <then>
                <echo>Upgrading Staging TomcatStartup.sh</echo>
                <copy file="${patch.files}/Patch/${patchid}/files/TomcatStartup.sh" tofile="${rhythmyx.home}/Staging/TomcatStartup.sh"/>
                <chmod file="${rhythmyx.home}/Staging/TomcatStartup.sh" perm="754"/>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Staging/TomcatShutdown.sh"/>
            <then>
                <echo>Upgrading Staging TomcatShutdown.sh</echo>
                <copy file="${patch.files}/Patch/${patchid}/files/TomcatShutdown.sh" tofile="${rhythmyx.home}/Staging/TomcatShutdown.sh"/>
                <chmod file="${rhythmyx.home}/Staging/TomcatShutdown.sh" perm="754"/>
            </then>
        </if>
        
        <!-- Update Staging Version.properties file (need to check if DTS Only) -->
        <if>
            <equals arg1="${isDTSOnly}" arg2="true" />
            <then>
                <if>
                    <available file="${rhythmyx.home}/Staging/Version.properties"/>
                    <then>
                        <echo>Upgrading Staging Version.properties</echo>
                        <copy file="${patch.files}/Version.properties" tofile="${rhythmyx.home}/Staging/Version.properties"/>
                    </then>
                </if>
                <!-- In the event that a Version.properties exists one level up,
                     we want to upgrade that as well. cms-3415 -->
                <if>
                    <available file="${rhythmyx.home}/Version.properties"/>
                    <then>
                        <echo>Upgrading Version.properties</echo>
                        <copy file="${patch.files}/Version.properties" tofile="${rhythmyx.home}/Version.properties"/>
                    </then>
                </if>
            </then>
        </if>

        <!-- Upgrade Staging robots.txt.  No need to check if it's available because we want to deploy the file if not.-->
        <echo>Upgrading Staging robots.txt</echo>
        <copy file="${patch.files}/Patch/${patchid}/files/robots.txt" tofile="${rhythmyx.home}/Staging/Deployment/Server/webapps/ROOT/robots.txt"/> 
        
        <!-- Upgrade Staging perc-metadata-services.properties.sample.  No need to check if it's available because we want to deploy the file if not.-->
        <echo>Upgrading Staging perc-metadata-services.properties.sample</echo>
        <copy file="${patch.files}/Patch/${patchid}/files/perc-metadata-services.properties.sample" tofile="${rhythmyx.home}/Staging/Deployment/Server/conf/perc/perc-metadata-services.properties.sample"/> 
 
        <!-- Upgrade Staging easyXDM.js -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.js"/>
            <then>
                <echo>Upgrading Staging easyXDM.js</echo>
                <copy file="${patch.files}/Patch/${patchid}/files/easyXDM.js" tofile="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.js"/>
            </then>
        </if>

        <!-- Upgrade Staging easyXDM.min.js -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.min.js"/>
            <then>
                <echo>Upgrading easyXDM.min.js</echo>
                <copy file="${patch.files}/Patch/${patchid}/files/easyXDM.min.js" tofile="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.min.js"/>
            </then>
        </if>

        <echo>Upgrading Staging Tomcat complete.</echo>

    </target>

    <!--===================================-->
    <!-- DTS Patch Uninstall targets       -->
    <!--                                   -->
    <!-- Uninstall DTS Patches for           -->
    <!-- any deployment or staging          -->

    <target name="uninstallDTSFiles">
        <!-- Uninstall wars -->
        <if>
            <available file="${patch.backup}/Deployment/Server/webapps" type="dir"/>
            <then>
                <antcall target="cleanDTSWarDirectories" inheritall="true"/>
                <copy todir="${rhythmyx.home}/Deployment/Server/webapps" verbose="true" failonerror="true" overwrite="true">
                      <fileset dir="${patch.backup}/Deployment/Server/webapps" includes="*.war"/>
                </copy>
            </then>
        </if>
        <!-- Uninstall DTS jars -->
        <if>
            <available file="${patch.backup}/Deployment/Server/lib" type="dir"/>
            <then>
                <copy todir="${rhythmyx.home}/Deployment/Server/lib" verbose="true" failonerror="true" overwrite="true">
                    <fileset dir="${rhythmyx.home}/Deployment/Server/lib">
                        <include name="**/perc*.jar"/>
                    </fileset>
                </copy>
            </then>
        </if>
        <!-- Return perc-lib to its proper location -->
        <if>
            <available file="${patch.backup}/Deployment/Server/perc-lib" type="dir"/>
            <then>
                <move todir="${rhythmyx.home}/Deployment/Server/perc-lib" verbose="true" failonerror="true" overwrite="true">
                    <fileset dir="${patch.backup}/Deployment/Server/perc-lib"/>
                </move>
            </then>
        </if>

        <!-- return log4j.properties to lib-->
        <if>
            <available file="${patch.backup}/Deployment/Server/lib/log4j.properties"/>
            <then>
                <move tofile="${rhythmyx.home}/Deployment/Server/lib/log4j.properties" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${patch.backup}/Deployment/Server/lib/log4j.properties"/>
                </move>
            </then>
        </if>
        
        <!-- Return log4j-1.2.14.jar to lib-->
        <if>
            <available file="${patch.backup}/Deployment/Server/lib/log4j-1.2.14.jar"/>
            <then>
                <move tofile="${rhythmyx.home}/Deployment/Server/lib/log4j-1.2.14.jar" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${patch.backup}/Deployment/Server/lib/log4j-1.2.14.jar"/>
                </move>
            </then>
        </if>
        
        <!-- Return jasper-jdt.jar to lib-->
        <if>
            <available file="${patch.backup}/Deployment/Server/lib/jasper-jdt.jar"/>
            <then>
                <move tofile="${rhythmyx.home}/Deployment/Server/lib/jasper-jdt.jar" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${patch.backup}/Deployment/Server/lib/jasper-jdt.jar"/>
                </move>
            </then>
        </if>
        
        <!-- Return tomcat6.exe to bin -->
        <if>
            <available file="${patch.backup}/Deployment/Server/bin/tomcat6.exe"/>
            <then>
                <move tofile="${rhythmyx.home}/Deployment/Server/bin/tomcat6.exe" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${patch.backup}/Deployment/Server/bin/tomcat6.exe"/>
                </move>
            </then>
        </if>
        
        <!-- Return tomcat6w.exe to bin -->
        <if>
            <available file="${patch.backup}/Deployment/Server/bin/tomcat6w.exe"/>
            <then>
                <move tofile="${rhythmyx.home}/Deployment/Server/bin/tomcat6w.exe" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${patch.backup}/Deployment/Server/bin/tomcat6w.exe"/>
                </move>
            </then>
        </if>
        
        <!-- return logging.properties to conf -->
        <if>
            <available file="${patch.backup}/Deployment/Server/conf/logging.properties"/>
            <then>
                <move tofile="${rhythmyx.home}/Deployment/Server/conf/logging.properties" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${patch.backup}/Deployment/Server/conf/logging.properties"/>
                </move>
            </then>
        </if>
        
    	<!-- restore local deployment descriptor -->
    	<if>
    		<available file="${patch.backup}/Deployment/Server/conf/Catalina/localhost" type="dir"  />
    		  <then>
	                <copy todir="{rhythmyx.home}/Deployment/Server/conf/Catalina/localhost" verbose="true" failonerror="true" overwrite="true">
	                	<fileset file="${patch.backup}/Deployment/Server/conf/Catalina/localhost"/>
	                </copy>
    		  </then>
    	</if>
    	
        <!-- return server.xml to conf -->
        <if>
            <available file="${patch.backup}/Deployment/Server/conf/server.xml"/>
            <then>
                <move tofile="${rhythmyx.home}/Deployment/Server/conf/server.xml" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${patch.backup}/Deployment/Server/conf/server.xml"/>
                </move>
            </then>
        </if>
        <!-- remove log4j2.xml -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/lib/log4j2.xml"/>
            <then>
                <delete file="${rhythmyx.home}/Deployment/Server/lib/log4j2.xml"/>
            </then>
        </if>
        
        <!-- remove connector jar -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/lib/perc-tomcat-common-1.0.0-SNAPSHOT.jar"/>
            <then>
                <delete file="${rhythmyx.home}/Deployment/Server/lib/perc-tomcat-common-1.0.0-SNAPSHOT.jar"/>
            </then>
        </if>
        
        <!-- remove log4j2 api jar -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/lib/log4j-api-2.7.jar "/>
            <then>
                <delete file="${rhythmyx.home}/Deployment/Server/lib/log4j-api-2.7.jar "/>
            </then>
        </if>
        
        <!-- remove log4j2 core jar -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/lib/log4j-core-2.7.jar "/>
            <then>
                <delete file="${rhythmyx.home}/Deployment/Server/lib/log4j-core-2.7.jar "/>
            </then>
        </if>
        
        <!-- remove log4j2 core jar -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/lib/log4j-1.2-api-2.7.jar"/>
            <then>
                <delete file="${rhythmyx.home}/Deployment/Server/lib/log4j-1.2-api-2.7.jar"/>
            </then>
        </if>
        
        <!-- remove odbc jar -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/lib/ojdbc-7.jar"/>
            <then>
                <delete file="${rhythmyx.home}/Deployment/Server/lib/ojdbc-7.jar"/>
            </then>
        </if>
        
        <!-- remove jtds jar -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/lib/jtds-1.3.1.jar"/>
            <then>
                <delete file="${rhythmyx.home}/Deployment/Server/lib/jtds-1.3.1.jar"/>
            </then>
        </if>
        
        <!-- remove derby jar -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/lib/derby-10.6.2.1.jar"/>
            <then>
                <delete file="${rhythmyx.home}/Deployment/Server/lib/derby-10.6.2.1.jar "/>
            </then>
        </if>
        
        <!-- remove derby client jar -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/lib/derbyclient-10.6.2.1.jar"/>
            <then>
                <delete file="${rhythmyx.home}/Deployment/Server/lib/derbyclient-10.6.2.1.jar"/>
            </then>
        </if>
        
        <!-- remove mariadb connector jar -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/lib/mariadb-java-client-1.4.2.jar"/>
            <then>
                <delete file="${rhythmyx.home}/Deployment/Server/lib/mariadb-java-client-1.4.2.jar"/>
            </then>
        </if>

        <if>
            <available file="${patch.backup}/JRE/lib/security"  type="dir" />
            <then>
                <if>
                    <equals arg1="${isDTSOnly}" arg2="true"/>
                    <then>
                        <copy todir="${rhythmyx.home}/JRE/lib/security" verbose="true" failonerror="false" overwrite="true">
                            <fileset dir="${patch.backup}/JRE/lib/security">
                                <include name="java.security"/>
                                <include name="US_export_policy.jar"/>
                                <include name="local_policy.jar"/>
                            </fileset>
                        </copy>
                    </then>
                </if>
            </then>
        </if>
        <!-- README done differently b/c that may not have existed before -->
        <if>
            <available file="${rhythmyx.home}/JRE/lib/security/README.txt"/>
            <then>
                <if>
                    <available file="${patch.backup}/JRE/lib/security/README.txt"/>
                    <then>
                        <copy file="${patch.backup}/JRE/lib/security/README.txt" todir="${rhythmyx.home}/JRE/lib/security" verbose="true" failonerror="true" overwrite="true"/>
                    </then>
                    <elseif>
                        <available file="${patch.files}/JRE/lib/security/README.txt"/>
                        <then>
                        <delete file="${rhythmyx.home}/JRE/lib/security/README.txt" verbose="true" quiet="true"/>
                        </then>
                    </elseif>
                </if>
            </then>
        </if>
    </target>

    <target name="uninstallStagingFiles">
    	<!-- restore local deployment descriptor -->
    	<if>
    		<available file="${patch.backup}/Staging/Deployment/Server/conf/Catalina/localhost" type="dir"  />
    		  <then>
	                <copy todir="{rhythmyx.home}/Staging/Deployment/Server/conf/Catalina/localhost" verbose="true" failonerror="true" overwrite="true">
	                    <fileset dir="${patch.backup}/Staging/Deployment/Server/conf/Catalina/localhost"/>
	                </copy>
    		  </then>
    	</if>
        <!-- Uninstall wars -->
        <if>
            <available file="${patch.backup}/Staging/Deployment/Server/webapps" type="dir"/>
            <then>
                <antcall target="cleanStagingWarDirectories" inheritall="true"/>
                <copy todir="${rhythmyx.home}/Staging/Deployment/Server/webapps" verbose="true" failonerror="true" overwrite="true">
                      <fileset dir="${patch.backup}/Staging/Deployment/Server/webapps" includes="*.war"/>
                </copy>
            </then>
        </if>
        <!-- Uninstall Staging jars -->
        <if>
            <available file="${patch.backup}/Staging/Deployment/Server/lib" type="dir"/>
            <then>
                <copy todir="${rhythmyx.home}/Staging/Deployment/Server/lib" verbose="true" failonerror="true" overwrite="true">
                    <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/lib">
                        <include name="**/perc*.jar"/>
                    </fileset>
                </copy>
            </then>
        </if>
        <!-- Return staging perc-lib to its proper location -->
        <if>
            <available file="${patch.backup}/Staging/Deployment/Server/perc-lib" type="dir"/>
            <then>
                <move todir="${rhythmyx.home}/Staging/Deployment/Server/perc-lib" verbose="true" failonerror="true" overwrite="true">
                    <fileset dir="${patch.backup}/Staging/Deployment/Server/perc-lib"/>
                </move>
            </then>
        </if>
        
        <!-- return log4j.properties to lib-->
        <if>
            <available file="${patch.backup}/Staging/Deployment/Server/lib/log4j.properties"/>
            <then>
                <move tofile="${rhythmyx.home}/Staging/Deployment/Server/lib/log4j.properties" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${patch.backup}/Staging/Deployment/Server/lib/log4j.properties"/>
                </move>
            </then>
        </if>
        
        <!-- Return log4j-1.2.14.jar to staging lib-->
        <if>
            <available file="${patch.backup}/Staging/Deployment/Server/lib/log4j-1.2.14.jar"/>
            <then>
                <move tofile="${rhythmyx.home}/Staging/Deployment/Server/lib/log4j-1.2.14.jar" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${patch.backup}/Staging/Deployment/Server/lib/log4j-1.2.14.jar"/>
                </move>
            </then>
        </if>
        
        <!-- Return jasper-jdt.jar to staging lib-->
        <if>
            <available file="${patch.backup}/Staging/Deployment/Server/lib/jasper-jdt.jar"/>
            <then>
                <move tofile="${rhythmyx.home}/Staging/Deployment/Server/lib/jasper-jdt.jar" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${patch.backup}/Staging/Deployment/Server/lib/jasper-jdt.jar"/>
                </move>
            </then>
        </if>
        
        <!-- Return tomcat6.exe to staging bin -->
        <if>
            <available file="${rhythmyx.backup}/Staging/Deployment/Server/bin/tomcat6.exe"/>
            <then>
                <move tofile="${rhythmyx.home}/Staging/Deployment/Server/bin/tomcat6.exe" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${patch.backup}/Staging/Deployment/Server/bin/tomcat6.exe"/>
                </move>
            </then>
        </if>
        
        <!-- Return tomcat6.exe to staging bin -->
        <if>
            <available file="${rhythmyx.backup}/Staging/Deployment/Server/bin/tomcat6w.exe"/>
            <then>
                <move tofile="${rhythmyx.home}/Staging/Deployment/Server/bin/tomcat6w.exe" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${patch.backup}/Staging/Deployment/Server/bin/tomcat6w.exe"/>
                </move>
            </then>
        </if>
        
        <!-- return logging.properties to conf -->
        <if>
            <available file="${patch.backup}/Staging/Deployment/Server/conf/logging.properties"/>
            <then>
                <move tofile="${rhythmyx.home}/Staging/Deployment/Server/conf/logging.properties" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${patch.backup}/Staging/Deployment/Server/conf/logging.properties"/>
                </move>
            </then>
        </if>
       <!-- return server.xml to conf -->
        <if>
            <available file="${patch.backup}/Staging/Deployment/Server/conf/server.xml"/>
            <then>
                <move tofile="${rhythmyx.home}/Staging/Deployment/Server/conf/server.xml" verbose="true" failonerror="true" overwrite="true">
                    <fileset file="${patch.backup}/Staging/Deployment/Server/conf/server.xml"/>
                </move>
            </then>
        </if>
        <!-- remove log4j2.xml -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/lib/log4j2.xml"/>
            <then>
                <delete file="${rhythmyx.home}/Staging/Deployment/Server/lib/log4j2.xml"/>
            </then>
        </if>
        
        <!-- remove connector jar -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/lib/perc-tomcat-common-1.0.0-SNAPSHOT.jar"/>
            <then>
                <delete file="${rhythmyx.home}/Staging/Deployment/Server/lib/perc-tomcat-common-1.0.0-SNAPSHOT.jar"/>
            </then>
        </if>
        
        <!-- remove log4j2 api jar -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/lib/log4j-api-2.7.jar "/>
            <then>
                <delete file="${rhythmyx.home}/Staging/Deployment/Server/lib/log4j-api-2.7.jar "/>
            </then>
        </if>
        
        <!-- remove log4j2 core jar -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/lib/log4j-core-2.7.jar "/>
            <then>
                <delete file="${rhythmyx.home}/Staging/Deployment/Server/lib/log4j-core-2.7.jar "/>
            </then>
        </if>
        
        <!-- remove log4j2 core jar -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/lib/log4j-1.2-api-2.7.jar"/>
            <then>
                <delete file="${rhythmyx.home}/Staging/Deployment/Server/lib/log4j-1.2-api-2.7.jar"/>
            </then>
        </if>
        
        <!-- remove odbc jar -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/lib/ojdbc-7.jar"/>
            <then>
                <delete file="${rhythmyx.home}/Staging/Deployment/Server/lib/ojdbc-7.jar"/>
            </then>
        </if>
        
        <!-- remove jtds jar -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/lib/jtds-1.3.1.jar"/>
            <then>
                <delete file="${rhythmyx.home}/Staging/Deployment/Server/lib/jtds-1.3.1.jar"/>
            </then>
        </if>
        
        <!-- remove derby jar -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/lib/derby-10.6.2.1.jar"/>
            <then>
                <delete file="${rhythmyx.home}/Staging/Deployment/Server/lib/derby-10.6.2.1.jar "/>
            </then>
        </if>
        
        <!-- remove derby client jar -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/lib/derbyclient-10.6.2.1.jar"/>
            <then>
                <delete file="${rhythmyx.home}/Staging/Deployment/Server/lib/derbyclient-10.6.2.1.jar"/>
            </then>
        </if>
        
        <!-- remove mariadb connector jar -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/lib/mariadb-java-client-1.4.2.jar"/>
            <then>
                <delete file="${rhythmyx.home}/Staging/Deployment/Server/lib/mariadb-java-client-1.4.2.jar"/>
            </then>
        </if>
        
        <if>
            <available file="${patch.backup}/Staging/JRE/lib/security"  type="dir" />
            <then>
                <if>
                    <equals arg1="${isDTSOnly}" arg2="true"/>
                    <then>
                        <copy todir="${rhythmyx.home}/Staging/JRE/lib/security" verbose="true" failonerror="false" overwrite="true">
                            <fileset dir="${patch.backup}/Staging/JRE/lib/security">
                                <include name="java.security"/>
                                <include name="US_export_policy.jar"/>
                                <include name="local_policy.jar"/>
                            </fileset>
                        </copy>
                    </then>
                </if>
            </then>
        </if>
        <!-- README done differently b/c that may not have existed before -->
        <if>
            <available file="${rhythmyx.home}/Staging/JRE/lib/security/README.txt"/>
            <then>
                <if>
                    <available file="${patch.backup}/Staging/JRE/lib/security/README.txt"/>
                    <then>
                        <copy file="${patch.backup}/Staging/JRE/lib/security/README.txt" todir="${rhythmyx.home}/Staging/JRE/lib/security" verbose="true" failonerror="true" overwrite="true"/>
                    </then>
                    <elseif>
                        <available file="${patch.files}/JRE/lib/security/README.txt"/>
                        <then>
                        <delete file="${rhythmyx.home}/Staging/JRE/lib/security/README.txt" verbose="true" quiet="true"/>
                        </then>
                    </elseif>
                </if>
            </then>
        </if>
    </target>
    
    <!--===================================-->
    <!-- Tomcat Patch Uninstallation       -->
    <!--                                   -->
    <!-- return Tomcat installation for    -->
    <!-- deployment and a staging install  --> 
    <!-- to original version.               -->
    
    <target name="uninstallTomcatFiles">
        <echo>Downgrading Tomcat...</echo>
        <unzip src="${patch.files}/Patch/${patchid}/files/Server.zip" dest="${patch.files}/Tools"/>
        
        <touch>
            <fileset dir="${patch.backup}"/>
        </touch>
        
        <copy todir="${rhythmyx.home}/Deployment/Server" verbose="true" failonerror="true" overwrite="true">
            <fileset dir="${patch.backup}/Deployment/Server">
                <include name="bin/**"/>
                <include name="lib/**"/>
                <include name="conf/catalina**"/>
                <include name="conf/context.xml"/>
                <include name="webapps/ROOT/**"/>
                <include name="RELEASE-NOTES"/>
                <include name="LICENSE"/>
                <include name="NOTICE"/>
            </fileset>
        </copy>
        
        <!-- Downgrade Tomcat start and shutdown batch scripts-->
        <if>
            <available file="${patch.backup}/TomcatStartup.bat"/>
            <then>
                <echo>Downgrade TomcatStartup.bat</echo>
                <copy file="${patch.backup}/TomcatStartup.bat" tofile="${rhythmyx.home}/TomcatStartup.bat"/>
            </then>
        </if>
        <if>
            <available file="${patch.backup}/TomcatShutdown.bat"/>
            <then>
                <echo>Downgrade TomcatShutdown.bat</echo>
                <copy file="${patch.backup}/TomcatShutdown.bat" tofile="${rhythmyx.home}/TomcatShutdown.bat"/>
            </then>
        </if>
        
        <!-- Downgrade Tomcat start and shutdown shell scripts-->
        <if>
            <available file="${patch.backup}/TomcatStartup.sh"/>
            <then>
                <echo>Downgrading TomcatStartup.sh</echo>
                <copy file="${patch.backup}/TomcatStartup.sh" tofile="${rhythmyx.home}/TomcatStartup.sh"/>
                <chmod file="${rhythmyx.home}/TomcatStartup.sh" perm="754"/>
            </then>
        </if>
        <if>
            <available file="${patch.backup}/TomcatShutdown.sh"/>
            <then>
                <echo>Downgrading TomcatShutdown.sh</echo>
                <copy file="${patch.backup}/TomcatShutdown.sh" tofile="${rhythmyx.home}/TomcatShutdown.sh"/>
                <chmod file="${rhythmyx.home}/TomcatShutdown.sh" perm="754"/>
            </then>
        </if>
        
        <!-- Downgrade Version.properties file (need to check if DTS Only) -->
        <if>
            <equals arg1="${isDTSOnly}" arg2="true" />
            <then>
                <if>
                    <available file="${patch.backup}/Version.properties"/>
                    <then>
                        <echo>Downgrading Version.properties</echo>
                        <copy file="${patch.backup}/Version.properties" tofile="${rhythmyx.home}/Version.properties"/>
                    </then>
                </if>
            </then>
        </if>
        
        <!-- Downgrade Tomcat robots.txt-->
        <if>
            <available file="${patch.backup}/Deployment/Server/webapps/ROOT/robots.txt"/>
            <then>
                <echo>Downgrading robots.txt</echo>
                <copy file="${patch.backup}/Deployment/Server/webapps/ROOT/robots.txt" tofile="${rhythmyx.home}/Deployment/Server/webapps/ROOT/robots.txt"/>
            </then>
        </if>
        
        <!-- Downgrade Tomcat perc-metadata-services.properties.sample-->
        <if>
            <available file="${patch.backup}/Deployment/Server/conf/perc/perc-metadata-services.properties.sample"/>
            <then>
                <echo>Downgrading perc-metadata-services.properties.sample</echo>
                <copy file="${patch.backup}/Deployment/Server/conf/perc/perc-metadata-services.properties.sample" tofile="${rhythmyx.home}/Deployment/Server/conf/perc/perc-metadata-services.properties.sample"/>
            </then>
        </if>

        <!-- Downgrade easyXDM.js -->
        <if>
            <available file="${patch.backup}/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.js"/>
            <then>
                <echo>Downgrading easyXDM.js</echo>
                <copy file="${patch.backup}/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.js" tofile="${rhythmyx.home}/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.js"/>
            </then>
        </if>

        <!-- Downgrade easyXDM.min.js -->
        <if>
            <available file="${patch.backup}/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.min.js"/>
            <then>
                <echo>Downgrading easyXDM.min.js</echo>
                <copy file="${patch.backup}/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.min.js" tofile="${rhythmyx.home}/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.min.js"/>
            </then>
        </if>
        
        <echo>Downgrading Tomcat complete.</echo>
    </target>
    
    <target name="uninstallStagingTomcatFiles">
        <echo>Downgrading Staging Tomcat...</echo>
        <unzip src="${patch.files}/Patch/${patchid}/files/Server.zip" dest="${patch.files}/Tools"/>
        
        <touch>
            <fileset dir="${patch.backup}"/>
        </touch>
        
        <copy todir="${rhythmyx.home}/Staging/Deployment/Server" verbose="true" failonerror="true" overwrite="true">
            <fileset dir="${patch.backup}/Staging/Deployment/Server">
                <include name="bin/**"/>
                <include name="lib/**"/>
                <include name="conf/context.xml"/>
                <include name="conf/catalina**"/>
                <include name="webapps/ROOT/**"/>
                <include name="RELEASE-NOTES"/>
                <include name="LICENSE"/>
                <include name="NOTICE"/>
            </fileset>
        </copy>
        
        <!-- Downgrade Staging Tomcat start and shutdown batch scripts-->
        <if>
            <available file="${patch.backup}/Staging/TomcatStartup.bat"/>
            <then>
                <echo>Downgrade Staging TomcatStartup.bat</echo>
                <copy file="${patch.backup}/Staging/TomcatStartup.bat" tofile="${rhythmyx.home}/Staging/TomcatStartup.bat"/>
            </then>
        </if>
        <if>
            <available file="${patch.backup}/Staging/TomcatShutdown.bat"/>
            <then>
                <echo>Downgrade Staging TomcatShutdown.bat</echo>
                <copy file="${patch.backup}/Staging/TomcatShutdown.bat" tofile="${rhythmyx.home}/Staging/TomcatShutdown.bat"/>
            </then>
        </if>
        
        <!-- Downgrade Staging Tomcat start and shutdown shell scripts-->
        <if>
            <available file="${patch.backup}/Staging/TomcatStartup.sh"/>
            <then>
                <echo>Downgrading Staging TomcatStartup.sh</echo>
                <copy file="${patch.backup}/Staging/TomcatStartup.sh" tofile="${rhythmyx.home}/Staging/TomcatStartup.sh"/>
                <chmod file="${rhythmyx.home}/Staging/TomcatStartup.sh" perm="754"/>
            </then>
        </if>
        <if>
            <available file="${patch.backup}/Staging/TomcatShutdown.sh"/>
            <then>
                <echo>Downgrading Staging TomcatShutdown.sh</echo>
                <copy file="${patch.backup}/Staging/TomcatShutdown.sh" tofile="${rhythmyx.home}/Staging/TomcatShutdown.sh"/>
                <chmod file="${rhythmyx.home}/Staging/TomcatShutdown.sh" perm="754"/>
            </then>
        </if>
        
        <!-- Downgrade Staging Version.properties file (need to check if DTS Only) -->
        <if>
            <equals arg1="${isDTSOnly}" arg2="true" />
            <then>
                <if>
                    <available file="${patch.backup}/Staging/Version.properties"/>
                    <then>
                        <echo>Downgrading Staging Version.properties</echo>
                        <copy file="${patch.backup}/Staging/Version.properties" tofile="${rhythmyx.home}/Staging/Version.properties"/>
                    </then>
                </if>
                <!-- cms-3415 -->
                <if>
                    <available file="${patch.backup}/Version.properties"/>
                    <then>
                        <echo>Downgrading root level Version.properties</echo>
                        <copy file="${patch.backup}/Version.properties" tofile="${rhythmyx.home}/Version.properties"/>
                    </then>
                </if>
            </then>
        </if>
        
        <!-- Downgrade Staging robots.txt-->
        <if>
            <available file="${patch.backup}/Staging/Deployment/Server/webapps/ROOT/robots.txt"/>
            <then>
                <echo>Downgrade Staging robots.txt</echo>
                <copy file="${patch.backup}/Staging/Deployment/Server/webapps/ROOT/robots.txt" tofile="${rhythmyx.home}/Staging/Deployment/Server/webapps/ROOT/robots.txt"/>
            </then>
        </if>
        
        <!-- Downgrade Staging perc-metadata-services.properties.sample-->
        <if>
            <available file="${patch.backup}/Staging/Deployment/Server/conf/perc/perc-metadata-services.properties.sample"/>
            <then>
                <echo>Downgrade Staging perc-metadata-services.properties.sample</echo>
                <copy file="${patch.backup}/Staging/Deployment/Server/conf/perc/perc-metadata-services.properties.sample" tofile="${rhythmyx.home}/Staging/Deployment/Server/conf/perc/perc-metadata-services.properties.sample"/>
            </then>
        </if>

        <!-- Downgrade Staging easyXDM.js -->
        <if>
            <available file="${patch.backup}/Staging/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.js"/>
            <then>
                <echo>Downgrading Staging easyXDM.js</echo>
                <copy file="${patch.backup}/Staging/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.js" tofile="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.js"/>
            </then>
        </if>

        <!-- Downgrade Staging easyXDM.min.js -->
        <if>
            <available file="${patch.backup}/Staging/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.min.js"/>
            <then>
                <echo>Downgrading Staging easyXDM.min.js</echo>
                <copy file="${patch.backup}/Staging/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.min.js" tofile="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.min.js"/>
            </then>
        </if>

        <echo>Downgrading Staging Tomcat complete.</echo>

    </target>

    <!--===================================-->
    <!-- DTS Patch Backup targets            -->
    <!--                                   -->
    <!-- Backup DTS and Staging prior to   -->
    <!-- installing for use during          -->
    <!-- uninstall of the patch               -->

    <target name="backupDTSFiles">
        <!-- backup wars -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/webapps" type="dir"/>
            <then>
                <copy todir="${patch.backup}/Deployment/Server/webapps" verbose="true" failonerror="true" overwrite="true">
                      <fileset dir="${rhythmyx.home}/Deployment/Server/webapps"/>
                </copy>
            </then>
        </if>
     
    	<if>
    		<available file="${rhythmyx.home}/Deployment/Server/conf/Catalina/localhost" type="dir" />
    		<then>
    			<copy todir="${patch.backup}/Deployment/Server/conf/Catalina/localhost" verbose="true" failonerror="true" overwrite="true">
    			    <fileset dir="${rhythmyx.home}/Deployment/Server/conf/Catalina/localhost" />
    			 </copy>
    		</then>
    	</if>
    	
    	<!-- backup DTS jars -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/lib" type="dir"/>
            <then>
                <copy todir="${patch.backup}/Deployment/Server/lib" verbose="true" failonerror="true" overwrite="true">
                    <fileset dir="${rhythmyx.home}/Deployment/Server/lib">
                        <include name="**/perc*.jar"/>
                    </fileset>
                </copy>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/conf/server.xml" type="file"/>
            <then>
                <copy file="${rhythmyx.home}/Deployment/Server/conf/server.xml" tofile="${patch.backup}/Deployment/Server/conf/server.xml"/>
            </then>
        </if>
        
        <if>
            <available file="${rhythmyx.home}/JRE/lib/security"  type="dir" />
            <then>
                <if>
                    <equals arg1="${isDTSOnly}" arg2="true"/>
                    <then>
                        <mkdir dir="${patch.backup}/JRE/lib/security"/>
                        <copy todir="${patch.backup}/JRE/lib/security" verbose="true" failonerror="false" overwrite="true">
                            <fileset dir="${rhythmyx.home}/JRE/lib/security">
                                <include name="java.security"/>
                                <include name="US_export_policy.jar"/>
                                <include name="local_policy.jar"/>
                                <include name="README.txt"/>
                            </fileset>
                        </copy>
                    </then>
                </if>
            </then>
        </if>
    </target>

    <!-- Backup Staging -->
    <target name="backupStagingFiles">
        <!-- backup wars -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps" type="dir"/>
            <then>
                <copy todir="${patch.backup}/Staging/Deployment/Server/webapps" verbose="true" failonerror="true" overwrite="true">
                      <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/webapps"/>

                </copy>
            </then>
        </if>
    	
    	<if>
			<available file="${rhythmyx.home}/Staging/Deployment/Server/conf/Catalina/localhost" type="dir" />
			<then>
				<copy todir="${patch.backup}/Staging/Deployment/Server/conf/Catalina/localhost" verbose="true" failonerror="true" overwrite="true">
				    <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/conf/Catalina/localhost" />
				 </copy>
			</then>
        </if>
    	
        <!-- backup Staging jars -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/lib" type="dir"/>
            <then>
                <copy todir="${patch.backup}/Staging/Deployment/Server/lib" verbose="true" failonerror="true" overwrite="true">
                      <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/lib">
                          <include name="**/perc*.jar"/>
                      </fileset>
                </copy>
            </then>
        </if>
         <if>
                    <available file="${rhythmyx.home}/Staging/Deployment/Server/conf/server.xml" type="file"/>
                    <then>
                     <copy file="${rhythmyx.home}/Staging/Deployment/Server/conf/server.xml" tofile="${patch.backup}/Staging/Deployment/Server/conf/server.xml"/>
                    </then>
         </if>
         
        <if>
            <available file="${rhythmyx.home}/Staging/JRE/lib/security"  type="dir" />
            <then>
                <if>
                    <equals arg1="${isDTSOnly}" arg2="true"/>
                    <then>
                        <mkdir dir="${patch.backup}/Staging/JRE/lib/security"/>
                        <copy todir="${patch.backup}/Staging/JRE/lib/security" verbose="true" failonerror="false" overwrite="true">
                            <fileset dir="${rhythmyx.home}/Staging/JRE/lib/security">
                                <include name="java.security"/>
                                <include name="US_export_policy.jar"/>
                                <include name="local_policy.jar"/>
                                <include name="README.txt"/>
                            </fileset>
                        </copy>
                    </then>
                </if>
            </then>
        </if>
    </target>

    <!--===================================-->
    <!-- TomcatBackup                       -->
    <!--                                   -->
    <!-- return Tomcat installation for    -->
    <!-- deployment and a staging install  --> 
    <!-- to original version.               -->
    
    <target name="backupTomcatFiles">
        <echo>Backing up old tomcat installation</echo>
        <copy todir="${patch.backup}/Deployment/Server" verbose="true" failonerror="true" overwrite="true">
            <fileset dir="${rhythmyx.home}/Deployment/Server">
                <include name="bin/**"/>
                <include name="lib/**"/>
                <include name="conf/context.xml"/>
                <include name="conf/catalina**"/>
                <include name="webapps/ROOT/**"/>
                <include name="webapps/manager/**"/>
                <include name="webapps/host-manager/**"/>
                <include name="RELEASE-NOTES"/>
                <include name="LICENSE"/>
                <include name="NOTICE"/>
            </fileset>
        </copy>
        
        <!-- Backing up Tomcat start and shutdown batch scripts-->
        <if>
            <available file="${rhythmyx.home}/TomcatStartup.bat"/>
            <then>
                <echo>Backing up TomcatStartup.bat</echo>
                <copy file="${rhythmyx.home}/TomcatStartup.bat" tofile="${patch.backup}/TomcatStartup.bat"/>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/TomcatShutdown.bat"/>
            <then>
                <echo>Backing up TomcatShutdown.bat</echo>
                <copy file="${rhythmyx.home}/TomcatShutdown.bat" tofile="${patch.backup}/TomcatShutdown.bat"/>
            </then>
        </if>
        
        <!-- Backing up Tomcat start and shutdown shell scripts-->
        <if>
            <available file="${rhythmyx.home}/TomcatStartup.sh"/>
            <then>
                <echo>Backing up TomcatStartup.sh</echo>
                <copy file="${rhythmyx.home}/TomcatStartup.sh" tofile="${patch.backup}/TomcatStartup.sh"/>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/TomcatShutdown.sh"/>
            <then>
                <echo>Backing up TomcatShutdown.sh</echo>
                <copy file="${rhythmyx.home}/TomcatShutdown.sh" tofile="${patch.backup}/TomcatShutdown.sh"/>
            </then>
        </if>
        
        <!-- Backup Version.properties file (need to check if DTS Only) -->
        <if>
            <equals arg1="${isDTSOnly}" arg2="true" />
            <then>
                <if>
                    <available file="${rhythmyx.home}/Version.properties"/>
                    <then>
                        <echo>Backing up Version.properties</echo>
                        <copy file="${rhythmyx.home}/Version.properties" tofile="${patch.backup}/Version.properties"/>
                    </then>
                </if>
            </then>
        </if>
        
        <!-- Backing up robots.txt-->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/webapps/ROOT/robots.txt"/>
            <then>
                <echo>Backing up robots.txt</echo>
                <copy file="${rhythmyx.home}/Deployment/Server/webapps/ROOT/robots.txt" tofile="${patch.backup}/Deployment/Server/webapps/ROOT/robots.txt"/>
            </then>
        </if>
        
        <!-- Backing up perc-metadata-services.properties.sample-->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/conf/perc/perc-metadata-services.properties.sample"/>
            <then>
                <echo>Backing up perc-metadata-services.properties.sample</echo>
                <copy file="${rhythmyx.home}/Deployment/Server/conf/perc/perc-metadata-services.properties.sample" tofile="${patch.backup}/Deployment/Server/conf/perc/perc-metadata-services.properties.sample"/>
            </then>
        </if>

        <!-- Backup easyXDM.js -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.js"/>
            <then>
                <echo>Backing up easyXDM.js</echo>
                <copy file="${rhythmyx.home}/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.js" tofile="${patch.backup}/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.js"/>
            </then>
        </if>

        <!-- Backup easyXDM.min.js -->
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.min.js"/>
            <then>
                <echo>Backing up easyXDM.min.js</echo>
                <copy file="${rhythmyx.home}/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.min.js" tofile="${patch.backup}/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.min.js"/>
            </then>
        </if>
    </target>
    
    <!-- Staging tomcat -->
    <target name="backupStagingTomcatFiles">
        <echo>Backing up old staging tomcat installation</echo>
        <copy todir="${patch.backup}/Staging/Deployment/Server" verbose="true" failonerror="true" overwrite="true">
            <fileset dir="${rhythmyx.home}/Staging/Deployment/Server">
                <include name="bin/**"/>
                <include name="lib/**"/>
                <include name="conf/context.xml"/>
                <include name="conf/catalina**"/>
                <include name="webapps/ROOT/**"/>
                <include name="webapps/manager/**"/>
                <include name="webapps/host-manager/**"/>
                <include name="RELEASE-NOTES"/>
                <include name="LICENSE"/>
                <include name="NOTICE"/>
            </fileset>
        </copy>
        
        <!-- Backing up Staging Tomcat start and shutdown batch scripts-->
        <if>
            <available file="${rhythmyx.home}/Staging/TomcatStartup.bat"/>
            <then>
                <echo>Backing up Staging TomcatStartup.bat</echo>
                <copy file="${rhythmyx.home}/Staging/TomcatStartup.bat" tofile="${patch.backup}/Staging/TomcatStartup.bat"/>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Staging/TomcatShutdown.bat"/>
            <then>
                <echo>Backing up Staging TomcatShutdown.bat</echo>
                <copy file="${rhythmyx.home}/Staging/TomcatShutdown.bat" tofile="${patch.backup}/Staging/TomcatShutdown.bat"/>
            </then>
        </if>
        
        <!-- Backing up Staging Tomcat start and shutdown shell scripts-->
        <if>
            <available file="${rhythmyx.home}/Staging/TomcatStartup.sh"/>
            <then>
                <echo>Backing up Staging TomcatStartup.sh</echo>
                <copy file="${rhythmyx.home}/Staging/TomcatStartup.sh" tofile="${patch.backup}/Staging/TomcatStartup.sh"/>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Staging/TomcatShutdown.sh"/>
            <then>
                <echo>Backing up Staging TomcatShutdown.sh</echo>
                <copy file="${rhythmyx.home}/Staging/TomcatShutdown.sh" tofile="${patch.backup}/Staging/TomcatShutdown.sh"/>
            </then>
        </if>
        
        <!-- Backup Staging Version.properties file (need to check if DTS Only) -->
        <if>
            <equals arg1="${isDTSOnly}" arg2="true" />
            <then>
                <if>
                    <available file="${rhythmyx.home}/Staging/Version.properties"/>
                    <then>
                        <echo>Backing up Staging Version.properties</echo>
                        <copy file="${rhythmyx.home}/Staging/Version.properties" tofile="${patch.backup}/Staging/Version.properties"/>
                    </then>
                </if>
                <!-- here we need a second check for root level version.properties
                     as there is a known bug that created a version.properties in two locations
                     for staging dts directories. cms-3415  -->
                <if>
                    <available file="${rhythmyx.home}/Version.properties"/>
                    <then>
                        <echo>Backing up root level Version.properties</echo>
                        <copy file="${rhythmyx.home}/Version.properties" tofile="${patch.backup}/Version.properties"/>
                    </then>
                </if>
            </then>
        </if>
        
        <!-- backup Staging robots.txt file -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps/ROOT/robots.txt"/>
            <then>
                <echo>Backing up Staging robots.txt</echo>
                <copy file="${rhythmyx.home}/Staging/Deployment/Server/webapps/ROOT/robots.txt" tofile="${patch.backup}/Staging/Deployment/Server/webapps/ROOT/robots.txt"/>
            </then>
        </if>
        
        <!-- backup Staging perc-metadata-services.properties.sample file -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/conf/perc/perc-metadata-services.properties.sample"/>
            <then>
                <echo>Backing up Staging perc-metadata-services.properties.sample</echo>
                <copy file="${rhythmyx.home}/Staging/Deployment/Server/conf/perc/perc-metadata-services.properties.sample" tofile="${patch.backup}/Staging/Deployment/Server/conf/perc/perc-metadata-services.properties.sample"/>
            </then>
        </if>

        <!-- Backup Staging easyXDM.js -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.js"/>
            <then>
                <echo>Backing up Staging easyXDM.js</echo>
                <copy file="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.js" tofile="${patch.backup}/Staging/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.js"/>
            </then>
        </if>

        <!-- Backup Staging easyXDM.min.js -->
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.min.js"/>
            <then>
                <echo>Backing Staging up easyXDM.min.js</echo>
                <copy file="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.min.js" tofile="${patch.backup}/Staging/Deployment/Server/webapps/perc-common-ui/cors/easyXDM.min.js"/>
            </then>
        </if>
    </target>
    
    <!--===================================-->
    <!-- DTS Patch wipe war directories       -->
    <!--                                   -->
    <!-- Deletes the associated war        -->
    <!-- directories for DTS and staging   -->
    
    <target name="cleanDTSWarDirectories">
    
		<!-- Delete the examples, docs, and manager apps if present for security purposes -->
		<echo>Removing Tomcat optional applications</echo>
		 <if>
		 <available file="${rhythmyx.home}/Deployment/Server/webapps/docs" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Deployment/Server/webapps/docs"/>
                </delete>
            </then>
        </if>
		<if>
		 <available file="${rhythmyx.home}/Deployment/Server/webapps/ROOT" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Deployment/Server/webapps/ROOT"/>
                </delete>
            </then>
        </if>
		 <if>
		 <available file="${rhythmyx.home}/Deployment/Server/webapps/examples" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Deployment/Server/webapps/examples"/>
                </delete>
            </then>
        </if>
		 <if>
		 <available file="${rhythmyx.home}/Deployment/Server/webapps/manager" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Deployment/Server/webapps/manager"/>
                </delete>
            </then>
        </if>
		 <if>
		 <available file="${rhythmyx.home}/Deployment/Server/webapps/host-manager" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Deployment/Server/webapps/host-manager"/>
                </delete>
            </then>
        </if>
    	<if>
		 	<available file="${rhythmyx.home}/Deployment/Server/conf/Catalina/localhost/host-manager.xml" type="file"/>
            <then>
                <delete includeemptydirs="true" verbose="true" failonerror="false">
                    <fileset dir="${rhythmyx.home}/Deployment/Server/conf/Catalina/localhost">
                    	<include name="host-manager.xml" />
                    	<include name="manager.xml" />
                    </fileset>
                </delete>
            </then>
        </if>
    	
        <!-- Delete exploded war directories -->
        <echo>Cleaning DTS war directories</echo>
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/webapps/feeds" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Deployment/Server/webapps/feeds"/>
                </delete>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/webapps/perc-caching" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Deployment/Server/webapps/perc-caching"/>
                </delete>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/webapps/perc-comments-services" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Deployment/Server/webapps/perc-comments-services"/>
                </delete>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/webapps/perc-form-processor" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Deployment/Server/webapps/perc-form-processor"/>
                </delete>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/webapps/perc-membership-services" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Deployment/Server/webapps/perc-membership-services"/>
                </delete>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/webapps/perc-metadata-services" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Deployment/Server/webapps/perc-metadata-services"/>
                </delete>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/webapps/perc-polls-services" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Deployment/Server/webapps/perc-polls-services"/>
                </delete>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Deployment/Server/webapps/perc-integrations" type="dir"/>
                    <then>
                        <delete includeemptydirs="true" verbose="true">
                            <fileset dir="${rhythmyx.home}/Deployment/Server/webapps/perc-integrations"/>
                        </delete>
                    </then>
        </if>
        <echo>Finished cleaning DTS war directories.</echo>
        <echo/>
    </target>
    
    <target name="cleanStagingWarDirectories">
	
	<!-- Delete the examples, docs, and manager apps if present for security purposes -->
		<echo>Removing Tomcat optional applications</echo>
		 <if>
		 <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps/docs" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/webapps/docs"/>
                </delete>
            </then>
        </if>
		 <if>
		 <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps/ROOT" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/webapps/ROOT"/>
                </delete>
            </then>
        </if>
		 <if>
		 <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps/examples" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/webapps/examples"/>
                </delete>
            </then>
        </if>
		 <if>
		 <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps/manager" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/webapps/manager"/>
                </delete>
            </then>
        </if>
		 <if>
		 <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps/host-manager" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/webapps/host-manager"/>
                </delete>
            </then>
        </if>
    	
    	<if>
		 	<available file="${rhythmyx.home}/Staging/Deployment/Server/conf/Catalina/localhost/host-manager.xml" type="file"/>
            <then>
                <delete includeemptydirs="true" verbose="true" failonerror="false">
                    <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/conf/Catalina/localhost">
                    	<include name="host-manager.xml" />
                    	<include name="manager.xml" />
                    </fileset>
                </delete>
            </then>
        </if>
    
        <!-- Delete exploded war directories -->
        <echo>Cleaning Staging war directories</echo>
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps/feeds" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/webapps/feeds"/>
                </delete>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-caching" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-caching"/>
                </delete>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-comments-services" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-comments-services"/>
                </delete>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-form-processor" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-form-processor"/>
                </delete>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-membership-services" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-membership-services"/>
                </delete>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-metadata-services" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-metadata-services"/>
                </delete>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-polls-services" type="dir"/>
            <then>
                <delete includeemptydirs="true" verbose="true">
                    <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-polls-services"/>
                </delete>
            </then>
        </if>
        <if>
            <available file="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-integrations" type="dir"/>
                    <then>
                        <delete includeemptydirs="true" verbose="true">
                            <fileset dir="${rhythmyx.home}/Staging/Deployment/Server/webapps/perc-integrations"/>
                        </delete>
                    </then>
        </if>
        <echo>Finished cleaning Staging war directories.</echo>
        <echo/>
    </target>
</project>