/*
 * Copyright 1999-2023 Percussion Software, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.percussion.rx.delivery;

import com.percussion.services.guidmgr.IPSGuidManager;
import com.percussion.utils.guid.IPSGuid;

/**
 * A single delivery result describes whether a particular delivery was
 * successful or not, and what failure occurred if one has occurred. Delivery
 * results are generated by the delivery handlers, {@link IPSDeliveryHandler}.
 * <p>
 * Results are generated at two points in the process. The initial call to
 * {@link
 * IPSDeliveryHandler#deliver(com.percussion.rx.delivery.IPSDeliveryItem)}
 * will return a delivery result. Then the call to
 * {@link IPSDeliveryHandler#commit(long)} will return a collection of results.
 * <p>
 * The logging system will combine multiple messages from the results if needed.
 * <p>
 * Another important role of the delivery result is to carry unpublishing
 * information from the delivery handler to be stored with the item's logging
 * information in the database. By storing a characteristic piece of data such
 * as path or the table and primary key, the delivered item can later be
 * unpublished. The unpublishing information can be any serializable java data
 * object.
 * 
 * @author dougrand
 */
public interface IPSDeliveryResult
{
   /**
    * The delivery outcome.
    * @return the delivery outcome. Never <code>null</code>.
    */
    Outcome getOutcome();

   /**
    * @return the data that will allow the delivery handler to unpublish this 
    * item. See the class documentation for more information.
    */
   byte[] getUnpublishData();

   /**
    * The failure message indicates what, if anything, failed during the 
    * delivery or removal of the given item's instance.
    * 
    * @return the failureMessage, may be <code>null</code> or empty.
    */
   String getFailureMessage();

   /**
    * @return returns the id of the assembled item that has been delivered,
    * never <code>null</code> after ctor. Use 
    * {@link IPSGuidManager#makeLocator(IPSGuid)} to convert the GUID back
    * to a locator.
    */
   IPSGuid getId();

   /**
    * @return returns the delivery job id. A job id is unique to a server and
    * form the basis of handling logs. They are used as the primary key in 
    * the status table.
    */
   long getJobId();

   /**
    * @return the reference id for the specific item assembling instance. These
    * ids are unique to the database and are used as primary keys in the log
    * table.
    */
   long getReferenceId();
   
   /**
    * @return the publishing context for this item
    */
   int getDeliveryContext();
   
   void updateSent();
   
   boolean hasUpdateSent();
   
   /**
    * The delivery outcome.
    */
   enum Outcome {
      /**
       * Delivery failed.
       */
      FAILED,
      
      /**
       * For transactional delivery handlers, this is the outcome
       * when the item is generated, but not committed yet.
       * Not used for non-transactinal delivery.
       */
      PREPARED_FOR_DELIVERY,
      
      /**
       * The delivery was successful.
       */
      DELIVERED,
      
      DELIVERY_QUEUED;
   }

   void setDeliveryContext(int deliveryContext);

   
}
