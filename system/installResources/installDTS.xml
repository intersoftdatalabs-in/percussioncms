<?xml version="1.0"?>
<project name="dtsInstall" default="install" basedir="..">
	<description>
	Installs Tomcat and the DTS web applications. 
	</description>

	<!--		Note: when adding dependencies here, make sure that they
		     are also added to buildResources/buildDTSSourceTree.xml as 
		     that builds the base zip used by the installer.  The locations
		     should mirror the locations used here.
-->
	<property name="builddir" value="${basedir}/build" />
	<property name="dts.servertype" value="production"/>
	<property name="install.dir" value="C:/Percussion/CM1" />
	<property name="distdir" value="${builddir}/dist" />
	<property name="libdir" value="${distdir}/lib" />
	<property name="toolsdir" value="${basedir}/Tools" />
	<property name="releasedir" value="${basedir}/release" />
	<property name="jdbcdir" value="${basedir}/jdbc" />
	<property name="projects.dir" location="${basedir}/../projects" />
	<property name="server" value="yes" />
	<property name="release.tomcatdir" location="${releasedir}/tomcat" />
	<property name="ant.install" value="com.percussion.ant.install" />
	<property name="dep.derbydata.dir" location="${install.dir}/Deployment/Server/derbydata" />
	<property name="install.lib.dep" location="${install.dir}/Deployment/Server/lib" />
	<property name="install.Dep.Webapps" location="${install.dir}/Deployment/Server/webapps" />
	<property name="configmgr.install.dir" value="${install.dir}/configmgr"/>
	<!-- Refresh files property name -->
	<property name="REFRESH_PROP_NAME" value="REFRESH" />
	<property name="delivery.tier.suite.dir" value="${basedir}/../deliverytiersuite"/>	
	

	
	<!-- ############################################################################ -->
		
		<property environment="env"/>
		
		<!-- 
			 Import the ant-contrib utility tasks - try importing both versions
			 ... one version is the deprecated version 
			 (in case we're running an old version of ANT)
		-->
		<taskdef resource="net/sf/antcontrib/antlib.xml" onerror="report">
		  	<classpath>
		    	<pathelement location="${ant.contrib.resource}"/>
		 	</classpath>
		</taskdef>
		
		<taskdef resource="net/sf/antcontrib/antcontrib.properties" onerror="report">
		  	<classpath>
		    	<pathelement location="${ant.contrib.resource}"/>
		 	</classpath>
		</taskdef>
		
		<!-- ############################################################################ -->
		
		<macrodef name="normalize">
			<attribute name="dir"/>
			<sequential>
				<if>
					<os family="unix" />
					<then>
						<echo message="Fixing file formatting in @{dir}"/>
						
						<fixcrlf srcdir="@{dir}" eol="lf" eof="remove" includes="**/*" />
						<chmod dir="@{dir}" perm="ugo+rx" includes="**/*.sh,**/*.vm"/>
					</then>
				</if>
			</sequential>
		</macrodef>
		
		<!-- ############################################################################ -->
		

	<!-- Define the install classpath -->
	<path id="INSTALL.CLASSPATH">
		<fileset dir="${libdir}" includes="*.jar" />
		<pathelement location="${toolsdir}/Ant/lib/ant-contrib-0.6.jar" />
	</path>

	<!-- Custom task definitions -->
	<taskdef name="PSAction" classname="${ant.install}.PSAction">
		<classpath>
			<path refid="INSTALL.CLASSPATH" />
		</classpath>
	</taskdef>

	<taskdef name="PSCopy" classname="${ant.install}.PSCopy">
		<classpath>
			<path refid="INSTALL.CLASSPATH" />
		</classpath>
	</taskdef>

	<!--==========================================================-->
	<!-- PSUnzip                                                  -->
	<!--                                                          -->
	<!-- Unzips the specified srcFile into the destDir.  An       -->
	<!-- optional neverReplaceFilter defines a patternset of      -->
	<!-- files which should not be replaced if they already       -->
	<!-- exist.  This filter is only used on upgrades.            -->
	<!--==========================================================-->
	<macrodef name="PSUnzip">
		<attribute name="srcFile" default="" />
		<attribute name="destDir" default="" />
		<element name="neverReplaceFilter" optional="yes" />
		<sequential>
			<if>
				<equals arg1="${install.type}" arg2="new" />
				<then>
					<unzip src="@{srcFile}" dest="@{destDir}" overwrite="true" />
				</then>
				<else>
					<unzip src="@{srcFile}" dest="@{destDir}" overwrite="true">
						<neverReplaceFilter />
					</unzip>
				</else>
			</if>
		</sequential>
	</macrodef>

	<var name="os.bitness" value="unknown" />
	<if>
		<equals arg1="${os}" arg2="windows" />
		<then>
			<exec dir="." executable="cmd" outputproperty="command.ouput">
				<arg line="/c SET ProgramFiles(x86)" />
			</exec>
			<if>
				<contains string="${command.ouput}" substring="Program Files (x86)" />
				<then>
					<var name="os.bitness" value="64" />
				</then>
				<else>
					<var name="os.bitness" value="32" />
				</else>
			</if>
		</then>
	</if>


	<!-- Detects OS, architecture it is running on -->
	<target name="detectPlatform">
		<condition property="os" value="linux">
			<os name="linux" />
		</condition>

		<condition property="os" value="solaris">
			<os family="unix" arch="sparc" />
		</condition>

		<condition property="os" value="windows">
			<os family="windows" />
		</condition>

		<!-- asserts one and only one platform is recognized -->
		<fail message="Unrecognized platform.">
			<condition>
				<not>
					<isset property="os" />
				</not>
			</condition>
		</fail>
	</target>

	<!-- Initialize the installation -->
	<target name="init">
		<!-- Set the installation directory and refresh files property -->
		<PSAction rootDir="${install.dir}" refreshProperty="${REFRESH_PROP_NAME}" />

		<!-- Check for running server and stop build (DEVELOPMENT only) -->
		<if>
			<isset property="DEVELOPMENT" />
			<then>
				<echo>Checking for running server...</echo>
				<echo>Server check is broken - skipping it...</echo>
				<!-- FIXME: The DTS should be checking for Tomcat not derby and CM1 / Rhythmyx <PSCheckRunningServer /> -->
				<echo>Did not detect running server...</echo>
			</then>
		</if>

		<!-- Install Version.properties file -->
		<PSCopy todir="${install.dir}" file="${builddir}/classes/com/percussion/util/Version.properties" />
	</target>


	<!-- The main install target -->
	<target name="install" depends="init, detectPlatform">
		<!-- Install Dep Webserver -->
		<antcall target="installDepServer" inheritrefs="true" />
	</target>

	<!-- Install Dep. Webserver -->
	<target name="installDepServer">
		<mkdir dir="${install.dir}/Deployment" />
		<PSUnzip srcFile="${toolsdir}/Tomcat/Server.zip" destDir="${install.dir}/Deployment">
			<neverReplaceFilter>
				<patternset>
					<exclude name="Server/conf/server.xml" />
					<exclude name="Server/conf/tomcat-users.xml" />
					<exclude name="Server/conf/logging.properties" />
					<exclude name="Server/conf/.keystore" />
				</patternset>
			</neverReplaceFilter>
		</PSUnzip>

		<if>
			<not><equals arg1="${install.type}" arg2="new" /></not>
			<then>
				<echo message="Touching config files on upgrade" />
				<touch >
					<fileset dir="${install.dir}/Deployment/Server/conf"/>
				</touch>
			</then>
		</if>

		<!-- Make sure that the configurable files were copied -->
		<unzip overwrite="false" src="${toolsdir}/Tomcat/Server.zip" dest="${install.dir}/Deployment/Server/conf">
			<patternset>
				<include name="Server/conf/server.xml" />
				<include name="Server/conf/tomcat-users.xml" />
				<include name="Server/conf/logging.properties" />
				<include name="Server/conf/.keystore" />
			</patternset>
			<mapper>
				<globmapper from="Server/conf/*" to="*" />
			</mapper>
		</unzip>
		

		<echo message="${os}-${os.bitness}" />
		<if>
			<and>
				<equals arg1="${os}" arg2="windows" />
				<equals arg1="${os.bitness}" arg2="32" />
			</and>
			<then>
				<PSCopy todir="${install.dir}">
					<fileset dir="${toolsdir}/Tomcat/Scripts">
						<exclude name="**/*.sh" />
						<include name="TomcatStartup.bat" />
						<include name="TomcatShutdown.bat" />
					</fileset>
				</PSCopy>
			</then>
		</if>
		<if>
			<and>
				<equals arg1="${os}" arg2="windows" />
				<equals arg1="${os.bitness}" arg2="64" />
			</and>
			<then>
				<PSCopy todir="${install.dir}">
					<fileset dir="${toolsdir}/Tomcat/Scripts/JRE64">
						<exclude name="**/*.sh" />
					</fileset>
				</PSCopy>
			</then>
		</if>
		<if>
			<or>
				<equals arg1="${os}" arg2="linux" />
				<equals arg1="${os}" arg2="solaris" />
			</or>
			<then>
				<PSCopy todir="${install.dir}">
					<fileset dir="${toolsdir}/Tomcat/Scripts">
						<exclude name="**/*.bat" />
					</fileset>
				</PSCopy>
			</then>
		</if>

		<!-- Copy any DTS binaries -->
		<PSCopy todir="${install.dir}/Deployment/Server/bin" overwrite="true">
			<fileset dir="${release.tomcatdir}/dts/bin">
				<include name="**/*" />
			</fileset>
		</PSCopy>
		<if>
			<and>
				<equals arg1="${os}" arg2="windows" />
				<equals arg1="${os.bitness}" arg2="64" />
			</and>
			<then>
				<PSCopy todir="${install.dir}/Deployment/Server/bin" overwrite="true">
					<fileset dir="${release.tomcatdir}/dts/bin64">
						<include name="**/*" />
					</fileset>
				</PSCopy>
			</then>
		</if>



		<!-- configuring tomcat to use log4j for logging -->
		<PSCopy todir="${install.dir}/Deployment/Server/lib">
			<fileset dir="${release.tomcatdir}/log4j">
				<include name="tomcat-juli-adapters.jar" />
			</fileset>
		</PSCopy>
		<delete file="${install.dir}/Deployment/Server/bin/tomcat-juli.jar" quiet="true" />
		<PSCopy todir="${install.dir}/Deployment/Server/bin">
			<fileset dir="${release.tomcatdir}/log4j">
				<include name="tomcat-juli.jar" />
			</fileset>
		</PSCopy>

		<delete file="${install.dir}/Deployment/Server/conf/logging.properties" quiet="true" />
		
		<!-- Sample Property Files -->
		<!-- Copy Sample "perc-secured-sections.properties" -->
		<mkdir dir="${install.dir}/Deployment/Server/conf/perc" />
		<PSCopy tofile="${install.dir}/Deployment/Server/conf/perc/perc-secured-sections.properties.sample" file="${projects.dir}/sitemanage/src/main/resources/Rhythmyx/sys_resources/webapps/secure/conf/perc/perc-secured-sections.properties" overwrite="true" />
		<!-- Copy Sample "perc-encryption.properties" -->
		<PSCopy tofile="${install.dir}/Deployment/Server/conf/perc/perc-encryption.properties.sample" file="${projects.dir}/sitemanage/src/main/resources/Rhythmyx/sys_resources/webapps/secure/conf/perc/perc-encryption.properties" overwrite="true" />
		<!-- Copy Sample "perc-email.properties" -->
		<PSCopy tofile="${install.dir}/Deployment/Server/conf/perc/perc-email.properties.sample" file="${projects.dir}/sitemanage/src/main/resources/Rhythmyx/sys_resources/webapps/secure/conf/perc/perc-email.properties" overwrite="true" />
		
		<PSCopy todir="${install.dir}/Deployment/Server/conf/perc/" overwrite="false">
			<fileset dir="${basedir}/installResources/dts/">
					<include name="**/*log4j2*" />
			</fileset>
		</PSCopy>
		<!-- Remove existing sample files -->
		<delete file="${install.dir}/Deployment/Server/conf/perc/perc-datasource.xml.sample" quiet="true" />
		<delete file="${install.dir}/Deployment/Server/conf/perc/perc-datasource.properties.sample" quiet="true" />
		
		<!-- Copy Sample "datasource files" -->
		<PSCopy todir="${install.dir}/Deployment/Server/conf/perc/" overwrite="true">
			<fileset dir="${basedir}/installResources/dts/">
				<include name="**/*perc-datasources*" />
			</fileset>
		</PSCopy>

		<!-- copy perc-metadata-services.properties.sample -->
		<PSCopy todir="${install.dir}/Deployment/Server/conf/perc/" overwrite="true">
			<fileset dir="${basedir}/installResources/dts/">
				<include name="perc-metadata-services.properties.sample" />
			</fileset>
		</PSCopy>		
	
		<!-- copy jars to tomcat lib -->
        <copy todir="${install.lib.dep}" verbose="true" failonerror="true" overwrite="true">
			  <fileset dir="${basedir}/../deliverytiersuite/delivery-tier-suite/tomcat-common/target" includes="*.jar"/>
		</copy>		
        <copy todir="${install.lib.dep}" verbose="true" failonerror="true" overwrite="true">
			  <fileset dir="${basedir}/../deliverytiersuite/delivery-tier-suite/common/target" includes="*.jar"/>
		</copy>
        <copy todir="${install.lib.dep}" verbose="true" failonerror="true" overwrite="true">
			  <fileset dir="${basedir}/../deliverytiersuite/delivery-tier-suite/caching/target" includes="*.jar"/>
		</copy>

		<!-- copy robots.txt -->
		<copy todir="${install.Dep.Webapps}/ROOT" file="${basedir}/installResources/robots.txt" verbose="true" failonerror="false" overwrite="true"></copy>

		<!-- copy wars to tomcat and clean extracted wars -->
		<delete dir="${install.Dep.Webapps}/feeds" quiet="true" />
		<PSCopy todir="${install.Dep.Webapps}" file="${basedir}/../deliverytiersuite/delivery-tier-suite/feeds/target/feeds.war" />
		<delete dir="${install.Dep.Webapps}/perc-membership-services" quiet="true" />
		<PSCopy todir="${install.Dep.Webapps}" file="${basedir}/../deliverytiersuite/delivery-tier-suite/membership/target/perc-membership-services.war" />
		<PSCopy todir="${install.Dep.Webapps}" file="${basedir}/../deliverytiersuite/delivery-tier-suite/comments/src/main/resources/profanity.txt" replaceType="never" />
		<delete dir="${install.Dep.Webapps}/perc-metadata-services" quiet="true" />
		<PSCopy todir="${install.Dep.Webapps}" file="${basedir}/../deliverytiersuite/delivery-tier-suite/metadata/target/perc-metadata-services.war" />
		<delete dir="${install.Dep.Webapps}/perc-metadata-extractor" quiet="true" />
		<delete dir="${install.Dep.Webapps}/caching" quiet="true" />
		<PSCopy todir="${install.Dep.Webapps}" file="${basedir}/../deliverytiersuite/delivery-tier-suite/caching/target/perc-caching.war" />
		<delete dir="${install.Dep.Webapps}/perc-comments-services" quiet="true" />
		<PSCopy todir="${install.Dep.Webapps}" file="${basedir}/../deliverytiersuite/delivery-tier-suite/comments/target/perc-comments-services.war" />
		<delete dir="${install.Dep.Webapps}/perc-polls-services" quiet="true" />
		<PSCopy todir="${install.Dep.Webapps}" file="${basedir}/../deliverytiersuite/delivery-tier-suite/polls/target/perc-polls-services.war" />
		<delete dir="${install.Dep.Webapps}/perc-form-processor" quiet="true" />
		<PSCopy todir="${install.Dep.Webapps}" file="${basedir}/../deliverytiersuite/delivery-tier-suite/forms/target/perc-form-processor.war" />
		<delete dir="${install.Dep.Webapps}/perc-integrations" quiet="true" />
		<PSCopy todir="${install.Dep.Webapps}" file="${basedir}/../deliverytiersuite/delivery-tier-suite/integrations/target/perc-integrations.war" />

		<!-- Unzip perc-common-ui to tomcat for xdm support -->
		<unzip src="${basedir}/../delivery/common/build/dist/perc-common-ui.zip" dest="${install.dir}/Deployment/Server/webapps/" />
		<delete dir="${install.dir}/Deployment/Server/webapps/perc-common-ui/js/" quiet="true" />

		<!-- Configure server.xml -->
		<delete file="${install.dir}/Deployment/Server/conf/serverTmp.xml" failonerror="false" />
		<xslt style="${basedir}/installResources/dts/updateServerXml.xsl" in="${install.dir}/Deployment/Server/conf/server.xml" out="${install.dir}/Deployment/Server/conf/serverTmp.xml" />
		
		<!-- backup server.xml -->
		<copy file="${install.dir}/Deployment/Server/conf/server.xml" tofile="${install.dir}/Deployment/Server/conf/server.xml.bak" overwrite="true" failonerror="false" />
		<move file="${install.dir}/Deployment/Server/conf/serverTmp.xml" tofile="${install.dir}/Deployment/Server/conf/server.xml" />

		<!-- Configure server.xml to change ports if server is of type staging -->
		<echo message="Configuring server.xml with install type = ${install.type} and dts servertype = ${dts.servertype}" />
		<if>
			<and>
				<equals arg1="${install.type}" arg2="new" />
				<equals arg1="${dts.servertype}" arg2="staging"/>
			</and>
			<then>
				<!-- Replace the server.xml ports -->
				<!-- SERVER Port -->
				<replace file="${install.dir}/Deployment/Server/conf/server.xml" token="9981" value="9971" />
				<!-- HTTP Port -->
				<replace file="${install.dir}/Deployment/Server/conf/server.xml" token="9980" value="9970" />
				<!-- SSL Port -->
				<replace file="${install.dir}/Deployment/Server/conf/server.xml" token="8443" value="9443" />
				<!-- AJP Port -->
				<replace file="${install.dir}/Deployment/Server/conf/server.xml" token="9982" value="9972" />
			</then>
		</if>
        


	    <if>
	        <or>
	            <istrue value="${env.DO_SAAS}"/>
	            <equals arg1="${doSAAS}" arg2="yes"/>
	            <equals arg1="${doSAAS}" arg2="true"/>
	        </or>
	      	<then>
                <antcall target="installDTSConfigmgr" inheritrefs="true" />
	        </then>
	    </if>
	</target>
	
							
    <target name="installDTSConfigmgr">   
        <delete dir="${configmgr.install.dir}" failonerror="false" Includeemptydirs="true"/>
        <PSCopy todir="${configmgr.install.dir}">
            <fileset dir="${basedir}/../deliverytiersuite/delivery-tier-suite/configmgr">
                <include name="**/*" />
            </fileset>
        </PSCopy>
    </target>
</project>
