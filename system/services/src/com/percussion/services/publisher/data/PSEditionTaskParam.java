/*
 *     Percussion CMS
 *     Copyright (C) 1999-2020 Percussion Software, Inc.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Affero General Public License for more details.
 *
 *     Mailing Address:
 *
 *      Percussion Software, Inc.
 *      PO Box 767
 *      Burlington, MA 01803, USA
 *      +01-781-438-9900
 *      support@percussion.com
 *      https://www.percussion.com
 *
 *     You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>
 */
package com.percussion.services.publisher.data;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Version;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * PsxEditionTaskParam generated by MyEclipse Persistence Tools
 */
@Entity
@Table(name = "PSX_EDITION_TASK_PARAM")
public class PSEditionTaskParam implements java.io.Serializable
{
   /**
    * Required serial number for serialized objects. 
    */
   private static final long serialVersionUID = 2251286993400776508L;

   /**
    * The id of the specific parameter.
    */
   @Id
   private Long taskParamId;
   
   /**
    * The foreign key of the owning
    */
   @Basic
   @Column(name = "TASK_ID")
   private Long taskId;
   
   /**
    * Hibernate version column
    */
   @Version
   Integer version;

   /**
    * The name of the property, unique for a given task.
    */
   @Basic
   private String name;

   /**
    * The value of the property
    */
   @Basic
   private String value;

   /**
    * Ctor
    */
   public PSEditionTaskParam() {
   }

   /**
    * The id of this task parameter.
    * 
    * @return the id, never <code>null</code> for a persisted object.
    */
   public Long getTaskParamId()
   {
      return this.taskParamId;
   }

   /**
    * Set the id of this task parameter.
    * @param taskParamId the id, never <code>null</code>.
    */
   public void setTaskParamId(Long taskParamId)
   {
      if (taskParamId == null)
      {
         throw new IllegalArgumentException("taskParamId may not be null");
      }
      this.taskParamId = taskParamId;
   }

   /**
    * Get the id of the parent task.
    * 
    * @return the id of the parent task, never <code>null</code> for a parameter
    * that is saved and connected to a task.
    */
   public Long getTaskId()
   {
      return this.taskId;
   }

   /**
    * Set the task id.
    * 
    * @param taskId the task id, might be <code>null</code> to disconnect a 
    * parameter from a task.
    */
   public void setTaskId(Long taskId)
   {
      this.taskId = taskId;
   }

   /**
    * Get the name of the parameter.
    * @return the name, never <code>null</code> or empty for a saved instance.
    */
   public String getName()
   {
      return this.name;
   }

   /**
    * Set the name.
    * @param name the name, never <code>null</code> or empty.
    */
   public void setName(String name)
   {
      if (StringUtils.isBlank(name))
      {
         throw new IllegalArgumentException(
               "name may not be null or empty");
      }
      this.name = name;
   }

   /**
    * Get the value of the parameter.
    * @return the value
    */
   public String getValue()
   {
      return this.value;
   }

   /**
    * Set the value of the parameter.
    * 
    * @param value the value, <code>null</code> or empty values will be removed.
    */
   public void setValue(String value)
   {
      this.value = value;
   }
   
   /* (non-Javadoc)
    * @see java.lang.Object#equals(java.lang.Object)
    */
   @Override
   public boolean equals(Object obj)
   {
      if (!(obj instanceof PSEditionTaskParam))
         return false;
      PSEditionTaskParam etp = (PSEditionTaskParam) obj;
      
      EqualsBuilder builder = new EqualsBuilder()
         .append(taskParamId, etp.taskParamId)
         .append(taskId, etp.taskId)
         .append(version, etp.version)
         .append(name, etp.name)
         .append(value, etp.value);

      return builder.isEquals();
   }
   
   /* (non-Javadoc)
    * @see java.lang.Object#hashCode()
    */
   @Override
   public int hashCode()
   {
      return new HashCodeBuilder().append(name).toHashCode();
   }
}
