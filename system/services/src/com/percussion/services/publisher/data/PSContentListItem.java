/*
 * Copyright 1999-2023 Percussion Software, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.percussion.services.publisher.data;

import com.percussion.services.assembly.jexl.PSLocationUtils;
import com.percussion.services.filter.data.PSFilterItem;
import com.percussion.utils.guid.IPSGuid;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

import java.util.Objects;

/**
 * One item to add to the content list. This class is used by the template
 * expander {@link com.percussion.services.publisher.IPSTemplateExpander} to 
 * communicate to the content list generator.
 * 
 * @author dougrand
 *
 */
public class PSContentListItem extends PSFilterItem
{
   /**
    * Used for generating pub locations
    */
   private static PSLocationUtils ms_locationutils = null;
   
   /**
    * The template to use with the item
    */
   private IPSGuid m_templateId;
   
   /**
    * The content 
    */
   private int m_deliveryContextId;
   
   /**
    * The location, calculated on construction
    */
   private String m_location;
   
   /**
    * For overriding subclasses that do not
    * want to use the public constructor.
    */
   protected PSContentListItem() 
   {
   }
   
   /**
    * Constructor.
    * @param cid the content GUID, never <code>null</code>
    * @param fid the folder GUID, may be <code>null</code>. The folder GUID
    * is typically a content GUID with a revision of <code>0</code>.
    * @param tid the template GUID, never <code>null</code>
    * @param siteid the site id, may be <code>null</code>
    * @param deliveryContextId the delivery context
    */
   public PSContentListItem(IPSGuid cid, IPSGuid fid, IPSGuid tid,
         IPSGuid siteid, int deliveryContextId)
   {
      super(cid, fid, siteid);
      if (tid == null)
      {
         throw new IllegalArgumentException("tid may not be null");
      }
      m_templateId = tid;
      m_deliveryContextId = deliveryContextId;
      m_location = null;
   }
   
   //see base class
   @Override
   public PSContentListItem clone()
   {
      return (PSContentListItem)super.clone();
   }

   /**
    * @return Returns the contentId.
    * @deprecated use {@link #getItemId()} instead.
    */
   public IPSGuid getContentId()
   {
      return getItemId();
   }

   /**
    * @return Returns the templateId.
    */
   public IPSGuid getTemplateId()
   {
      return m_templateId;
   }
   
   public void setTemplateId(IPSGuid templateId) {
      this.m_templateId = templateId;
   }

   /**
    * The ID of the delivery context.
    * @return Returns the ID of the delivery context.
    */
   public int getContext()
   {
      return m_deliveryContextId;
   }
   
   public void setContext(int contextId) {
      this.m_deliveryContextId = contextId;
   }

   /**
    * The delivery location which is typically generated by location generator.
    * @return the delivery location, which is relative to the publish root if
    * the target site.
    */
   public String getLocation()
   {
      if (m_location == null)
      {
         m_location = getLocationUtils().generate(this);
      }
      return m_location;
   }
   
   /**
    * Set the delivery location, used to set the location externally as is done 
    * for the unpublish location.
    * @param location the delivery location, never <code>null</code> or empty
    */
   public void setLocation(String location)
   {
      if (StringUtils.isBlank(location))
      {
         throw new IllegalArgumentException("location may not be null or empty");
      }
      m_location = location;
   }


   @Override
   public boolean equals(Object o) {
      if (this == o) return true;
      if (!(o instanceof PSContentListItem)) return false;
      if (!super.equals(o)) return false;
      PSContentListItem that = (PSContentListItem) o;
      return m_deliveryContextId == that.m_deliveryContextId && Objects.equals(m_templateId, that.m_templateId) && Objects.equals(m_location, that.m_location);
   }

   @Override
   public int hashCode() {
      return Objects.hash(super.hashCode(), m_templateId, m_deliveryContextId, m_location);
   }

   /**
    * (non-Javadoc)
    *
    * @see Object#toString()
    */
   @Override
   public String toString() {
      final StringBuffer sb = new StringBuffer("PSContentListItem{");
      sb.append("m_templateId=").append(m_templateId);
      sb.append(", m_deliveryContextId=").append(m_deliveryContextId);
      sb.append(", m_location='").append(m_location).append('\'');
      sb.append('}');
      return sb.toString();
   }

   /**
    * Lookup location utils on demand
    * 
    * @return location utils, never <code>null</code>
    */
   private PSLocationUtils getLocationUtils()
   {
      if (ms_locationutils == null)
      {
         ms_locationutils = new PSLocationUtils();
      }
      return ms_locationutils;
   }
}
