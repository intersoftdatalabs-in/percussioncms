<!--
  ~     Percussion CMS
  ~     Copyright (C) 1999-2020 Percussion Software, Inc.
  ~
  ~     This program is free software: you can redistribute it and/or modify
  ~     it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
  ~
  ~     This program is distributed in the hope that it will be useful,
  ~     but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~     GNU Affero General Public License for more details.
  ~
  ~     Mailing Address:
  ~
  ~      Percussion Software, Inc.
  ~      PO Box 767
  ~      Burlington, MA 01803, USA
  ~      +01-781-438-9900
  ~      support@percussion.com
  ~      https://www.percussion.com
  ~
  ~     You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:cxf="http://cxf.apache.org/core"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
http://cxf.apache.org/core
http://cxf.apache.org/schemas/core.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-4.2.xsd
http://cxf.apache.org/jaxrs
http://cxf.apache.org/schemas/jaxrs.xsd
http://www.springframework.org/schema/util
http://www.springframework.org/schema/util/spring-util.xsd">


    <tx:annotation-driven transaction-manager="sys_transactionManager"/>

    <context:component-scan base-package="com.percussion" use-default-filters="false">
        <context:include-filter type="annotation" expression="com.percussion.util.PSBaseBean"/>
        <context:exclude-filter type="annotation"
                                expression="com.percussion.utils.annotations.IgnoreInWebAppSpringContext"/>

    </context:component-scan>
    <!--
       <bean id="sys_guidmanager"
             class="com.percussion.services.guidmgr.impl.PSGuidManager">
          <property name="sessionFactory">
             <ref bean="sys_sessionFactory" />
          </property>
       </bean>
       -->
    <!--
       <bean id="sys_cmsObjectMgr"
             class="com.percussion.services.legacy.impl.PSCmsObjectMgr">
          <property name="sessionFactory">
             <ref bean="sys_sessionFactory" />
          </property>
       </bean>
    -->
    <!--
    <bean id="sys_aclService"
          class="com.percussion.services.security.impl.PSAclService">
       <property name="sessionFactory">
          <ref bean="sys_sessionFactory" />
       </property>
       <property name="grantDefaultCommunityVisibility" value="true"/>
    </bean>
 -->

    <bean id="sys_deployService"
          class="com.percussion.deploy.services.impl.PSDeployService">
    </bean>

    <bean id="sys_loginMgr"
          class="com.percussion.services.security.loginmods.impl.PSLoginMgr">
    </bean>

    <bean id="sys_contentManager"
          class="com.percussion.services.contentmgr.impl.PSContentMgr">
        <property name="repository" ref="sys_legacyContentRepository"/>
    </bean>

    <bean id="sys_assemblyService"
          class="com.percussion.services.assembly.impl.PSAssemblyService">
        <property name="notificationService">
            <ref bean="sys_notificationService" />
        </property>
        <property name="cache">
            <ref bean="sys_cacheAccessor" />
        </property>
        <property name="configurationBean">
            <ref bean="sys_beanConfiguration" />
        </property>
    </bean>
    <!--
    <bean id="sys_assemblyWs"
          class="com.percussion.webservices.assembly.impl.PSAssemblyWs">
       <property name="sessionFactory">
          <ref bean="sys_sessionFactory" />
       </property>
    </bean>
 -->
    <!--
    <bean id="sys_assemblyDesignWs"
          class="com.percussion.webservices.assembly.impl.PSAssemblyDesignWs">
       <property name="sessionFactory">
          <ref bean="sys_sessionFactory" />
       </property>
       <property name="cache">
          <ref bean="sys_cacheAccessor" />
       </property>
    </bean>
 -->
    <bean id="sys_contentService"
          class="com.percussion.services.content.impl.PSContentService">
    </bean>

    <bean id="sys_contentWs"
          class="com.percussion.webservices.content.impl.PSContentWs">
        <property name="sessionFactory" ref="sys_sessionFactory"/>
    </bean>

    <bean id="sys_contentDesignWs"
          class="com.percussion.webservices.content.impl.PSContentDesignWs">
        <property name="sessionFactory" ref="sys_sessionFactory"/>
        <property name="contentMgr" ref="sys_contentManager"/>
    </bean>

    <bean id="sys_publishingWs"
          class="com.percussion.webservices.publishing.impl.PSPublishingWs">
        <property name="filterSvc" ref="sys_filtermanager"/>
        <property name="pubSvc" ref="sys_publisherservice"/>
        <property name="siteMgr" ref="sys_sitemanager"/>
        <property name="pubServerDao" ref="sys_pubserverdao"/>
    </bean>

    <bean id="sys_dbPubServerFileService"
          class="com.percussion.services.pubserver.impl.PSDatabasePubServerFilesService"/>

    <bean id="sys_securityWs"
          class="com.percussion.webservices.security.impl.PSSecurityWs">
        <property name="sessionFactory" ref="sys_sessionFactory"/>
    </bean>

    <bean id="sys_securityDesignWs"
          class="com.percussion.webservices.security.impl.PSSecurityDesignWs">
        <property name="sessionFactory" ref="sys_sessionFactory"/>
    </bean>

    <bean id="sys_systemWs"
          class="com.percussion.webservices.system.impl.PSSystemWs">
    </bean>

    <bean id="sys_systemDesignWs"
          class="com.percussion.webservices.system.impl.PSSystemDesignWs">
    </bean>

    <bean id="sys_workflowService"
          class="com.percussion.services.workflow.impl.PSWorkflowService">
        <constructor-arg type="com.percussion.services.memory.IPSCacheAccess" ref="sys_cacheAccessor"/>
        <constructor-arg type="com.percussion.services.guidmgr.IPSGuidManager" ref="sys_guidmanager"/>
    </bean>

    <bean id="sys_uiService"
          class="com.percussion.services.ui.impl.PSUiService">
    </bean>

    <bean id="sys_uiWs"
          class="com.percussion.webservices.ui.impl.PSUiWs">
        <property name="sessionFactory" ref="sys_sessionFactory"/>
    </bean>

    <bean id="sys_uiDesignWs"
          class="com.percussion.webservices.ui.impl.PSUiDesignWs">
        <property name="sessionFactory" ref="sys_sessionFactory"/>
        <property name="cache" ref="sys_cacheAccessor"/>
    </bean>

    <!-- This bean creates its own session factory as it's configured -->
    <bean id="sys_legacyContentRepository"
          destroy-method="destroy"
          class="com.percussion.services.contentmgr.impl.legacy.PSContentRepository">
        <property name="datasourceManager" ref="sys_datasourceManager"/>
        <property name="sessionFactory" ref="sys_sessionFactory"/>
    </bean>

    <bean id="sys_relationshipService"
          class="com.percussion.services.relationship.impl.PSRelationshipService">
    </bean>

    <bean id="sys_filtermanager"
          class="com.percussion.services.filter.impl.PSFilterManager">
    </bean>

    <bean id="sys_sitemanager"
          class="com.percussion.services.sitemgr.impl.PSSiteManager">
        <property name="notifications" ref="sys_notificationService"/>
        <property name="cache" ref="sys_cacheAccessor"/>
    </bean>
    <bean id="sys_searchindexqueue"
          class="com.percussion.search.impl.PSSearchIndexQueue">
    </bean>

    <bean id="sys_pubserverdao"
          class="com.percussion.services.pubserver.impl.PSPubServerDao">
    </bean>

    <bean id="sys_siteRenameListener"
          class="com.percussion.services.siterename.impl.PSSiteRenameListener">
        <constructor-arg ref="sys_notificationService" />
        <constructor-arg ref="sys_deliveryInfoService" />
    </bean>

    <!-- Hibernate support beans -->
    <bean id="sys_transactionManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sys_sessionFactory"/>
    </bean>

    <bean id="sys_sessionFactory"
          depends-on="sys_cacheManager"
          class="com.percussion.services.datasource.PSSessionFactoryBean">

        <property name="packagesToScan" value="com.percussion"/>

        <!-- Uncomment for debugging hibernate events
        <property name="interceptEvents">
        <list>
           <value>delete</value>
           <value>persist</value>
           <value>load</value>
        </list>
        </property>
         -->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.current_session_context_class">
                    org.springframework.orm.hibernate5.SpringSessionContext
                </prop>
                <prop key="spring.jpa.hibernate.naming.implicit-strategy">
                    org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
                </prop>
                <prop key="spring.jpa.hibernate.naming.physical-strategy">
                    com.percussion.services.datasource.UpperCaseNamingStrategy
                </prop>
                <prop key="hibernate.implicit_naming_strategy">
                    org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
                </prop>
                <prop key="hibernate.physical_naming_strategy">
                    com.percussion.services.datasource.UpperCaseNamingStrategy
                </prop>
                <prop key="hibernate.cache.region.factory_class">
                    org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory
                </prop>
                <prop key="hibernate.cache.use_query_cache">
                    true
                </prop>
                <prop key="hibernate.jdbc.batch_size">
                    50
                </prop>
                <prop key="hibernate.show_sql">
                    false
                </prop>
                <prop key="hibernate.generate_statistics">
                    false
                </prop>
            </props>
        </property>
        <property name="datasourceManager" ref="sys_datasourceManager"/>
        <property name="dialects" ref="sys_hibernateDialects"/>
    </bean>

    <bean id="sys_cacheManager"
          class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="shared" value="true"/>
        <property name="cacheManagerName" value="sys_cacheManager"/>
        <property name="configLocation" value="classpath:/ehcache.xml"/>
    </bean>

    <bean id="sys_datasourceManager"
          class="com.percussion.services.datasource.impl.PSDatasourceManager">
        <property name="defaultHibernateProperties">
            <props>


                <prop key="hibernate.current_session_context_class">
                    org.springframework.orm.hibernate5.SpringSessionContext
                </prop>


                <prop key="spring.jpa.hibernate.naming.implicit-strategy">
                    org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
                </prop>
                <prop key="spring.jpa.hibernate.naming.physical-strategy">
                    com.percussion.services.datasource.UpperCaseNamingStrategy
                </prop>
                <prop key="hibernate.implicit_naming_strategy">
                    org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
                </prop>
                <prop key="hibernate.physical_naming_strategy">
                    com.percussion.services.datasource.UpperCaseNamingStrategy
                </prop>
                <prop key="hibernate.cache.region.factory_class">
                    org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory
                </prop>
                <prop key="hibernate.cache.use_query_cache">
                    true
                </prop>
                <prop key="hibernate.jdbc.batch_size">
                    50
                </prop>
                <prop key="hibernate.show_sql">
                    false
                </prop>
                <prop key="hibernate.generate_statistics">
                    false
                </prop>
            </props>
        </property>
        <property name="dialectCfg" ref="sys_hibernateDialects"/>


    </bean>

    <bean id="sys_connectionHelper"
          class="com.percussion.utils.jdbc.PSConnectionHelper"
          factory-method="createInstance">
        <constructor-arg ref="sys_datasourceManager"/>
    </bean>
    <!--
       <bean id="sys_backEndRoleMgr"
             class="com.percussion.services.security.impl.PSBackEndRoleMgr">
          <property name="sessionFactory">
             <ref bean="sys_sessionFactory" />
          </property>
       </bean>
    -->
    <!--
    <bean id="sys_cacheAccessor"
          class="com.percussion.services.memory.impl.PSEhCacheAccessor">
       <property name="notificationService">
          <ref bean="sys_notificationService"/>
       </property>
    </bean>
 -->
    <bean id="sys_lockingService"
          class="com.percussion.services.locking.impl.PSObjectLockService">
    </bean>

    <bean id="sys_WebServiceSecurityInterceptor"
          class="com.percussion.webservices.aop.security.PSSecurityInterceptor"/>

    <bean id="sys_WebServiceSecurityClassFilter"
          class="com.percussion.webservices.aop.security.PSSecurityClassFilter"/>

    <bean id="sys_WebServiceSecurityAdvisor"
          class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
        <property name="mappedNames">
            <list>
                <value>save*</value>
                <value>load*</value>
                <value>delete*</value>
                <value>find*</value>
            </list>
        </property>
        <property name="classFilter" ref="sys_WebServiceSecurityClassFilter"/>
        <property name="advice" ref="sys_WebServiceSecurityInterceptor"/>
    </bean>

    <bean id="sys_autoProxyCreator"
          class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>

    <bean id="webServiceAuthorizationInterceptor"
          class="com.percussion.webservices.aop.authorization.PSAuthorizationInterceptor"/>

    <bean id="webServiceAuthorizationClassFilter"
          class="com.percussion.webservices.aop.authorization.PSAuthorizationClassFilter"/>

    <bean id="webServiceAuthorizationAdvisor"
          class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
        <property name="mappedNames">
            <list>
                <value>create*</value>
                <value>load*</value>
                <value>delete*</value>
                <value>save*</value>
            </list>
        </property>
        <property name="classFilter" ref="webServiceAuthorizationClassFilter"/>
        <property name="advice" ref="webServiceAuthorizationInterceptor"/>
    </bean>

    <bean id="sys_dataCollectionBean"
          class="com.percussion.services.utils.orm.PSDataCollectionHelper">
        <constructor-arg ref="sys_sessionFactory"/>
    </bean>

    <!--<bean id="sys_roleMgr"-->
    <!--class="com.percussion.services.security.impl.PSRoleMgr">-->
    <!--</bean>-->

    <bean id="sys_notificationService"
          class="com.percussion.services.notification.impl.PSNotificationService">
    </bean>

    <bean id="sys_messageQueueService"
          class="com.percussion.services.notification.impl.PSMessageQueueService">
        <property name="queueSender" ref="sys_notificationQueueSender"/>
    </bean>

    <bean id="sys_jmsConnectionFactory"
          class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="java:comp/env/jms/ConnectionFactory"/>
        <property name="lookupOnStartup" value="false"/>
        <property name="cache" value="true"/>
        <property name="proxyInterface" value="javax.jms.QueueConnectionFactory"/>
    </bean>

    <bean id="sys_crossSiteRemoveQL" class="com.percussion.services.touchitem.impl.PSCrossSiteRemoveQueueListener">
        <property name="messageQueueService" ref="sys_messageQueueService"/>
    </bean>
    <bean id="sys_crossSiteMoveQL" class="com.percussion.services.touchitem.impl.PSCrossSiteMoveQueueListener">
        <property name="messageQueueService" ref="sys_messageQueueService"/>
    </bean>
    <bean id="sys_touchItemQL" class="com.percussion.services.touchitem.impl.PSTouchItemQueueListener">
        <property name="messageQueueService" ref="sys_messageQueueService"/>
    </bean>
    <!--
       <bean id="sys_publisherservice"
             class="com.percussion.services.publisher.impl.PSPublisherService" init-method="init">
          <property name="sessionFactory">
             <ref bean="sys_sessionFactory" />
          </property>
          <property name="configurationBean">
             <ref bean="sys_beanConfiguration" />
          </property>
          <property name="rxpub">
             <ref bean="sys_rxpublisherservice" />
          </property>
       </bean>
    -->
    <bean id="sys_rxpublisherservice"
          class="com.percussion.rx.publisher.impl.PSRxPublisherService">
        <property name="publishSenderFactory" ref="sys_publishQueueSenderFactory"/>
        <property name="configurationBean" ref="sys_beanConfiguration"/>
    </bean>


    <bean id="sys_touchItemService"
          class="com.percussion.services.touchitem.impl.PSTouchItemService">
        <constructor-arg type="com.percussion.webservices.content.IPSContentWs" ref="sys_contentWs"/>
        <constructor-arg type="com.percussion.services.guidmgr.IPSGuidManager" ref="sys_guidmanager"/>
        <constructor-arg type="com.percussion.webservices.system.IPSSystemWs" ref="sys_systemWs"/>
        <constructor-arg type="com.percussion.services.legacy.IPSCmsObjectMgr" ref="sys_cmsObjectMgr"/>
        <constructor-arg type="com.percussion.fastforward.managednav.IPSManagedNavService" ref="sys_managedNavService"/>
    </bean>

    <bean id="sys_publishQueueSender"
          class="com.percussion.services.jms.impl.PSQueueSender" scope="prototype">
        <property name="connectionFactory" ref="sys_jmsConnectionFactory"/>
        <property name="destination" ref="sys_publishQueueDestination"/>
    </bean>

    <bean id="sys_publishQueueSenderFactory"
          class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
        <property name="targetBeanName">
            <idref bean="sys_publishQueueSender"/>
        </property>
    </bean>

    <bean id="sys_emailQueueSender"
          class="com.percussion.services.jms.impl.PSQueueSender">
        <property name="connectionFactory" ref="sys_jmsConnectionFactory"/>
        <property name="destination" ref="sys_emailQueueDestination"/>
    </bean>

    <bean id="sys_notificationQueueSender"
          class="com.percussion.services.jms.impl.PSQueueSender">
        <property name="connectionFactory" ref="sys_jmsConnectionFactory"/>
        <property name="destination" ref="sys_notificationQueueDestination"/>
    </bean>

    <bean id="sys_systemService"
          class="com.percussion.services.system.impl.PSSystemService">
        <constructor-arg type="com.percussion.services.workflow.IPSWorkflowService" ref="sys_workflowService"/>
        <constructor-arg type="com.percussion.services.guidmgr.IPSGuidManager" ref="sys_guidmanager"/>
        <constructor-arg type="com.percussion.utils.jdbc.IPSDatasourceManager" ref="sys_datasourceManager"/>
        <constructor-arg type="com.percussion.services.legacy.IPSCmsObjectMgr" ref="sys_cmsObjectMgr"/>
        <property name="emailSender" ref="sys_emailQueueSender"/>
    </bean>

    <bean id="sys_emailQueueDestination"
          class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="java:comp/env/queue/emailQueue"/>
        <property name="lookupOnStartup" value="false"/>
        <property name="cache" value="true"/>
        <property name="proxyInterface" value="javax.jms.Queue"/>
    </bean>

    <bean id="sys_notificationQueueDestination"
          class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="java:comp/env/queue/notificationQueue"/>
        <property name="lookupOnStartup" value="false"/>
        <property name="cache" value="true"/>
        <property name="proxyInterface" value="javax.jms.Queue"/>
    </bean>

    <bean id="sys_publishQueueDestination"
          class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="java:comp/env/queue/publishQueue"/>
        <property name="lookupOnStartup" value="false"/>
        <property name="cache" value="true"/>
        <property name="proxyInterface" value="javax.jms.Queue"/>
    </bean>

    <bean id="sys_managedNavService"
          class="com.percussion.fastforward.managednav.PSManagedNavService">
        <constructor-arg type="com.percussion.webservices.content.IPSContentWs" ref="sys_contentWs"/>
        <constructor-arg type="com.percussion.webservices.content.IPSContentDesignWs" ref="sys_contentDesignWs"/>
        <constructor-arg type="com.percussion.services.guidmgr.IPSGuidManager" ref="sys_guidmanager"/>
        <constructor-arg type="com.percussion.services.assembly.IPSAssemblyService" ref="sys_assemblyService"/>
        <constructor-arg type="com.percussion.services.legacy.IPSCmsObjectMgr" ref="sys_cmsObjectMgr"/>
    </bean>

    <bean id="sys_publishQueueListener"
          class="com.percussion.rx.publisher.impl.PSPublishHandler">
        <constructor-arg type="com.percussion.rx.publisher.IPSRxPublisherServiceInternal" ref="sys_rxpublisherservice"/>
        <constructor-arg type="com.percussion.rx.delivery.IPSDeliveryManager" ref="sys_deliveryManager"/>
    </bean>

    <bean id="sys_designModelFactory"
          class="com.percussion.rx.design.impl.PSDesignModelFactory">
    </bean>

    <bean id="sys_fileMonitorService"
          class="com.percussion.services.notification.filemonitor.impl.PSFileMonitorService">
    </bean>

    <!--  Uncomment to add profiling to services, adjust the expression(s) to
        customize what methods are hooked
    <bean id="sys_profiler"
        class="com.percussion.utils.timing.PSStopwatchStack" />
     <aop:config>
         <aop:aspect id="profilingAspect1" ref="sys_profiler">
             <aop:pointcut id="serviceMethods1"
                           expression="execution(* com.percussion.services..impl.*Service.*(..))"/>
             <aop:around method="profile" pointcut-ref="serviceMethods1"/>
         </aop:aspect>
         <aop:aspect id="profilingAspect2" ref="sys_profiler">
             <aop:pointcut id="serviceMethods2"
                           expression="execution(* com.percussion.services..impl.*Mgr.*(..))"/>
             <aop:around method="profile" pointcut-ref="serviceMethods2"/>
         </aop:aspect>
         <aop:aspect id="profilingAspect3" ref="sys_profiler">
             <aop:pointcut id="serviceMethods3"
                           expression="execution(* com.percussion.services..impl.*Manager.*(..))"/>
             <aop:around method="profile" pointcut-ref="serviceMethods3"/>
         </aop:aspect>
     </aop:config>
     -->

    <bean id="sys_proxyConfigService"
          class="com.percussion.proxyconfig.service.impl.PSProxyConfigService"
    />

    <bean id="sys_deliveryInfoService"
          class="com.percussion.delivery.service.impl.PSDeliveryInfoService"
    />
    <bean id="sys_managedLinkDao" class="com.percussion.services.linkmanagement.impl.PSManagedLinkDao">
        <property name="guidManager" ref="sys_guidmanager"/>
    </bean>


    <bean id="sys_siteImportSummaryDao" class="com.percussion.services.siteimportsummary.impl.PSSiteImportSummaryDao">
        <property name="guidManager" ref="sys_guidmanager"/>
    </bean>

    <bean id="sys_userItemsDao" class="com.percussion.services.useritems.impl.PSUserItemsDao">
        <property name="guidManager" ref="sys_guidmanager"/>
    </bean>

    <bean id="sys_widgetBuilderDefinitionDao"
          class="com.percussion.services.widgetbuilder.PSWidgetBuilderDefinitionDao">
        <property name="guidManager" ref="sys_guidmanager"/>
    </bean>

    <bean id="sys_i18nStartupManager" class="com.percussion.i18n.PSI18nStartupManager">
        <property name="notificationService" ref="sys_notificationService"/>
    </bean>

    <bean id="sys_contentChangeService" class="com.percussion.services.contentchange.impl.PSContentChangeService">
        <property name="guidManager" ref="sys_guidmanager"/>
        <property name="notificationService" ref="sys_notificationService"/>
    </bean>

    <bean id="sys_startupProcessManager" class="com.percussion.server.PSStartupProcessManager">
        <property name="notificationService" ref="sys_notificationService"/>
        <property name="propFilePath" value="rxconfig/Server/startupProcessManager.properties"/>
    </bean>

    <bean id="sys_purgeHelper" class="com.percussion.services.purge.impl.PSSqlPurgeHelper">
    </bean>

    <bean id="sys_autotuneCache" class="com.percussion.server.cache.PSAutotuneCache">
        <property name="cacheAccessor" ref="sys_cacheAccessor"/>
    </bean>

    <import resource="classpath:META-INF/cxf/cxf.xml"/>


    <context:annotation-config/>
    <!-- need to move sitemanage to sub package -->
    <context:component-scan
            base-package="com.percussion.recent,com.percussion.redirect,com.percussion.metadata,com.percussion.pathmanagement,com.percussion.integritymanagement,com.percussion.pagemanagement,com.percussion.sitemanage,com.percussion.assetmanagement,com.percussion.utils,com.percussion.searchmanagement,com.percussion.share,com.percussion.user.service.impl,com.percussion.theme,com.percussion.itemmanagement,com.percussion.comments.service.impl,com.percussion.siteimportsummary,com.percussion.pubserver,com.percussion.monitor,com.percussion.apibridge,com.percussion.rest,com.percussion,com.percussion.licensemanagement">
        <context:include-filter type="annotation" expression="com.percussion.util.PSSiteManageBean"/>
        <context:exclude-filter type="annotation" expression="com.percussion.util.PSBaseBean"/>
    </context:component-scan>

    <jaxrs:server id="licensemanagement-jax-rs" address="/licensemanagement">
        <jaxrs:serviceBeans>
            <ref bean="licenseService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
        </jaxrs:features>
    </jaxrs:server>


    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:sitemanage.properties</value>
                <value>file:${jetty.base}/etc/installation.properties</value>
            </list>
        </property>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="searchSystemEnvironment" value="true"/>
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
    </bean>

    <!-- See com.percussion.share.spring.PSSpringWebApplicationContextUtils -->
    <bean id="springWebApplicationContextSetter"
          class="com.percussion.share.spring.PSSpringWebApplicationContextSetter"/>

    <!-- CXF OpenApiFeature -->
    <bean id="openApiFeature" class="org.apache.cxf.jaxrs.openapi.OpenApiFeature">
        <property name="title" value="Percussion CMS REST API"/>
        <property name="version" value="8.1.1-SNAPSHOT"/>
        <property name="description" value="Public REST API"/>
        <property name="contactEmail" value="support@percussion.com"/>
        <property name="contactName" value="Percussion Software" />
        <property name="contactUrl" value="https://support.percussion.com" />
        <property name="runAsFilter" value="false" />
        <property name="license" value="Percussion Standard Agreement"/>
        <property name="licenseUrl" value="https://www.percussion.com/legal/"/>
        <property name="supportSwaggerUi" value="true"/>
        <property name="swaggerUiVersion" value="3.51.2"/>
        <property name="swaggerUiMavenGroupAndArtifact" value="org.webjars.swagger-ui"/>
        <property name="scan" value="false" />
        <property name="readAllResources" value="false" />
        <property name="resourcePackages" value="com.percussion.rest" />
        <property name="useContextBasedConfig" value="true"/>
        <property name="prettyPrint" value="true"/>
        <property name="scannerClass" value="io.swagger.v3.oas.integration.GenericOpenApiScanner"/>
    </bean>

    <!-- Used to Authorize API access -->
    <bean id="authorizationFilter" class="com.percussion.servlets.PSRestApiAuthFilter" />

    <!-- Rest API -->
    <jaxrs:server id="rest-jax-rs" address="/">
        <jaxrs:serviceBeans>
            <ref bean="restAclResource" />
            <ref bean="restActionMenuResource" />
            <ref bean="restCommunityResource"/>
            <ref bean="restDisplayFormatResource" />
            <ref bean="restFoldersResource" />
            <ref bean="restAssetResource" />
            <ref bean="restPagesResource" />
            <ref bean="restContentTypesResource" />
            <ref bean="restContextResource" />
            <ref bean="restDeliveryTypesResource"/>
            <ref bean="restEditionsResource"/>
            <ref bean="restExtensionsResource"/>
            <ref bean="restItemFilterResource"/>
            <ref bean="restJexlResource"/>
            <ref bean="restLocationSchemeResource"/>
            <ref bean="restMimeTypesResource"/>
            <ref bean="restPreferencesResource"/>
            <ref bean="restRolesResource" />
            <ref bean="restSitesResource" />
            <ref bean="restTemplatesResource"/>
            <ref bean="restUsersResource" />
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json" />
            <entry key="xml" value="application/xml" />
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="PSJsonProcessingExceptionMapper" />
            <ref bean="validationExceptionMapper" />
            <ref bean="constraintsViolatedExceptionMapper" />
            <ref bean="runtimeExceptionMapper" />
            <ref bean="jacksonProvider" />
            <ref bean="jacksonContextResolver" />
            <ref bean="authorizationFilter" />
        </jaxrs:providers>
        <jaxrs:features>
            <ref bean="openApiFeature" />
            <cxf:logging/>
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="sitemanage-jax-rs" address="/sitemanage">
        <jaxrs:serviceBeans>
            <ref bean="siteDataRestService"/>
            <ref bean="siteArchitectureDataRestService"/>
            <ref bean="siteSectionRestService"/>
            <ref bean="siteTemplateService"/>
            <ref bean="sitePublishWebAdapter"/>
            <ref bean="sitePublishStatusService"/>
            <ref bean="monitorService"/>
            <ref bean="publishStagingService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="PSJsonProcessingExceptionMapper"/>
            <ref bean="validationExceptionMapper"/>
            <ref bean="constraintsViolatedExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
        </jaxrs:features>

    </jaxrs:server>

    <jaxrs:server id="user-jax-rs" address="/user">
        <jaxrs:serviceBeans>
            <ref bean="userService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="constraintsViolatedExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!--  <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                  <property name="title" value="Test"/>
                  <property name="version" value="1.0"/>
                  <property name="description" value="Test 1.0"/>
                  <property name="contact" value="help@percussion.com"/>

                    <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean> -->
        </jaxrs:features>
    </jaxrs:server>

    <!-- <bean id="categoryContextResolver" class="com.percussion.category.marshaller.PSJAXBContextResolver" /> -->

    <!-- <bean id="jacksonContextResolver" class="com.percussion.sitemanage.json.JacksonContextResolver"> </bean> -->


    <bean id="jacksonProvider" class="com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider">
    </bean>

    <jaxrs:server id="category-jax-rs" address="/categorymanagement">
        <jaxrs:serviceBeans>
            <ref bean="categoryService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="constraintsViolatedExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="categoryContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!--   <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                   <property name="title" value="Test"/>
                   <property name="version" value="1.0"/>
                   <property name="description" value="Test 1.0"/>
                   <property name="contact" value="help@percussion.com"/>

                     <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="role-jax-rs" address="/rolemanagement">
        <jaxrs:serviceBeans>
            <ref bean="roleService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="constraintsViolatedExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!--  <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                  <property name="title" value="Test"/>
                  <property name="version" value="1.0"/>
                  <property name="description" value="Test 1.0"/>
                  <property name="contact" value="help@percussion.com"/>

                    <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="workflowmanagement-jax-rs" address="/workflowmanagement">
        <jaxrs:serviceBeans>
            <ref bean="steppedWorkflowRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="constraintsViolatedExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!-- <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                 <property name="title" value="Test"/>
                 <property name="version" value="1.0"/>
                 <property name="description" value="Test 1.0"/>
                 <property name="contact" value="help@percussion.com"/>

                   <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean> -->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="publishmanagement-jax-rs" address="/publishmanagement">
        <jaxrs:serviceBeans>
            <ref bean="pubServerRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="constraintsViolatedExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!--  <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                  <property name="title" value="Test"/>
                  <property name="version" value="1.0"/>
                  <property name="description" value="Test 1.0"/>
                  <property name="contact" value="help@percussion.com"/>

                    <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="foldermanagement-jax-rs" address="/foldermanagement">
        <jaxrs:serviceBeans>
            <ref bean="folderRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="constraintsViolatedExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!--  <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                  <property name="title" value="Test"/>
                  <property name="version" value="1.0"/>
                  <property name="description" value="Test 1.0"/>
                  <property name="contact" value="help@percussion.com"/>

                    <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="pagemanagement-jax-rs" address="/pagemanagement">
        <jaxrs:serviceBeans>
            <ref bean="templateRestService"/>
            <ref bean="widgetRestService"/>
            <ref bean="pageRestService"/>
            <ref bean="renderLinkService"/>
            <ref bean="renderService"/>
            <ref bean="themeRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="constraintsViolatedExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>

        </jaxrs:providers>
        <jaxrs:features>
            <!-- <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                  <property name="title" value="Test"/>
                  <property name="version" value="1.0"/>
                  <property name="description" value="Test 1.0"/>
                  <property name="contact" value="help@percussion.com"/>

                    <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="designmanagement-jax-rs" address="/design">
        <jaxrs:serviceBeans>
            <ref bean="webResourcesRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <!--   <entry key="json" value="application/json"/>-->
            <!-- entry key="xml" value="application/xml" /-->
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="constraintsViolatedExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!--  <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                 <property name="title" value="Test"/>
                 <property name="version" value="1.0"/>
                 <property name="description" value="Test 1.0"/>
                 <property name="contact" value="help@percussion.com"/>

                  <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="integration-siteimprove-jax-rs" address="/integrations">
        <jaxrs:serviceBeans>
            <ref bean="siteImproveService"/>
            <ref bean="emsAPIService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="constraintsViolatedExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!--   <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                  <property name="title" value="Test"/>
                  <property name="version" value="1.0"/>
                  <property name="description" value="Test 1.0"/>
                  <property name="contact" value="help@percussion.com"/>

                   <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <bean id="jaxbProvider" class="org.apache.cxf.jaxrs.provider.JAXBElementProvider">
        <property name="marshallerProperties">
            <map>
                <entry key="jaxb.formatted.output">
                    <value type="java.lang.Boolean">true</value>
                </entry>
            </map>
        </property>
        <!--  enable if updating cxf for better performance.
        <property name="singleJaxbContext" value="true"/>
        -->
    </bean>

    <jaxrs:server id="pathmanagement-jax-rs" address="/pathmanagement" basePackages="com.percussion.share">
        <jaxrs:serviceBeans>
            <ref bean="pathService"/>
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="constraintsViolatedExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!--  <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                  <property name="title" value="Test"/>
                  <property name="version" value="1.0"/>
                  <property name="description" value="Test 1.0"/>
                  <property name="contact" value="help@percussion.com"/>

                    <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="dashboardmanagement-jax-rs" address="/dashboardmanagement">
        <jaxrs:serviceBeans>
            <ref bean="dashboardService"/>
            <ref bean="userProfileRestService"/>
            <ref bean="gadgetRestService"/>
            <ref bean="gadgetUserRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!--  <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
               <property name="title" value="Test"/>
               <property name="version" value="1.0"/>
               <property name="description" value="Test 1.0"/>
               <property name="contact" value="help@percussion.com"/>

               <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="assetmanagement-jax-rs" address="/assetmanagement">
        <jaxrs:serviceBeans>
            <ref bean="assetRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!-- <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                 <property name="title" value="Test"/>
                 <property name="version" value="1.0"/>
                 <property name="description" value="Test 1.0"/>
                 <property name="contact" value="help@percussion.com"/>

                   <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="metadatamanagement-jax-rs" address="/metadatamanagement">
        <jaxrs:serviceBeans>
            <ref bean="metadataRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!-- <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                 <property name="title" value="Test"/>
                 <property name="version" value="1.0"/>
                 <property name="description" value="Test 1.0"/>
                 <property name="contact" value="help@percussion.com"/>

                   <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="analytics-jax-rs" address="/analytics">
        <jaxrs:serviceBeans>
            <ref bean="analyticsProviderRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!--   <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                  <property name="title" value="Test"/>
                  <property name="version" value="1.0"/>
                  <property name="description" value="Test 1.0"/>
                  <property name="contact" value="help@percussion.com"/>

                   <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>
                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="workflow-jax-rs" address="/itemmanagement">
        <jaxrs:serviceBeans>
            <ref bean="workflowRestService"/>
            <ref bean="itemRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!--  <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                  <property name="title" value="Test"/>
                  <property name="version" value="1.0"/>
                  <property name="description" value="Test 1.0"/>
                  <property name="contact" value="help@percussion.com"/>

                    <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="activity-jax-rs" address="/activitymanagement">
        <jaxrs:serviceBeans>
            <ref bean="contentActivityService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!-- <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                <property name="title" value="Test"/>
                <property name="version" value="1.0"/>
                <property name="description" value="Test 1.0"/>
                <property name="contact" value="help@percussion.com"/>

                 <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="utils-jax-rs" address="/utils">
        <jaxrs:serviceBeans>
            <ref bean="utilityRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!-- <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                <property name="title" value="Test"/>
                <property name="version" value="1.0"/>
                <property name="description" value="Test 1.0"/>
                <property name="contact" value="help@percussion.com"/>

                 <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="ui-jax-rs" address="/ui">
        <jaxrs:serviceBeans>
            <ref bean="uiRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!-- <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                 <property name="title" value="Test"/>
                 <property name="version" value="1.0"/>
                 <property name="description" value="Test 1.0"/>
                 <property name="contact" value="help@percussion.com"/>

                   <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="delivery-jax-rs" address="/delivery">
        <jaxrs:serviceBeans>
            <ref bean="formDataService"/>
            <ref bean="cookieConsentService"/>
            <ref bean="commentsService"/>
            <ref bean="membershipService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!-- <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                <property name="title" value="Test"/>
                <property name="version" value="1.0"/>
                <property name="description" value="Test 1.0"/>
                <property name="contact" value="help@percussion.com"/>

                 <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="searchmanagement-jax-rs" address="/searchmanagement">
        <jaxrs:serviceBeans>
            <ref bean="searchRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="PSJsonProcessingExceptionMapper"/>
            <ref bean="validationExceptionMapper"/>
            <ref bean="constraintsViolatedExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!-- <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                 <property name="title" value="Test"/>
                 <property name="version" value="1.0"/>
                 <property name="description" value="Test 1.0"/>
                 <property name="contact" value="help@percussion.com"/>

                   <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>
                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="share-jax-rs" address="/share">
        <jaxrs:serviceBeans>
            <ref bean="asyncJobStatusRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="constraintsViolatedExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!-- <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                <property name="title" value="Test"/>
                <property name="version" value="1.0"/>
                <property name="description" value="Test 1.0"/>
                <property name="contact" value="help@percussion.com"/>

                 <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>
                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="contentmigration-jax-rs" address="/migrationmanagement">
        <jaxrs:serviceBeans>
            <ref bean="contentMigrationRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="constraintsViolatedExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!-- <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                <property name="title" value="Test"/>
                <property name="version" value="1.0"/>
                <property name="description" value="Test 1.0"/>
                <property name="contact" value="help@percussion.com"/>

                 <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="widgetmanagement-jax-rs" address="/widgetmanagement">
        <jaxrs:serviceBeans>
            <ref bean="widgetBuilderService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="constraintsViolatedExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
        </jaxrs:features>
    </jaxrs:server>


    <jaxrs:server id="maintenance-jax-rs" address="/maintenance">
        <jaxrs:serviceBeans>
            <ref bean="maintenanceManagerRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="constraintsViolatedExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="pageoptimizer-jax-rs" address="/pageoptimizermanagement">
        <jaxrs:serviceBeans>
            <ref bean="pageOptimizerService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="cloudservice-jax-rs" address="/cloudservicemanagement">
        <jaxrs:serviceBeans>
            <ref bean="cloudService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>

            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="recent-jax-rs" address="/recentmanagement">
        <jaxrs:serviceBeans>
            <ref bean="recentRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>

            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="integrity-jax-rs" address="/integritymanagement">
        <jaxrs:serviceBeans>
            <ref bean="pSIntegrityCheckerRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
        </jaxrs:features>
    </jaxrs:server>

    <jaxrs:server id="redirect-jax-rs" address="/redirectmanagement">
        <jaxrs:serviceBeans>
            <ref bean="pSRedirectRestService"/>
        </jaxrs:serviceBeans>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json"/>
            <entry key="xml" value="application/xml"/>
        </jaxrs:extensionMappings>
        <jaxrs:providers>
            <ref bean="validationExceptionMapper"/>
            <ref bean="runtimeExceptionMapper"/>
            <ref bean="jacksonProvider"/>
            <ref bean="jacksonContextResolver"/>
        </jaxrs:providers>
        <jaxrs:features>
            <!--  <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Feature">
                  <property name="title" value="Test"/>
                  <property name="version" value="1.0"/>
                  <property name="description" value="Test 1.0"/>
                  <property name="contact" value="help@percussion.com"/>

                    <property name="resourcePackage" value="org.app.rest.api.service"/>
                <property name="scanAllResources" value="true"/>
                <property name="activateOnlyIfJaxrsSupported" value="true"/>

                <property name="customizer">
                    <bean class="org.apache.cxf.jaxrs.swagger.Swagger2Customizer">
                        <property name="dynamicBasePath" value="true"/>
                        <property name="replaceTags" value="true"/>
                    </bean>
                </property>
            </bean>-->
        </jaxrs:features>
    </jaxrs:server>

    <!-- BEGIN Quartz to monitor updated widget definitions -->

    <bean id="widgetXmlDaoJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
          autowire="no">
        <property name="targetObject" ref="widgetDao"/>
        <property name="targetMethod" value="poll"/>
    </bean>
    <bean id="categoryXmlDaoJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
          autowire="no">
        <property name="targetObject" ref="categoryConfigurationDao"/>
        <property name="targetMethod" value="poll"/>
    </bean>
    <bean id="resourceXmlDaoJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
          autowire="no">
        <property name="targetObject" ref="resourceDefinitionGroupDao"/>
        <property name="targetMethod" value="poll"/>
    </bean>


    <bean id="resourceXmlCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
          autowire="no">
        <property name="jobDetail" ref="resourceXmlDaoJob"/>
        <property name="cronExpression" value="0/5 * * * * ?"/>
    </bean>

    <bean id="widgetXmlCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
          autowire="no">
        <property name="jobDetail" ref="widgetXmlDaoJob"/>
        <property name="cronExpression" value="0/5 * * * * ?"/>
    </bean>

    <bean id="categoryXmlCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
          autowire="no">
        <property name="jobDetail" ref="categoryXmlDaoJob"/>
        <property name="cronExpression" value="0/5 * * * * ?"/>
    </bean>

    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
          autowire="no">
        <property name="triggers">
            <list>
                <ref bean="resourceXmlCronTrigger"/>
                <ref bean="widgetXmlCronTrigger"/>
                <ref bean="categoryXmlCronTrigger"/>
            </list>
        </property>
    </bean>
    <!-- END Quartz to monitor updated widget definitions -->

    <!--  These exception mappers should go into a share project at some point. -->
    <!-- <bean id="validationExceptionMapper" class="com.percussion.share.web.service.PSValidationExceptionMapper" /> -->
    <!-- <bean id="runtimeExceptionMapper" class="com.percussion.share.web.service.PSRuntimeExceptionMapper" /> -->
    <!-- <bean id="constraintsViolatedExceptionMapper" class="com.percussion.share.web.service.PSConstraintsViolatedExceptionMapper" /> -->

    <!--  Shared services -->
    <!-- <bean id="sys_idMapper" class="com.percussion.share.dao.impl.PSIdMapper"/> -->
    <!-- <bean id="itemSummaryService" class="com.percussion.share.dao.impl.PSItemSummaryService" autowire="constructor" />-->
    <!-- <bean id="contentItemDao" class="com.percussion.share.dao.impl.PSContentItemDao" autowire="constructor" />-->
    <!-- <bean id="relationshipCataloger" class="com.percussion.share.dao.impl.PSRelationshipCataloger" autowire="constructor" /> -->
    <!-- <bean id="nameGenerator" class="com.percussion.share.dao.impl.PSNameGenerator" autowire="constructor"/> -->
    <!-- <bean id="serverConfigUpdater" class="com.percussion.share.dao.impl.PSServerConfigUpdater" autowire="constructor"/> -->
    <!-- <bean id="systemProperties" class="com.percussion.share.service.impl.PSSystemProperties" /> -->

    <!-- Legacy Singletons that are now Spring Factory Beans.   -->
    <!-- See spring doc: http://static.springsource.org/spring/docs/2.5.x/reference/beans.html#beans-factory-extension-factorybean -->
    <!--
    <bean id="itemDefManager" class="com.percussion.share.dao.impl.PSItemDefManagerFactory" />
     -->

    <!-- Site Management -->
    <!--  <bean id="siteDao" class="com.percussion.sitemanage.dao.impl.PSSiteDao" autowire="constructor">
    </bean>
    -->
    <!--
    <bean id="dtsStatusProvider" class="com.percussion.utils.PSDTSStatusProvider" autowire="constructor"></bean>
  -->
    <!--

      <bean id="siteContentDao" class="com.percussion.sitemanage.dao.impl.PSSiteContentDao" autowire="constructor">
    </bean>
    -->
    <!--
      <bean id="sitePublishDao" class="com.percussion.sitemanage.dao.impl.PSSitePublishDao" autowire="constructor">
       <property name="webServerFileSystemRoot" value="${rxdeploydir}/Deployment/Server" />
       <property name="webServerPort" value="80" />
    </bean>
    -->

    <!--
    <bean id="antService" class="com.percussion.sitemanage.task.impl.PSAntService">
    </bean>
    -->
    <!--
    <bean id="siteDataService" class="com.percussion.sitemanage.service.impl.PSSiteDataService" autowire="constructor">
        <constructor-arg type="com.percussion.sitemanage.service.IPSSiteImportService">
            <ref bean="siteImportService" />
        </constructor-arg>
    </bean>
    -->

    <!--
    <bean id="siteDataRestService" class="com.percussion.sitemanage.service.impl.PSSiteDataRestService" autowire="constructor"/>
    -->
    <!--
      <bean id="siteArchitectureDao" class="com.percussion.sitemanage.dao.impl.PSSiteArchitectureDao" autowire="constructor"/>
      <bean id="siteArchitectureDataService" class="com.percussion.sitemanage.service.impl.PSSiteArchitectureDataService" autowire="constructor"/>
 -->
    <!--
      <bean id="siteArchitectureDataRestService" class="com.percussion.sitemanage.service.impl.PSSiteArchitectureDataRestService" autowire="constructor"/>
   -->
    <!--
    <bean id="siteSectionService" class="com.percussion.sitemanage.service.impl.PSSiteSectionService" autowire="constructor"></bean>
    -->

    <!--<bean id="siteSectionRestService" class="com.percussion.sitemanage.service.impl.PSSiteSectionRestService" autowire="constructor"/> -->
    <!--
    <bean id="sitePublishServiceHelper" class="com.percussion.sitemanage.service.impl.PSSitePublishServiceHelper" autowire="constructor">
        <property name="sessionFactory">
            <ref bean="sys_sessionFactory" />
        </property>
    </bean>
    -->
    <!--
    <bean id="sitePublishService" class="com.percussion.sitemanage.service.impl.PSSitePublishService" autowire="constructor">
        <constructor-arg type="com.percussion.ui.service.IPSListViewHelper">
            <ref bean="cm1ListViewHelper" />
        </constructor-arg>
    </bean>
  -->
    <!--
    <bean id="sitePublishWebAdapter" class="com.percussion.sitemanage.service.impl.PSSitePublishServiceWebAdapter" autowire="constructor"/>
     -->
    <!--
      <bean id="sitePublishStatusService" class="com.percussion.sitemanage.service.impl.PSSitePublishStatusService" autowire="constructor">
      </bean>
   -->
    <!--
    <bean id="widgetBuilderService" class="com.percussion.widgetbuilder.service.PSWidgetBuilderService" autowire="constructor">
        <property name="systemProps">
            <ref bean="systemProperties" />
        </property>
    </bean>
    -->
    <!--  <bean id="userLoginDao" class="com.percussion.sitemanage.dao.impl.PSUserLoginDao"  autowire="constructor" />
  -->
    <!--
    <bean id="userService" class="com.percussion.user.service.impl.PSUserService" autowire="constructor" >
        <property name="systemProps">
            <ref bean="systemProperties" />
        </property>
    </bean>
     -->
    <!--
     <bean id="categoryService" class="com.percussion.category.service.impl.PSCategoryService" autowire="constructor" />
  -->
    <!--
     <bean id="categoryUnmarshaller" class="com.percussion.category.marshaller.PSCategoryUnMarshaller" />
    -->
    <!--
     <bean id="categoryMarshaller" class="com.percussion.category.marshaller.PSCategoryMarshaller" />
  -->

    <!--  Worflow UI Management  -->
    <!-- <bean id="steppedWorkflowMetadata" class="com.percussion.workflow.service.impl.PSSteppedWorkflowMetadata" autowire="constructor"  /> -->
    <!-- <bean id="steppedWorkflowService" class="com.percussion.workflow.service.impl.PSSteppedWorkflowService" autowire="constructor" >
        <property name="notificationService" ref="sys_notificationService"/>
    </bean> -->
    <!--
     <bean id="steppedWorkflowRestService" class="com.percussion.workflow.service.impl.PSSteppedWorkflowRestService">
         <constructor-arg>
           <ref bean="steppedWorkflowService" />
         </constructor-arg>
     </bean>
    -->
    <!-- Publish UI Management -->
    <!--
     <bean id="pubServerService" class="com.percussion.pubserver.impl.PSPubServerService" autowire="constructor"  >
         <constructor-arg type="com.percussion.services.pubserver.IPSDatabasePubServerFilesService">
           <ref bean="sys_dbPubServerFileService" />
         </constructor-arg>
     </bean>
  -->
    <!--
     <bean id="pubServerRestService" class="com.percussion.pubserver.impl.PSPubServerRestService">
         <constructor-arg>
           <ref bean="pubServerService" />
         </constructor-arg>
     </bean>
    -->
    <!--  Folder UI Management  -->
    <!--
     <bean id="folderService" class="com.percussion.foldermanagement.service.impl.PSFolderService" autowire="constructor">
         <constructor-arg type="com.percussion.pathmanagement.service.IPSPathService">
           <ref bean="pathService" />
         </constructor-arg>
    </bean>-->

    <!--
     <bean id="folderRestService" class="com.percussion.foldermanagement.service.impl.PSFolderRestService" autowire="constructor">
     </bean>
  -->
    <!--
     <bean id="getAssignedFoldersJob" class="com.percussion.foldermanagement.service.impl.PSGetAssignedFoldersJob" autowire="constructor" scope="prototype">
        <property name="folderService">
             <ref bean="folderService" />
        </property>
     </bean>
        -->

    <!--
    <bean id="directoryServiceConfig" class="com.percussion.user.service.impl.PSDirectoryServiceConfig" autowire="constructor">
        <property name="repositoryDirectory" value="${rxdeploydir}/rxconfig/LDAP" />
    </bean>
    -->
    <!--
    <bean id="defaultPasswordEncryptionBean" class="com.percussion.user.service.impl.PSDefaultPasswordEncryptionBean"
        autowire="constructor" />
        -->

    <!--
      <bean id="siteSectionMetaDataService" class="com.percussion.sitemanage.service.impl.PSSiteSectionMetaDataService" autowire="constructor"/>
-->
    <!--
      <bean id="folderHelper" class="com.percussion.share.dao.impl.PSFolderHelper" autowire="constructor"/>
      <bean id="indexHelper" class="com.percussion.searchmanagement.service.impl.PSIndexHelper" autowire="constructor"/>
    -->
    <!--
      <bean id="siteTemplateService" class="com.percussion.sitemanage.service.impl.PSSiteTemplateService" autowire="constructor">
        <property name="templateImportService" ref="templateImportService" />
      </bean>
    -->
    <bean id="siteImportService" class="com.percussion.sitemanage.importer.PSSiteImportService" autowire="constructor">
        <property name="mandatoryHelpers">
            <list>
                <ref bean="themeHelper"/>
                <ref bean="importThemeHelper"/>
                <ref bean="siteCreationHelper"/>
            </list>
        </property>
        <property name="optionalHelpers">
            <list>
                <ref bean="templateExtractorHelper"/>
                <ref bean="linkExtractionHelper"/>
                <ref bean="pageExtractorHelper"/>
                <ref bean="thumbnailGenerationHelper"/>
            </list>
        </property>
        <property name="logDao">
            <ref bean="importLogDao"/>
        </property>
        <property name="siteImportSummaryService">
            <ref bean="siteImportSummaryService"/>
        </property>
    </bean>

    <bean id="siteImportJob" class="com.percussion.sitemanage.importer.PSImportFromUrlJob" autowire="constructor"
          scope="prototype">
        <property name="mandatoryHelpers">
            <list>
                <ref bean="themeHelper"/>
                <ref bean="importThemeHelper"/>
                <ref bean="siteCreationHelper"/>
            </list>
        </property>
        <property name="optionalHelpers">
            <list>
                <ref bean="templateExtractorHelper"/>
                <ref bean="linkExtractionHelper"/>
                <ref bean="pageExtractorHelper"/>
                <ref bean="thumbnailGenerationHelper"/>
            </list>
        </property>
        <property name="logDao">
            <ref bean="importLogDao"/>
        </property>
        <property name="siteImportSummaryService">
            <ref bean="siteImportSummaryService"/>
        </property>
    </bean>

    <bean id="templateImportService" class="com.percussion.sitemanage.importer.PSSiteImportService"
          autowire="constructor">
        <property name="mandatoryHelpers">
            <util:list>
                <ref bean="themeTemplateHelper"/>
                <ref bean="importThemeHelper"/>
                <ref bean="templateCreationHelper"/>
            </util:list>
        </property>
        <property name="optionalHelpers">
            <list>
                <ref bean="templateExtractorHelper"/>
                <ref bean="pageExtractorHelper"/>
            </list>
        </property>
        <property name="logDao">
            <ref bean="importLogDao"/>
        </property>
    </bean>

    <bean id="pageImportService" class="com.percussion.sitemanage.importer.PSSiteImportService">
        <property name="mandatoryHelpers">
            <list>
            </list>
        </property>
        <property name="optionalHelpers">
            <list>
                <ref bean="themeTemplateHelper"/>
                <ref bean="importThemeHelper"/>
                <ref bean="linkExtractionHelper"/>
                <ref bean="pageExtractorHelperForImport"/>
            </list>
        </property>
        <property name="logDao">
            <ref bean="importLogDao"/>
        </property>
        <property name="pageDao">
            <ref bean="pageDao"/>
        </property>
        <property name="pageCatalogService">
            <ref bean="pageCatalogService"/>
        </property>
    </bean>

    <bean id="templateImportJob" class="com.percussion.sitemanage.importer.PSImportFromUrlJob" autowire="constructor"
          scope="prototype">
        <property name="mandatoryHelpers">
            <list>
                <ref bean="themeTemplateHelper"/>
                <ref bean="importThemeHelper"/>
                <ref bean="templateCreationHelper"/>
            </list>
        </property>
        <property name="optionalHelpers">
            <list>
                <ref bean="templateExtractorHelper"/>
                <ref bean="pageExtractorHelper"/>
            </list>
        </property>
        <property name="logDao">
            <ref bean="importLogDao"/>
        </property>
    </bean>
    <bean id="pageExtractorHelperForImport"
          class="com.percussion.sitemanage.importer.helpers.impl.PSPageExtractorHelper" autowire="constructor">
        <property name="pageImport" value="true"/>
        <property name="extractMetaData" value="true"/>
    </bean>

    <!-- Design management -->
    <bean id="webResourcesService"
          class="com.percussion.designmanagement.service.impl.PSFileSystemService"
          autowire="constructor">
        <constructor-arg value="${rxdeploydir}/web_resources"/>
        <property name="includes">
            <list>
                <value>themes</value>
            </list>
        </property>
        <!-- Limits the file size (in MegaBytes) uploaded under web_resources -->
        <property name="maxFileSize" value="100"/>
    </bean>

    <bean id="designPathItemService" class="com.percussion.pathmanagement.service.impl.PSDesignPathItemService"
          autowire="constructor">
        <property name="registry">
            <map>
                <entry key="/web_resources/" value-ref="webResourcesPathItemService"/>
            </map>
        </property>
        <constructor-arg>
            <ref bean="uiService"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="userService"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="fileSystemListViewHelper"/>
        </constructor-arg>
        <property name="rootName" value="Design"/>
        <property name="rolesAllowed">
            <list>
                <value>Admin</value>
                <value>Designer</value>
            </list>
        </property>
    </bean>

    <bean id="recyclePathItemService" class="com.percussion.pathmanagement.service.impl.PSRecyclePathItemService">
        <property name="rolesAllowed">
            <list>
                <value>Admin</value>
                <value>Designer</value>
            </list>
        </property>
    </bean>

    <bean id="webResourcesPathItemService"
          class="com.percussion.pathmanagement.service.impl.PSWebResourcesPathItemService" autowire="constructor">
        <constructor-arg>
            <ref bean="webResourcesService"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="fileSystemListViewHelper"/>
        </constructor-arg>
        <property name="rootName" value="web_resources"/>
    </bean>

    <bean id="pageImportQueue" class="com.percussion.queue.impl.PSPageImportQueue" autowire="constructor">
        <constructor-arg>
            <ref bean="sys_idMapper"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="pageImportService"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="sys_notificationService"/>
        </constructor-arg>

        <property name="systemProps">
            <ref bean="systemProperties"/>
        </property>
    </bean>
    <bean id="pathService" class="com.percussion.pathmanagement.service.impl.PSPathService" lazy-init="true">
        <property name="registry">
            <map>
                <entry key="/Sites/" value-ref="sitePathItemService" />
                <entry key="/Assets/" value-ref="assetPathItemService" />
                <entry key="/Design/" value-ref="designPathItemService" />
                <entry key="/Search/" value-ref="searchPathItemService" />
                <entry key="/Recycling/" value-ref="recyclePathItemService" />
            </map>
        </property>
        <constructor-arg>
            <ref bean="folderHelper"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="sys_publishingWs"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="sys_idMapper"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="uiService"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="userService"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="cm1ListViewHelper"/>
        </constructor-arg>
    </bean>
    <!-- Dashboard Management -->

    <!-- Asset Management -->
    <bean id="assetUploadFolderPathMap" class="com.percussion.assetmanagement.service.impl.PSAssetUploadFolderPathMap"
          autowire="constructor">
        <property name="typeToFolderPathMap">
            <map>
                <!-- Relative Folder Paths from Assets-->
                <entry key="percImageAsset" value="/uploads/images"/>
                <entry key="percFileAsset" value="/uploads/files"/>
                <entry key="percFlashAsset" value="/uploads/files"/>
                <entry key="percFormAsset" value="/forms"/>
                <entry key="percCalendarAsset" value="/calendars"/>
                <entry key="percPollAsset" value="/polls"/>
            </map>
        </property>
    </bean>
    <bean id="extensionService" class="com.percussion.extensions.PSExtensionService"/>

    <bean id="bulkApprovalJob" class="com.percussion.itemmanagement.PSBulkApprovalJob" autowire="constructor"
          scope="prototype">
        <property name="itemWorkflowService">
            <ref bean="workflowRestService"/>
        </property>
        <property name="workflowHelper">
            <ref bean="workflowHelper"/>
        </property>
        <property name="folderHelper">
            <ref bean="folderHelper"/>
        </property>
        <property name="idMapper">
            <ref bean="sys_idMapper"/>
        </property>
        <property name="userService">
            <ref bean="userService"/>
        </property>
    </bean>
    <bean id="analyticsProviderQueryHandler"
          class="com.percussion.analytics.service.impl.google.PSGoogleAnalyticsProviderQueryHandler">
        <constructor-arg>
            <ref bean="analyticsProviderService"/>
        </constructor-arg>
    </bean>
    <!-- Effectiveness Data Services -->
    <bean id="effectivenessService" class="com.percussion.activity.service.impl.PSEffectivenessService">
        <constructor-arg>
            <ref bean="activityService"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="analyticsProviderQueryService"/>
        </constructor-arg>
    </bean>

    <!-- Utility Service -->
    <bean id="utilityService" class="com.percussion.utils.service.impl.PSUtilityService" autowire="constructor">
        <property name="systemProps">
            <ref bean="systemProperties"/>
        </property>
    </bean>
    <!--
   <bean id="utilityRestService" class="com.percussion.utils.service.impl.PSUtilityRestService" autowire="constructor" />
    -->
    <bean id="privateKeysFileSystemService" class="com.percussion.designmanagement.service.impl.PSFileSystemService">
        <constructor-arg value="${rxdeploydir}/rxconfig/ssh-keys"/>
    </bean>

    <bean id="securityItemsDao" class="com.percussion.security.dao.impl.PSSecurityItemsDao">
        <constructor-arg>
            <ref bean="privateKeysFileSystemService"/>
        </constructor-arg>
    </bean>

    <bean id="cm1SearchListViewHelper" class="com.percussion.ui.service.impl.PSCm1ListViewHelper"
          autowire="constructor">
        <property name="postProcessors">
            <list>
                <ref bean="pageListViewProcessor"/>
            </list>
        </property>
    </bean>

    <bean id="fileSystemListViewHelper" class="com.percussion.ui.service.impl.PSFileSystemListViewHelper">
        <constructor-arg>
            <ref bean="webResourcesService"/>
        </constructor-arg>
    </bean>

    <!-- Traffic Services -->
    <bean id="trafficService" class="com.percussion.activity.service.impl.PSTrafficService">
        <constructor-arg>
            <ref bean="activityService"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="analyticsProviderQueryService"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="analyticsProviderService"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="siteDataService"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="pathService"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="folderHelper"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="pageService"/>
        </constructor-arg>
    </bean>
    <bean id="feedsInfoQueue" class="com.percussion.feeds.service.impl.PSFeedsInfoQueue" autowire="constructor">
        <constructor-arg type="com.percussion.metadata.service.IPSMetadataService">
            <ref bean="metadataService"/>
        </constructor-arg>
        <constructor-arg type="com.percussion.delivery.service.IPSDeliveryInfoService">
            <ref bean="sys_deliveryInfoService"/>
        </constructor-arg>
    </bean>

    <bean id="feedsInfoService" class="com.percussion.feeds.service.impl.PSFeedsInfoService" autowire="constructor">
        <constructor-arg type="com.percussion.pagemanagement.service.IPSRenderService">
            <ref bean="renderService"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="feedsInfoQueue"/>
        </constructor-arg>
    </bean>

    <!--  Search Management  -->
    <bean id="searchService" class="com.percussion.searchmanagement.service.impl.PSSearchService"
          autowire="constructor">
        <constructor-arg>
            <ref bean="folderHelper"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="sys_idMapper"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="workflowRestService"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="cm1SearchListViewHelper"/>
        </constructor-arg>
    </bean>
    <bean id="thumbnailGeneratorService" class="com.percussion.share.service.impl.PSThumbnailGeneratorService"
          autowire="constructor"/>
    <bean id="widgetAssetRelationshipDao"
          class="com.percussion.assetmanagement.service.impl.PSWidgetAssetRelationshipDao">
    </bean>

    <!--  Content Migration Service  -->
    <bean id="contentMigrationService" class="com.percussion.contentmigration.service.impl.PSContentMigrationService"
          autowire="constructor">
        <property name="migrationRules">
            <list>
                <ref bean="idMatchingRule"/>
                <ref bean="classNameMatchingRule"/>
            </list>
        </property>
        <property name="migrationConverters">
            <list>
                <ref bean="htmlMigrationConverter"/>
                <ref bean="richTextMigrationConverter"/>
            </list>
        </property>
    </bean>
    <!--  Content Migration Rules  -->
    <bean id="idMatchingRule" class="com.percussion.contentmigration.rules.PSIdMatchingMigrationRule"
          autowire="constructor"/>
    <bean id="classNameMatchingRule" class="com.percussion.contentmigration.rules.PSClassNameMatchingMigrationRule"
          autowire="constructor"/>

    <!--  Content Migration Converters  -->
    <bean id="htmlMigrationConverter" class="com.percussion.contentmigration.converter.PSHtmlMigrationConverter"
          autowire="constructor"/>
    <bean id="richTextMigrationConverter" class="com.percussion.contentmigration.converter.PSRichTextMigrationConverter"
          autowire="constructor"/>

    <bean id="asyncJobFactory"
          class="org.springframework.beans.factory.config.ServiceLocatorFactoryBean">
        <property name="serviceLocatorInterface" value="com.percussion.share.async.IPSAsyncJobFactory"/>
    </bean>

    <bean id="asyncJobService" class="com.percussion.share.async.impl.PSAsyncJobService">
        <property name="asyncJobFactory" ref="asyncJobFactory"/>
    </bean>

    <bean id="localDeployerClient" class="com.percussion.deployer.server.PSLocalDeployerClient"/>

    <bean id="maintenanceManager" class="com.percussion.maintenance.service.impl.PSMaintenanceManager"/>

    <bean id="startupPackageInstaller" class="com.percussion.packagemanagement.PSStartupPkgInstaller">
        <property name="packageFileListPath" value="rxconfig/Installer/InstallPackages.xml"/>
        <property name="logFilePath" value="logs/InstallPackages.log"/>
        <property name="packageInstaller" ref="localDeployerClient"/>
        <property name="notificationService" ref="sys_notificationService"/>
        <property name="maintenanceManager" ref="maintenanceManager"/>
    </bean>

    <bean id="PSSaveAssetsMaintenanceProcess" class="com.percussion.patch.PSSaveAssetsMaintenanceProcess">
        <property name="notificationService" ref="sys_notificationService"/>
        <constructor-arg type="com.percussion.maintenance.service.impl.PSMaintenanceManager">
            <ref bean="maintenanceManager"/>
        </constructor-arg>
        <constructor-arg type="com.percussion.assetmanagement.service.impl.PSAssetService">
            <ref bean="assetService"/>
        </constructor-arg>
        <constructor-arg type="com.percussion.itemmanagement.service.impl.PSItemWorkflowService">
            <ref bean="workflowRestService"/>
        </constructor-arg>
        <constructor-arg type="com.percussion.linkmanagement.service.impl.PSManagedLinkService">
            <ref bean="managedLinkService"/>
        </constructor-arg>
        <constructor-arg type="com.percussion.share.dao.impl.PSIdMapper">
            <ref bean="sys_idMapper"/>
        </constructor-arg>
        <constructor-arg type="com.percussion.pagemanagement.service.impl.PSPageService">
            <ref bean="pageService"/>
        </constructor-arg>
    </bean>
    <bean id="importProcessMonitor" class="com.percussion.monitor.process.PSImportProcessMonitor"/>
    <bean id="thumbnailProcessMonitor" class="com.percussion.monitor.process.PSThumbnailProcessMonitor"/>
    <bean id="searchIndexProcessMonitor" class="com.percussion.monitor.process.PSSearchIndexProcessMonitor"/>
    <bean id="publishingProcessMonitor" class="com.percussion.monitor.process.PSPublishingProcessMonitor"/>
    <bean id="workflowAssignmentProcessMonitor"
          class="com.percussion.monitor.process.PSWorkflowAssignmentProcessMonitor"/>
    <bean id="siteCopyProcessMonitor" class="com.percussion.monitor.process.PSSiteCopyProcessMonitor"/>
    <bean id="touchFilesStartupProcess" class="com.percussion.share.extension.PSTouchFiles">
        <property name="startupProcessManager" ref="sys_startupProcessManager"/>
        <property name="rootDir" value="web_resources"/>
        <property name="dirNames" value="cm,templateImages,themes/percussion"/>
    </bean>

    <bean id="importCustCertificatesProcess" class="com.percussion.share.extension.PSImportCustCertificates">
        <property name="startupProcessManager" ref="sys_startupProcessManager"/>
    </bean>

    <bean id="rotateSecurityKeyProcess" class="com.percussion.share.extension.PSRotateSecureKey">
        <property name="startupProcessManager" ref="sys_startupProcessManager"/>
    </bean>


    <bean id="removePostEditionTasks" class="com.percussion.share.extension.PSRemovePostEditionTasks">
        <property name="startupProcessManager" ref="sys_startupProcessManager"/>
    </bean>

    <bean id="autotuneCache" class="com.percussion.share.extension.PSAutotuneCacheStartup">
        <property name="startupProcessManager" ref="sys_startupProcessManager"/>
    </bean>

    <bean id="rxFixStartupProcess" class="com.percussion.share.extension.PSRxFixStartupProcess">
        <property name="startupProcessManager" ref="sys_startupProcessManager"/>
    </bean>

    <bean id="imageWidgetResizeManager" class="com.percussion.widgets.image.services.impl.ImageResizeManagerImpl" scope="singleton">
        <!--DEPRECATED - default values of (png, image/png, png) no longer needed as the image type should be pulled from the image itself -->
        <property name="extension" value="" />
        <property name="contentType" value="" />
        <property name="imageFormat" value="" />
        <!--DEPRECATED -->

        <!-- set compression value between 0.0 (max compression)
             and 1.0 (max quality).  -->
        <property name="compression" value=".85" />
    </bean>

    <!-- Cache beans used for image cache -->
    <bean id="imageWidgetDataCacheRegion"
          class="org.springframework.cache.ehcache.EhCacheFactoryBean">
        <property name="cacheManager">
            <ref bean="sys_cacheManager" />
        </property>
        <property name="cacheName"
                  value="com.percussion.widgets.image.data.ImageData" />
        <property name="eternal" value="no" />
        <property name="diskPersistent" value="yes" />
        <property name="maxElementsInMemory" value="200" />
        <property name="overflowToDisk" value="yes" />
        <property name="timeToIdle" value="3600" />
        <property name="timeToLive" value="3600" />
        <!--
        Not supported property in updated ehcache
        <property name="diskStorePath" value="user.dir/perc-image-cache" />  -->
    </bean>

    <bean id="imageWidgetCacheManager"
          class="com.percussion.widgets.image.services.impl.ImageCacheManagerImpl">
        <property name="cache" ref="imageWidgetDataCacheRegion" />
    </bean>

</beans>
