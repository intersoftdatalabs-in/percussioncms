<?xml version="1.0" encoding="utf-8"?>
<!--
  ~     Percussion CMS
  ~     Copyright (C) 1999-2020 Percussion Software, Inc.
  ~
  ~     This program is free software: you can redistribute it and/or modify
  ~     it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
  ~
  ~     This program is distributed in the hope that it will be useful,
  ~     but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~     GNU Affero General Public License for more details.
  ~
  ~     Mailing Address:
  ~
  ~      Percussion Software, Inc.
  ~      PO Box 767
  ~      Burlington, MA 01803, USA
  ~      +01-781-438-9900
  ~      support@percussion.com
  ~      https://www.percusssion.com
  ~
  ~     You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>
  -->

<Server>
    <Service name="jboss.web">
        <Connector URIEncoding="UTF-8" acceptCount="100" address="${jboss.bind.address}" connectionTimeout="20000" disableUploadTimeout="true" emptySessionPath="true" enableLookups="false" maxHttpHeaderSize="8192" maxSpareThreads="75" maxThreads="250" minSpareThreads="25" port="50010" protocol="HTTP/1.1" redirectPort="8443" scheme="http"/>
        <Connector address="${jboss.bind.address}" emptySessionPath="true" enableLookups="false" port="50016" protocol="AJP/1.3" redirectPort="8443"/>
        <Engine defaultHost="localhost" name="jboss.web">

            <!-- The JAAS based authentication and authorization realm implementation
            that is compatible with the jboss 3.2.x realm implementation.
            - certificatePrincipal : the class name of the
            org.jboss.security.auth.certs.CertificatePrincipal impl
            used for mapping X509[] cert chains to a Princpal.
            - allRolesMode : how to handle an auth-constraint with a role-name=*,
            one of strict, authOnly, strictAuthOnly
              + strict = Use the strict servlet spec interpretation which requires
              that the user have one of the web-app/security-role/role-name
              + authOnly = Allow any authenticated user
              + strictAuthOnly = Allow any authenticated user only if there are no
              web-app/security-roles
            -->
            <Realm allRolesMode="authOnly" certificatePrincipal="org.jboss.security.auth.certs.SubjectDNMapping" className="org.jboss.web.tomcat.security.JBossSecurityMgrRealm"/>
            <!-- A subclass of JBossSecurityMgrRealm that uses the authentication
            behavior of JBossSecurityMgrRealm, but overrides the authorization
            checks to use JACC permissions with the current java.security.Policy
            to determine authorized access.
            - allRolesMode : how to handle an auth-constraint with a role-name=*,
            one of strict, authOnly, strictAuthOnly
              + strict = Use the strict servlet spec interpretation which requires
              that the user have one of the web-app/security-role/role-name
              + authOnly = Allow any authenticated user
              + strictAuthOnly = Allow any authenticated user only if there are no
              web-app/security-roles
            <Realm className="org.jboss.web.tomcat.security.JaccAuthorizationRealm"
               certificatePrincipal="org.jboss.security.auth.certs.SubjectDNMapping"
               allRolesMode="authOnly"
               />
            -->


            <Host autoDeploy="false" configClass="org.jboss.web.tomcat.security.config.JBossContextConfig" deployOnStartup="false" deployXML="false" name="localhost">

                <Valve className="org.jboss.web.rewrite.RewriteValve"/>

                <!-- Uncomment to enable request dumper. This Valve "logs interesting
                     contents from the specified Request (before processing) and the
                     corresponding Response (after processing). It is especially useful
                     in debugging problems related to headers and cookies."
                -->
                <!--
                <Valve className="org.apache.catalina.valves.RequestDumperValve" />
                -->

                <!-- Access logger -->
                <!--
                <Valve className="org.apache.catalina.valves.AccessLogValve"
                    prefix="localhost_access_log." suffix=".log"
                    pattern="common" directory="${jboss.server.log.dir}"
                    resolveHosts="false" />
                -->

                <!-- Uncomment to enable single sign-on across web apps
                    deployed to this host. Does not provide SSO across a cluster.

                    If this valve is used, do not use the JBoss ClusteredSingleSignOn
                    valve shown below.

                    A new configuration attribute is available beginning with
                    release 4.0.4:

                    cookieDomain  configures the domain to which the SSO cookie
                                  will be scoped (i.e. the set of hosts to
                                  which the cookie will be presented).  By default
                                  the cookie is scoped to "/", meaning the host
                                  that presented it.  Set cookieDomain to a
                                  wider domain (e.g. "xyz.com") to allow an SSO
                                  to span more than one hostname.
                 -->
                <!--
                <Valve className="org.apache.catalina.authenticator.SingleSignOn" />
                -->

                <!-- Uncomment to enable single sign-on across web apps
                   deployed to this host AND to all other hosts in the cluster.

                   If this valve is used, do not use the standard Tomcat SingleSignOn
                   valve shown above.

                   Valve uses a JBossCache instance to support SSO credential
                   caching and replication across the cluster.  The JBossCache
                   instance must be configured separately.  By default, the valve
                   shares a JBossCache with the service that supports HttpSession
                   replication.  See the "jboss-web-cluster-service.xml" file in the
                   server/all/deploy directory for cache configuration details.

                   Besides the attributes supported by the standard Tomcat
                   SingleSignOn valve (see the Tomcat docs), this version also
                   supports the following attributes:

                   cookieDomain   see above

                   treeCacheName  JMX ObjectName of the JBossCache MBean used to
                                  support credential caching and replication across
                                  the cluster. If not set, the default value is
                                  "jboss.cache:service=TomcatClusteringCache", the
                                  standard ObjectName of the JBossCache MBean used
                                  to support session replication.
                -->
                <!--
                <Valve className="org.jboss.web.tomcat.service.sso.ClusteredSingleSignOn" />
                -->

                <!-- Check for unclosed connections and transaction terminated checks
                     in servlets/jsps.

                     Important: The dependency on the CachedConnectionManager
                     in META-INF/jboss-service.xml must be uncommented, too
                -->
                <Valve cachedConnectionManagerObjectName="jboss.jca:service=CachedConnectionManager" className="org.jboss.web.tomcat.service.jca.CachedConnectionValve" transactionManagerObjectName="jboss:service=TransactionManager"/>

            </Host>

        </Engine>
    </Service>
</Server>