<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE taglib
  PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN" "http://java.sun.com/dtd/web-jsptaglibrary_1_2.dtd">
<taglib>
  
  <tlib-version>11-m3</tlib-version>
  <jsp-version>1.2</jsp-version>
  <short-name>tr</short-name>
  <uri>http://myfaces.apache.org/trinidad</uri>
  <display-name>Apache Trinidad Core</display-name>
  <listener>
    <listener-class>org.apache.myfaces.trinidadinternal.webapp.TrinidadListenerImpl</listener-class>
  </listener>
        
    <tag>
      <name>attribute</name>   
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.AttributeTag</tag-class>
      <body-content>empty</body-content>
      <description>
        The Attribute tag adds a property with the specified name and value 
        to the component associated with the parent tag.  It behaves the same
        as the JSF Attribute tag except that it creates a value binding for 
        expressions instead of immediately evaluating it.  
      </description>
      <attribute>
        <name>name</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the name of the attribute
        </description>
      </attribute>
      <attribute>
        <name>value</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the value of the attribute
        </description>
      </attribute>
    </tag>
    

    <tag>
      <name>validator</name>   
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.ValidatorTag</tag-class>
      <body-content>empty</body-content>
      <description>
        The Validator tag adds a new validator instance to the component
        associated with the parent tag. The new validator instance is found
        by evaluating a binding expression, or looking up a validator ID.
        This implements the JSF 1.2 definition of &lt;f:validator&gt;.
      </description>
      <attribute>
        <name>validatorId</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the ID of a validator instance registered in faces-config.xml
        </description>
      </attribute>
      <attribute>
        <name>binding</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the value binding expression to a property that returns a
          ValidatorInstance.
        </description>
      </attribute>
    </tag>        

   <tag>
      <name>forEach</name>
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.ForEachTag</tag-class>
      <description>
The forEach tag is a replacement for the JSTL &amp;lt;c:forEach&amp;gt; tag
                that works with Apache Trinidad components.  Today, &amp;lt;c:forEach&amp;gt; cannot
                be used with any JSF components or tags.  This tag brings that functionality
        to JSF, but it is limited to Apache Trinidad tags. This tag also has several limitations not found in &amp;lt;c:forEach&amp;gt;:
        &lt;ul&gt;
        &lt;li&gt;&amp;lt;tr:forEach&amp;gt; does not currently support scenarios where the size of the "items" list or array changes from one request to the next. It may be possible to work around this in specific scenarios by manually deleting all children of the parent component (&amp;lt;tr:selectOneListbox&amp;gt; in the above example), but this has not yet been tested.&lt;/li&gt;
        &lt;li&gt;&amp;lt;tr:forEach&amp;gt; does not support arbitrary java.util.Collections; it can only iterate over java.util.Lists or arrays.&lt;/li&gt;
        &lt;li&gt;&amp;lt;tr:forEach&amp;gt; executes at the time the JSP tag executes. So it 
        does not have access to any EL variables that are created by JSF components.
        For example, the &amp;lt;tr:table&amp;gt; creates an EL variable using the value of
        the "var" attribute. However, this EL variable is not available 
to &amp;lt;tr:forEach&amp;gt;     
        &lt;/li&gt;
        &lt;/ul&gt;
      </description>

      <attribute>
        <name>items</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the items over which iteration takes place 
        </description>
      </attribute>

      <attribute>
        <name>var</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the name of the variable to expose
        </description>
      </attribute>

      <attribute>
        <name>varStatus</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          Name of the exported scoped variable for the
          status of the iteration.
        </description>
      </attribute>

      <attribute>
        <name>begin</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the beginning index 
        </description>
      </attribute>

      <attribute>
        <name>end</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the ending index 
        </description>
      </attribute>

      <attribute>
        <name>step</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the number of steps per iteration
        </description>
      </attribute>

   </tag>

   <tag>
      <name>setActionListener</name>
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.listener.SetActionListenerTag</tag-class>
      <body-content>empty</body-content>
      <description>
        The setActionListener tag provides a declarative syntax for assigning values before an action fires
      </description>

      <attribute>
        <name>to</name>
        <required>true</required>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the target for the value;  must be an EL expression
        </description>
      </attribute>

      <attribute>
        <name>from</name>
        <required>true</required>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the source of the value;  can be an EL expression or a constant value
        </description>
      </attribute>
   </tag>


   <tag>
      <name>fileDownloadActionListener</name>
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.listener.FileDownloadActionListenerTag</tag-class>
      <body-content>empty</body-content>
      <description>
        The fileDownloadActionListener tag provides a declarative syntax for downloading files to a user from a command component.
      </description>

      <attribute>
        <name>contentType</name>
        <required>false</required>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the content or mime type of the file - e.g., text/html or application/pdf
        </description>
      </attribute>

      <attribute>
        <name>filename</name>
        <required>false</required>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the desired or proposed filename.  If set, the user will typically be presented with a "Save File" dialog, though this is ultimately at the descretion of the user agent.
        </description>
      </attribute>

      <attribute>
        <name>method</name>
        <required>true</required>
        <rtexprvalue>false</rtexprvalue>
        <description>
          an EL binding to the method that will deliver the file contents.  The method must take two parameters, a FacesContext and an OutputStream.
        </description>
      </attribute>
   </tag>


   <tag>
      <name>returnActionListener</name>
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.listener.ReturnActionListenerTag</tag-class>
      <body-content>empty</body-content>
      <description>
        The returnActionListener tag is a declarative way to allow an action source to return 
        a value from a dialog or process.
      </description>

      <attribute>
        <name>value</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          The value to return as the dialog/process result.
          This can be an EL expression or a constant value.
        </description>
      </attribute>
   </tag>


   <tag>
      <name>resetActionListener</name>
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.listener.ResetActionListenerTag</tag-class>
      <body-content>empty</body-content>
      <description>
        The resetActionListener tag provides a declarative syntax for resetting values before an action fires
      </description>
   </tag>
 
   <tag>
      <name>componentRef</name>
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.ComponentRefTag</tag-class>
      <description> 

      The componentRef tag adds declarative components onto the current
      component tree. The declarative component is usually defined in a jsp
      file.  It is currently experimental and should not be used by
      developers.

      </description>

      <attribute>
        <name>componentType</name>
        <required>true</required>
        <rtexprvalue>false</rtexprvalue>
        <description>
Identifies which declarative component to use. 
All the available components must be
declared in a region-metadata.xml file.
        </description>
      </attribute>

      <attribute>
        <name>id</name>
        <required>true</required>
        <rtexprvalue>false</rtexprvalue>
        <description>
          This ID must be unique within this page. 
        </description>
      </attribute>

      <attribute>
        <name>value</name>
        <required>false</required>
        <rtexprvalue>false</rtexprvalue>
        <description>
          A value to pass to the component definition.
        </description>
      </attribute>

      <attribute>
        <name>rendered</name>
        <required>false</required>
        <rtexprvalue>false</rtexprvalue>
        <description>
          Whether or not this component is rendered.
        </description>
      </attribute>

   </tag>


    <tag>
      <name>componentDef</name>   
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.ComponentDefTag</tag-class>
      <description>
        The componentDef tag is used to define a component. Its primary purpose
is defining a "var" property so that the definition can refer to attributes
on this component's usage.
      </description>
      <attribute>
        <name>var</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the variable name to use when referencing attributes, that may be set
          on this new component.
        </description>
      </attribute>
    </tag>        


    <tag>
      <name>facetRef</name>   
      <tag-class>org.apache.myfaces.trinidadinternal.taglib.FacetRefTag</tag-class>
      <description>
        The facetRef tag is used to copy facets from a component
        and paste them into its
        definition. This tag may only be used within an &lt;tr:componentDef&gt;
        tag.
        Each facet may be used only once within each 
        &lt;tr:componentDef&gt;. In other words, a single facet cannot be
        used more than once.
      </description>
      <attribute>
        <name>facetName</name>
        <rtexprvalue>false</rtexprvalue>
        <description>
          the facet name to copy
        </description>
      </attribute>
    </tag>        


  <tag>
    <name>breadCrumbs</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.nav.CoreBreadCrumbsTag</tag-class>
    <description>A breadCrumbs component is used in hierarchical
          site layouts to indicate the path back to the root page of the
          hierarchy with links.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>var</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the hierarchy of navigation data - must be of type 
            org.apache.myfaces.trinidad.model.MenuModel</description>
    </attribute>
    <attribute>
      <name>varStatus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this 
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>orientation</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether to put links on the same line or indented and
            on new lines.</description>
    </attribute>
  </tag>
  <tag>
    <name>chart</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.data.CoreChartTag</tag-class>
    <description>The Trinidad Chart is used to diplay data in a chart format.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the data model being used by this component.The specific model class must be derived from 
        &lt;code&gt;org.apache.myfaces.trinidad.model.ChartModel&lt;/code&gt;. 
        The derived class must override the abstract methods to provide the required values for chart display.</description>
    </attribute>
    <attribute>
      <name>chartDrillDownListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a drill down listener that
         will be called when the user drills down into the chart data.The method must take a parameter of type &lt;code&gt;org.apache.myfaces.trinidad.event.ChartDrillDownEvent&lt;/code&gt;.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>type</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The type of chart. Possible Values are: verticalBar horizontalBar stackedVerticalBar stackedHorizontalBar pie area stackedArea line barLine XYLine scatterPlot radar radarArea funnel circularGauge semiCircularGauge.</description>
    </attribute>
    <attribute>
      <name>templateSource</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Specifies URI for the template document from which the chart elements are cloned.
        If this attribute is null, the chart component uses a default template. The default template is chosen based
        on whether the useGradient attribute is true or false.
        The template document is useful for changing the Look and Feel of the chart. 
        Some examples include:1)A developer may want to skin the chart to match its corporate Look and Feel.
        2)A developer may want to put water marks/background images inside the chart.
        3)A developer may want to change the template for the gauges used in the gauge charts.
        4)A developer may want to turn off gradients and instead use filters to set some interesting effects on the chart elements.</description>
    </attribute>
    <attribute>
      <name>perspective</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Specifies if the chart is drawn with a perspective (2.5D). 
      By default the chart is draw with a perspective.</description>
    </attribute>
    <attribute>
      <name>legendPosition</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Specified the location of the legend. The legend can be turned off by setting this attribute to none.
      Otherwise it can be drawn at top, start, end or bottom.</description>
    </attribute>
    <attribute>
      <name>animationDuration</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The duration of the animation for the chart components in milliseconds.
      Animation can be turned off if the animationDuration is set to 0. The default value is 1000ms.</description>
    </attribute>
    <attribute>
      <name>YMajorGridLineCount</name>
      <rtexprvalue>false</rtexprvalue>
      <description>This attribute controls the number of horizontal major grid lines displayed in the chart.
      For horizontal charts(horizontalBar, stackedHorizontalBar) this attribute controls the horizontal major grid lines.
      The default is 3.</description>
    </attribute>
    <attribute>
      <name>YMinorGridLineCount</name>
      <rtexprvalue>false</rtexprvalue>
      <description>This attribute controls the number of minor grid lines displayed within a major grid section.
      The default value is -1, which means it varies per chart type. Currently it is used only for gauge charts 
      with a default of 3.</description>
    </attribute>
    <attribute>
      <name>XMajorGridLineCount</name>
      <rtexprvalue>false</rtexprvalue>
      <description>This attribute controls the number of vertical major grid lines displayed in the chart.
      The default value is -1, which implies that the vertical major grid lines are controlled by the groupLabels 
      in the chart model. This parameter along with the groupLabels provide flexibility in labeling the
      groups. For e.g. one can display a vertical bar chart with 2 years data. Only quarters may be labeled and XMajorGridLineCount can 
      be 1 for splitting the data into two sections.</description>
    </attribute>
    <attribute>
      <name>maxPrecision</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The maximum precision of the numbers displayed on the yAxis(xAxis for horizontal charts). 
      The default is 0.</description>
    </attribute>
    <attribute>
      <name>gradientsUsed</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Specifies if gradients are used to display chart elements. 
      By default the chart elements use gradients.</description>
    </attribute>
    <attribute>
      <name>tooltipsVisible</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Specifies if tooltips are displayed or not.</description>
    </attribute>
  </tag>
  <tag>
    <name>chooseColor</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreChooseColorTag</tag-class>
    <description>The chooseColor control creates a palette for picking colors.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>colorData</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the list of colors for the component</description>
    </attribute>
    <attribute>
      <name>customColorData</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the list of custom colors for the component</description>
    </attribute>
    <attribute>
      <name>width</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the width of the standard palette in cells</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>chooseDate</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreChooseDateTag</tag-class>
    <description>The chooseDate component is used in conjunction with a 
          selectInputDate to allow the user to quickly select a date value without 
          having to navigate to a secondary window.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>minValue</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The minimum value allowed for the Date value.
When set to a fixed value on a tag, this will be parsed as an ISO 8601 date.
ISO 8601 dates are of the form "yyyy-MM-dd"
(for example: 2002-02-15).  All other uses require java.util.Date objects.</description>
    </attribute>
    <attribute>
      <name>maxValue</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The maximum value allowed for the Date value.
When set to a fixed value on a tag, this will be parsed as an ISO 8601 date.
ISO 8601 dates are of the form "yyyy-MM-dd"
(for example: 2002-02-15).  All other uses require java.util.Date objects.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>column</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.data.CoreColumnTag</tag-class>
    <description>Component that is used as a child of the Table component. The Column
component defines the header, footer and data for a single column in the
Table.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>sortProperty</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The property that is displayed by this Column. This is the
            property that the framework might use to (for example) sort  
            the Table's data.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>align</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The alignment for this column. The legal values are "start", "end" and "center", for left-justified, right-justified, and center-justified respectively in LTR display. The default value is "start".</description>
    </attribute>
    <attribute>
      <name>defaultSortOrder</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The default sort order of the column. The legal values are "ascending" or "descending" for ascending sorting or descending sorting on a first click respectively. The default value is "ascending".</description>
    </attribute>
    <attribute>
      <name>width</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the preferred width of this column, e.g., "30%", "100px".</description>
    </attribute>
    <attribute>
      <name>headerText</name>
      <rtexprvalue>false</rtexprvalue>
      <description>text to display in the header of the column.  This is a convenience that generates output equivalent to adding a "header" facet containing an outputText.</description>
    </attribute>
    <attribute>
      <name>noWrap</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not the column contents should be allowed to wrap</description>
    </attribute>
    <attribute>
      <name>headerNoWrap</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not the column header
should be allowed to wrap</description>
    </attribute>
    <attribute>
      <name>sortable</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;whether or not the column is sortable. A sortable column has a clickable header that (when clicked) sorts the table by that column's property. Note that in order for a column to be sortable, this attribute must be set to "true" and the underlying model must support sorting by this column's property. &lt;p&gt; This column's "sortProperty" attribute must be set if sorting is desired.&lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>separateRows</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not the children of this column should be rendered on separate rows. Setting this attribute to true will cause each child to render in its own row. Setting this to false will cause all the children to be rendered in one cell, which will rowSpan across the rows of the Columns whose children are rendered on separate rows.

    This attribute is not supported on the following agent types:
 phone, voice.</description>
    </attribute>
    <attribute>
      <name>rowHeader</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Whether or not this column is a row header column.</description>
    </attribute>
  </tag>
  <tag>
    <name>commandButton</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.nav.CoreCommandButtonTag</tag-class>
    <description>The commandButton control creates a button representation of a UIXCommand.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>action</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a reference to an action method sent by the command component,
              or the static outcome of an action</description>
    </attribute>
    <attribute>
      <name>actionListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an action listener</description>
    </attribute>
    <attribute>
      <name>returnListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an return listener</description>
    </attribute>
    <attribute>
      <name>launchListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a launch listener</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether data validation - client-side or
            server-side -
          will be skipped when
          events are generated by this component.

          When immediate is true, the command's action and
          ActionListeners, including the default ActionListener
          provided by the JavaServer Faces implementation,
          will be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.  Because
          validation runs during Process Validators (after
          Apply Request Values, but before Invoke Application),
          setting immediate to true will skip validation.</description>
    </attribute>
    <attribute>
      <name>text</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the textual label of the button.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the button should be disabled.</description>
    </attribute>
    <attribute>
      <name>textAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "text"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "T&amp;amp;amp;ext" will
              set the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to this button.
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              &lt;p&gt;
              If the same access key appears in multiple input fields in the 
              same page of output, the rendering user agent will cycle among 
              the elements accessed by the similar keys. Note that user agents 
              are inconsistent about dealing with two links having same access 
              key, and so the cycling behavior is dependent on what the user agent 
              provides.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute
                &lt;strong&gt;must&lt;/strong&gt; exist in the
                &lt;code&gt;Text&lt;/code&gt; attribute of this button instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey.
                The easiest, and most convenient
                way to specify both the text and the mnemonic together is
                to use textAndAccessKey.
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>partialSubmit</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the action should be done through a partial page submit
            or not.
            Default is false: no partial page submit.</description>
    </attribute>
    <attribute>
      <name>blocking</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If set to TRUE the component will start blocking user input when the
     action is initiated. The blocking will stop when a response is received
     from the server.</description>
    </attribute>
    <attribute>
      <name>icon</name>
      <rtexprvalue>false</rtexprvalue>
      <description>An URL to an image to use for an icon displayed in the button.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>useWindow</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Indicates whether processes launched by this command should be launched in a secondary dialog window.</description>
    </attribute>
    <attribute>
      <name>windowHeight</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Height of the window, if this command is used to launch a window.</description>
    </attribute>
    <attribute>
      <name>windowWidth</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Width of the window, if this command is used to launch a window.</description>
    </attribute>
  </tag>
  <tag>
    <name>commandLink</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.nav.CoreCommandLinkTag</tag-class>
    <description>The commandLink control creates a link representation of a UIXCommand.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>action</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a reference to an action method sent by the command component,
              or the static outcome of an action</description>
    </attribute>
    <attribute>
      <name>actionListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an action listener</description>
    </attribute>
    <attribute>
      <name>returnListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an return listener</description>
    </attribute>
    <attribute>
      <name>launchListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a launch listener</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether data validation - client-side or
            server-side -
          will be skipped when
          events are generated by this component.

          When immediate is true, the command's action and
          ActionListeners, including the default ActionListener
          provided by the JavaServer Faces implementation,
          will be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.  Because
          validation runs during Process Validators (after
          Apply Request Values, but before Invoke Application),
          setting immediate to true will skip validation.</description>
    </attribute>
    <attribute>
      <name>text</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the textual label of the link.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the link should be considered disabled.
              This attribute only has meaning when links are used in certain
              container types, such as global headers and tab bars.</description>
    </attribute>
    <attribute>
      <name>textAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "text"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "T&amp;amp;amp;ext" will
              set the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to this link.
              For accessibility reasons, this functionality is not 
              supported in screen reader mode.
              &lt;p&gt;
              If the same access key appears in multiple input fields in the 
              same page of output, the rendering user agent will cycle among 
              the elements accessed by the similar keys. Note that user agents 
              are inconsistent about dealing with two links having same access 
              key, and so the cycling behavior is dependent on what the user agent 
              provides.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute
                &lt;strong&gt;must&lt;/strong&gt; exist in the
                &lt;code&gt;Text&lt;/code&gt; attribute of this Link instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey.
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>partialSubmit</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the action should be done through a partial page submit
            or not.
            Default is false: no partial page submit.</description>
    </attribute>
    <attribute>
      <name>blocking</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If set to TRUE the component will start blocking user input when the
     action is initiated. The blocking will stop when a response is received
     from the server.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onblur</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onfocus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>useWindow</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Indicates whether processes launched by this command should be launched in a secondary dialog window.</description>
    </attribute>
    <attribute>
      <name>windowHeight</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Height of the window, if this command is used to launch a window.</description>
    </attribute>
    <attribute>
      <name>windowWidth</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Width of the window, if this command is used to launch a window.</description>
    </attribute>
  </tag>
  <tag>
    <name>commandNavigationItem</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.nav.CoreCommandNavigationItemTag</tag-class>
    <description>The commandNavigationItem control creates a navigation item representation of a UIXCommand.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>action</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a reference to an action method sent by the command component,
              or the static outcome of an action</description>
    </attribute>
    <attribute>
      <name>actionListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an action listener</description>
    </attribute>
    <attribute>
      <name>returnListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an return listener</description>
    </attribute>
    <attribute>
      <name>launchListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a launch listener</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether data validation - client-side or
            server-side -
          will be skipped when
          events are generated by this component.

          When immediate is true, the command's action and
          ActionListeners, including the default ActionListener
          provided by the JavaServer Faces implementation,
          will be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.  Because
          validation runs during Process Validators (after
          Apply Request Values, but before Invoke Application),
          setting immediate to true will skip validation.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>useWindow</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Indicates whether processes launched by this command should be launched in a secondary dialog window.</description>
    </attribute>
    <attribute>
      <name>windowHeight</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Height of the window, if this command is used to launch a window.</description>
    </attribute>
    <attribute>
      <name>windowWidth</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Width of the window, if this command is used to launch a window.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to this item.
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              &lt;p&gt;
                If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle among
              the elements accessed by the similar keys.  Note that user agents 
              are inconsistent about dealing with two links having same access 
              key, and so the cycling behavior is dependent on what the user agent 
              provides.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute
                &lt;strong&gt;must&lt;/strong&gt; exist in the
                &lt;code&gt;text&lt;/code&gt; attribute of this item instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey.
                The easiest, and most convenient
                way to specify both the text and the mnemonic together is
                to use textAndAccessKey.
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>destination</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The URI this component references when activated.  This is an alternative to using an action.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If value is "true", the component becomes non-interactive.  Otherwise,the default value is "false" and component assumes its expected behavior.</description>
    </attribute>
    <attribute>
      <name>icon</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a URI specifying the location of a target image.</description>
    </attribute>
    <attribute>
      <name>partialSubmit</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the action should be done through a partial page submit
            or not.
            Default is false: no partial page submit.</description>
    </attribute>
    <attribute>
      <name>selected</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the item is selected.</description>
    </attribute>
    <attribute>
      <name>visited</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the item is in visited state. Depending on 
      the renderer the item may appear in a visited style, if true. This 
      property is currently used only within the a train component.</description>
    </attribute>
    <attribute>
      <name>targetFrame</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the target frame for the go component.</description>
    </attribute>
    <attribute>
      <name>text</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the text of the item.</description>
    </attribute>
    <attribute>
      <name>textAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "text"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "T&amp;amp;amp;ext" will
              set the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
  </tag>
  <tag>
    <name>document</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.CoreDocumentTag</tag-class>
    <description>&lt;html&gt;
          The document tag creates each of the standard root elements of an HTML page:  &amp;lt;html&amp;gt;, &amp;lt;body&amp;gt;, and &amp;lt;head&amp;gt;.&lt;/html&gt;</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>title</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The title of the document.  (This title doesn't have to match the
            title on any contained panelPage.)</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onload</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onload Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onunload</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onunload Javascript handler.</description>
    </attribute>
    <attribute>
      <name>initialFocusId</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the id of the component to which you want the
        focus to be when the full page renders. The accessibility-mode
        must be set to "inaccessible" for this feature to be on.

    This attribute is not supported on the following agent types:
 phone, voice.</description>
    </attribute>
  </tag>
  <tag>
    <name>form</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.CoreFormTag</tag-class>
    <description>&lt;html&gt;
          The form tag creates an HTML &amp;lt;form&amp;gt; element.&lt;/html&gt;</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>targetFrame</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the target frame for the form</description>
    </attribute>
    <attribute>
      <name>usesUpload</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the form supports file upload.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>defaultCommand</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The id attribute of the command button whose action would be invoked by default for form submit on hitting enter on any of the input fields of the form.</description>
    </attribute>
    <attribute>
      <name>onsubmit</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Javascript code to be called when the form is submitted.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>goButton</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.nav.CoreGoButtonTag</tag-class>
    <description>The goButton creates a push button that navigates directly
to another location instead of delivering an action.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>destination</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the URI this go component references</description>
    </attribute>
    <attribute>
      <name>text</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the textual label of the go component.   Go components will
             also render children elements (including text nodes), though not
             all subclasses of the go component will necessarily support
             children.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the go component should be considered disabled.
              This attribute only has meaning when go components are used in certain
              container types, such as global headers and tab bars.</description>
    </attribute>
    <attribute>
      <name>textAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "text"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "T&amp;amp;amp;ext" will
              set the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to this component.
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              &lt;p&gt;
              If the same access key appears in multiple input fields in the 
              same page of output, the rendering user agent will cycle among 
              the elements accessed by the similar keys. Note that user agents 
              are inconsistent about dealing with two links having same access 
              key, and so the cycling behavior is dependent on what the user agent 
              provides.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute
                &lt;strong&gt;must&lt;/strong&gt; exist in the
                &lt;code&gt;Text&lt;/code&gt; attribute of this go component instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey.
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>targetFrame</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the target frame for the go component.</description>
    </attribute>
    <attribute>
      <name>icon</name>
      <rtexprvalue>false</rtexprvalue>
      <description>An URL to an image to use for an icon displayed in the button.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onblur</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onfocus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
  </tag>
  <tag>
    <name>goLink</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.nav.CoreGoLinkTag</tag-class>
    <description>The goLink tag is an HTML link.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>destination</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the URI this go component references</description>
    </attribute>
    <attribute>
      <name>text</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the textual label of the go component.   Go components will
             also render children elements (including text nodes), though not
             all subclasses of the go component will necessarily support
             children.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the go component should be considered disabled.
              This attribute only has meaning when go components are used in certain
              container types, such as global headers and tab bars.</description>
    </attribute>
    <attribute>
      <name>textAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "text"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "T&amp;amp;amp;ext" will
              set the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to this component.
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              &lt;p&gt;
              If the same access key appears in multiple input fields in the 
              same page of output, the rendering user agent will cycle among 
              the elements accessed by the similar keys. Note that user agents 
              are inconsistent about dealing with two links having same access 
              key, and so the cycling behavior is dependent on what the user agent 
              provides.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute
                &lt;strong&gt;must&lt;/strong&gt; exist in the
                &lt;code&gt;Text&lt;/code&gt; attribute of this go component instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey.
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>targetFrame</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the target frame for the go component.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onblur</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onfocus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
  </tag>
  <tag>
    <name>icon</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.output.CoreIconTag</tag-class>
    <description>The icon component renders a skin specific icon.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>name</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a  name identifying which icon should be rendered.
              Valid values depend on the skin-family. Shortcut names
              exist for ".AFRequiredIcon", ".AFWarningIcon",
              ".AFInfoIcon", and ".AFErrorIcon". They are "required",
              "warning", "info", and "error" respectively.
              See the Apache Trinidad skins documentation for a list of icon names.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>image</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.output.CoreImageTag</tag-class>
    <description>The image control creates an image tag.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>source</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the URI specifying the location of the image resource.</description>
    </attribute>
    <attribute>
      <name>longDescURL</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an URL that specifies a link to a long description of the image.
This description should supplement the short description.</description>
    </attribute>
    <attribute>
      <name>imageMapType</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If a server-side image map is desired, specify "server" and place
              inside a CoreGoLink component.  The acceptable values
              are "server" or "none"; defaults to "none".</description>
    </attribute>
  </tag>
  <tag>
    <name>importScript</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.CoreImportScriptTag</tag-class>
    <description>The importScript tag supports importing the built-in scripts
         provided by Apache Trinidad.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>names</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a series of function names</description>
    </attribute>
  </tag>
  <tag>
    <name>inputColor</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreInputColorTag</tag-class>
    <description>The inputColor control creates a text field for entering colors and
          a button for picking colors from a palette.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
    </attribute>
    <attribute>
      <name>required</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
    </attribute>
    <attribute>
      <name>validator</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a validator method</description>
    </attribute>
    <attribute>
      <name>valueChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an value change listener</description>
    </attribute>
    <attribute>
      <name>requiredMessageDetail</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>action</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a reference to an action method sent by the commandButton, or the static outcome of an action</description>
    </attribute>
    <attribute>
      <name>actionListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an action listener</description>
    </attribute>
    <attribute>
      <name>returnListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an return listener</description>
    </attribute>
    <attribute>
      <name>contentStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
    </attribute>
    <attribute>
      <name>compact</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If true, attempt to use less screen real-estate to display the 
          inputColor.  For example, this
          might cause the text area not to be rendered, and the color 
          swatch conveys the currently selected color.</description>
    </attribute>
    <attribute>
      <name>chooseId</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The id of the inline chooseColor component which can be used to
          update the Color value for this inputColor.</description>
    </attribute>
    <attribute>
      <name>readOnly</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is read-only.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is disabled.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label of the bean.</description>
    </attribute>
    <attribute>
      <name>simple</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired, 
tip), and may use simpler layout primitives</description>
    </attribute>
    <attribute>
      <name>columns</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the number of columns to display in the text
          control. If no value is specified, a default
          value will be derived from the current converter, if one
   is attached.</description>
    </attribute>
    <attribute>
      <name>onchange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when the value is changed.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onblur</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onfocus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>showRequired</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the 
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>labelAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>autoSubmit</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
    </attribute>
  </tag>
  <tag>
    <name>inputDate</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreInputDateTag</tag-class>
    <description>The inputDate component creates a text field for entering dates and
          a button for picking dates from a calendar.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
    </attribute>
    <attribute>
      <name>required</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
    </attribute>
    <attribute>
      <name>validator</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a validator method</description>
    </attribute>
    <attribute>
      <name>valueChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an value change listener</description>
    </attribute>
    <attribute>
      <name>requiredMessageDetail</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>action</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a reference to an action method sent by the commandButton, or the static outcome of an action</description>
    </attribute>
    <attribute>
      <name>actionListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an action listener</description>
    </attribute>
    <attribute>
      <name>returnListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an return listener</description>
    </attribute>
    <attribute>
      <name>contentStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
    </attribute>
    <attribute>
      <name>chooseId</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The id of the chooseDate component which can be used to
              pick the Date value for this inputDate.</description>
    </attribute>
    <attribute>
      <name>readOnly</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is read-only.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is disabled.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label of the bean.</description>
    </attribute>
    <attribute>
      <name>simple</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired,
tip), and may use simpler layout primitives</description>
    </attribute>
    <attribute>
      <name>columns</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the number of columns to display in the text
          control. If no value is specified, a default
          value will be derived from the current converter, if one
   is attached.</description>
    </attribute>
    <attribute>
      <name>maximumLength</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the maximum number of characters that
          can be entered into the text control. Note that
          this value is independent of the "columns" displayed.</description>
    </attribute>
    <attribute>
      <name>onchange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when the value is changed.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onblur</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onfocus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>showRequired</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>labelAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>autoSubmit</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
    </attribute>
  </tag>
  <tag>
    <name>inputFile</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreInputFileTag</tag-class>
    <description>The inputFile component is a component that can
          be used to upload a file.  It supports displaying a label,
          text, and messages.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
    </attribute>
    <attribute>
      <name>required</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
    </attribute>
    <attribute>
      <name>validator</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a validator method</description>
    </attribute>
    <attribute>
      <name>valueChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an value change listener</description>
    </attribute>
    <attribute>
      <name>requiredMessageDetail</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>contentStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onblur</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onfocus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onchange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when the value is changed.</description>
    </attribute>
    <attribute>
      <name>onselect</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when text becomes selected.</description>
    </attribute>
    <attribute>
      <name>columns</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The size of the text control specified by the number of characters shown.The default value depends on the browser.</description>
    </attribute>
    <attribute>
      <name>labelAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;An attribute that will simultaneously set both the "label"and "accessKey" attributes from a single value, usingconventional ampersand notation. For example, setting this attribute to "T&amp;amp;ext" willset the label to "Text" and the access key to 'e'.&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>showRequired</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the 
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; For accessibility reasons, this functionality is not supported in screen reader mode. If the same access key appears in multiple locations in the same page of output, the rendering user agent will cycle among the elements accessed by the similar keys. &lt;p&gt; This attribute is sometimes referred to as the "mnemonic". &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is disabled.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label of the bean.</description>
    </attribute>
    <attribute>
      <name>simple</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired, 
tip), and may use simpler layout primitives</description>
    </attribute>
  </tag>
  <tag>
    <name>inputHidden</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreInputHiddenTag</tag-class>
    <description>The inputHidden tag adds a value that
          will be submitted with a page, but not displayed
          to the user.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
    </attribute>
    <attribute>
      <name>required</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
    </attribute>
    <attribute>
      <name>validator</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a validator method</description>
    </attribute>
    <attribute>
      <name>valueChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an value change listener</description>
    </attribute>
    <attribute>
      <name>requiredMessageDetail</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
  </tag>
  <tag>
    <name>inputListOfValues</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreInputListOfValuesTag</tag-class>
    <description>The inputListOfValues is a text field that also supports
launching a dialog to assist users in entering a value.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
    </attribute>
    <attribute>
      <name>required</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
    </attribute>
    <attribute>
      <name>validator</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a validator method</description>
    </attribute>
    <attribute>
      <name>valueChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an value change listener</description>
    </attribute>
    <attribute>
      <name>requiredMessageDetail</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>action</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a reference to an action method sent by the commandButton, or the static outcome of an action</description>
    </attribute>
    <attribute>
      <name>actionListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an action listener</description>
    </attribute>
    <attribute>
      <name>returnListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an return listener</description>
    </attribute>
    <attribute>
      <name>contentStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
    </attribute>
    <attribute>
      <name>searchDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the search description for the button that launches the dialog.
           This text is commonly used by user agents to display tooltip
           help text.</description>
    </attribute>
    <attribute>
      <name>icon</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the URI for an alternative image on the button to launch the dialog</description>
    </attribute>
    <attribute>
      <name>readOnly</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is read-only.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is disabled.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label of the bean.</description>
    </attribute>
    <attribute>
      <name>simple</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired, 
tip), and may use simpler layout primitives</description>
    </attribute>
    <attribute>
      <name>onchange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when the value is changed.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onblur</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onfocus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>showRequired</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the 
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>labelAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>onselect</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when text becomes selected.</description>
    </attribute>
    <attribute>
      <name>columns</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the number of columns to display in the text
          control. If no value is specified, a default
          of 30 columns is used. One column is approximately one character
          in the browser's current display font.</description>
    </attribute>
    <attribute>
      <name>maximumLength</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the maximum number of characters that
          can be entered into the text control. Note that
          this value is independent of the "cols" displayed.</description>
    </attribute>
    <attribute>
      <name>autoSubmit</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
    </attribute>
    <attribute>
      <name>windowWidth</name>
      <rtexprvalue>false</rtexprvalue>
      <description>width of the window, if this command is
used to launch a window.</description>
    </attribute>
    <attribute>
      <name>windowHeight</name>
      <rtexprvalue>false</rtexprvalue>
      <description>height of the window, if this command is
used to launch a window.</description>
    </attribute>
  </tag>
  <tag>
    <name>inputNumberSpinbox</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreInputNumberSpinboxTag</tag-class>
    <description>The inputNumberSpinbox tag creates a browser input widget;
it is used to enter numbers and it has a spinbox to quickly increment or decrement the number.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
    </attribute>
    <attribute>
      <name>required</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
    </attribute>
    <attribute>
      <name>validator</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a validator method</description>
    </attribute>
    <attribute>
      <name>valueChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an value change listener</description>
    </attribute>
    <attribute>
      <name>requiredMessageDetail</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>contentStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
    </attribute>
    <attribute>
      <name>readOnly</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is read-only.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is disabled.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the short description of the bean.  This text
         is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label of the bean.</description>
    </attribute>
    <attribute>
      <name>simple</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired, 
tip), and may use simpler layout primitives</description>
    </attribute>
    <attribute>
      <name>onchange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when the value is changed.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onblur</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onfocus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;a CSS style class to use for this component. 
      The styleClass attribute value is rendered on the root dom element.
      We provide some public style classes you can use that will affect only the 'content' piece of the component: 
      AFFieldTextMarker, AFFieldTextLTRMarker, AFFieldNumberMarker.
      &lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the inline CSS style for this element</description>
    </attribute>
    <attribute>
      <name>showRequired</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the 
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
    </attribute>
    <attribute>
      <name>columns</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the number of columns to display in the text
          control. If no value is specified, a default
          of 1 columns is used. One column is approximately one character
          in the browser's current display font.</description>
    </attribute>
    <attribute>
      <name>maximum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The maximum number allowed in the input field.</description>
    </attribute>
    <attribute>
      <name>minimum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The minimum number allowed in the input field.</description>
    </attribute>
    <attribute>
      <name>stepSize</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The step size by which the spinbox will increase or decrease the number in the input.</description>
    </attribute>
    <attribute>
      <name>onselect</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when text becomes selected.</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>labelAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>autoSubmit</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
    </attribute>
  </tag>
  <tag>
    <name>inputText</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreInputTextTag</tag-class>
    <description>The inputText tag creates a browser input text widget;
it may be single-line, multi-line, or a "secret" password field.
It supports displaying a label, text, and messages.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
    </attribute>
    <attribute>
      <name>required</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
    </attribute>
    <attribute>
      <name>validator</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a validator method</description>
    </attribute>
    <attribute>
      <name>valueChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an value change listener</description>
    </attribute>
    <attribute>
      <name>requiredMessageDetail</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>contentStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
    </attribute>
    <attribute>
      <name>rows</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the number of rows to display in the text control.
              The default is one. Setting to more than one row
              precludes the use of some attributes, such as
              "secret".</description>
    </attribute>
    <attribute>
      <name>wrap</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the type of text wrapping to be used in a multi-row
              text control. This attribute is ignored for single
              row inputText. By default (or "soft"), multirow text
        wraps visually, but does not include carriage returns in the
              submitted value.  Setting this to "off" will disable wrapping;
              the multirow text will scroll horizontally.  Setting it to "hard"
              specifies that the value of the text should include any
              carriage returns needed to wrap the lines.</description>
    </attribute>
    <attribute>
      <name>secret</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a boolean value that only applies to single line text
              controls. When set to "true", it hides the actual
              value of the text from the user, and will
              prevent the actual "value" from being shown to the user.</description>
    </attribute>
    <attribute>
      <name>readOnly</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is read-only.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is disabled.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the short description of the bean.  This text
         is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label of the bean.</description>
    </attribute>
    <attribute>
      <name>simple</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired, 
tip), and may use simpler layout primitives</description>
    </attribute>
    <attribute>
      <name>onchange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when the value is changed.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onblur</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onfocus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;a CSS style class to use for this component. 
      The styleClass attribute value is rendered on the root dom element.
      We provide some public style classes you can use that will affect only the 'content' piece of the component: 
      AFFieldTextMarker, AFFieldTextLTRMarker, AFPhoneFieldTextMarker, AFPostalCodeFieldTextMarker, 
      AFAddressFieldTextMarker, AFFieldNumberMarker.
      You can still modify the public style definitions for these marker style classes
      and it will be picked up by using these "Marker" style class 
      because in our base skin implementation we map to the public style by doing this:
      af|inputText.AFFieldNumberMarker af|inputText::content {-tr-rule-ref:selector(".AFFieldNumber")}. 
      We recommend that you do not add style properties to the "Marker" style classes. 
      They are used solely in the css descendant selector to point to the content pseudo-element.&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the inline CSS style for this element</description>
    </attribute>
    <attribute>
      <name>showRequired</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the 
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
    </attribute>
    <attribute>
      <name>columns</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the number of columns to display in the text
          control. If no value is specified, a default
          of 30 columns is used. One column is approximately one character
          in the browser's current display font.</description>
    </attribute>
    <attribute>
      <name>maximumLength</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the maximum number of characters that
          can be entered into the text control. Note that
          this value is independent of the "cols" displayed.
          If set to 0 or less, the maximumLength is ignored.</description>
    </attribute>
    <attribute>
      <name>onselect</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when text becomes selected.</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>labelAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>autoSubmit</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
    </attribute>
  </tag>
  <tag>
    <name>legend</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.output.CoreObjectTag</tag-class>
    <description>The legend adds a legend describing the meaning of an icon.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>name</name>
      <rtexprvalue>false</rtexprvalue>
      <description>A string identifying which icon should
be described.  Only one value is currently supported: "required".</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>media</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.output.CoreMediaTag</tag-class>
    <description>The media component displays media content, such as audio, video,
          or image in a player embedded in the user agent.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>width</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; width in pixels to reserve for the media player plus its content.
            As the extra width needed for the media player controls can vary
            from media player to media player and depend on the controls
            displayed in the media player, it is recommended that the
            "innerWidth" attribute be used in preference to this attribute.
            &lt;p&gt;
            If both the "width" and "innerWidth" attributes are specified,
            the "width" attribute will be used.
            &lt;/p&gt;
            &lt;p&gt;
            If no width is specified, the width of the media control is
            determined by calculating the "innerWidth" and adding any extra
            width necessary to display the media player controls.
            &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>height</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; height in pixels to reserve for the media player plus its content.
            As the extra height needed for the media player controls can vary
            from media player to media player and depend on the controls
            displayed in the media player, it is recommended that the
            "innerHeight" attribute be used in preference to this attribute.
            &lt;p&gt;
            If both the "height" and "innerHeight" attributes are specified,
            the "height" attribute will be used.
            &lt;/p&gt;            
            &lt;p&gt;
            If no height is specified, the height of the media control is
            determined by calculating the "innerHeight" and adding any extra
            height necessary to display the media player controls.
            &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>innerWidth</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; width in pixels to reserve for the media player content.  This
            will typically be set to the pixel width of the media resource
            to display.
            &lt;p&gt;
            If no "innerWidth" is specified, the "innerWidth" will be defaulted
            based on the content type of the media resource to play.
            &lt;/p&gt;            
            &lt;p&gt;
            If both the "width" and "innerWidth" attributes are specified,
            the "width" attribute will be used.
            &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>innerHeight</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; height in pixels to reserve for the media player content.  This
            will typically be set to the pixel height of the media resource
            to display.
            &lt;p&gt;
            If no "innerHeight" is specified, the "innerHeight" will be defaulted
            based on the content type of the media resource to play.
            &lt;/p&gt;            
            &lt;p&gt;
            If both the "height" and "innerHeight" attributes are specified,
            the "height" attribute will be used.
            &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>source</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the URI specifying the location of the media resource.  If no
            contentType is specified, the contentType will be inferred from
            the extension of the source attribute.</description>
    </attribute>
    <attribute>
      <name>autostart</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a boolean value that controls whether the media resource loads
            and plays automatically without user initiation.  When set to "true",
            the media resource will load and play as soon as possible.</description>
    </attribute>
    <attribute>
      <name>playCount</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the number of times the media resource will play.  If set to "0",
            the resource will loop until the user stops the playing.</description>
    </attribute>
    <attribute>
      <name>contentType</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the MIME type of the media content returned by the "source" URI.
            This attribute is used as a hint when determining which player to
            pick, how the controls of the player are to be configured, and
            the default size of the media player.  If it isn't specified, an
            attempt will be made to derive this information from the extension
            of the source URI.</description>
    </attribute>
    <attribute>
      <name>standbyText</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Message to display in the media player while the media resource
              is loading.</description>
    </attribute>
    <attribute>
      <name>player</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; which media player to use to play the media resource. If possible,
              the media control will accomodate this request.  However, if
              the requested player is not available on the user agent, or does
              not support playing the media resource, an alternate player
              will be used instead.  In all cases, the "link" player is used
              as a fallback if no other player is available, or the requested
              player fails for some reason.
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;code&gt;"none"&lt;/code&gt;
                  &lt;p&gt;
                   use a link in the user agent page to launch the playing of the
                   media resource.
                  &lt;/p&gt;
                  &lt;p&gt;
                   This player setting uses the least amount of space on the page
                   and uses the user agent's built in content type mapping
                   to determine how to display the media resource.
                  &lt;/p&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;"quicktime"&lt;/code&gt;
                  &lt;p&gt;
                   use the Apple QuickTime player.
                  &lt;/p&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;"windows"&lt;/code&gt;
                  &lt;p&gt;
                   use the Windows Media Player.
                  &lt;/p&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;"real"&lt;/code&gt;
                  &lt;p&gt;
                   use the Real Player.
                  &lt;/p&gt;
                &lt;/li&gt;
              &lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>controls</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; the set of controls made available to the user for controlling
              the media playback.  The actual set of controls displayed for the
              same value may differ between players.  Likewise, the amount of
              space occupied by the controls will differ from media player to
              media player.  This can cause problems if the size of the
              media control has been specified by the "width" and "height"
              attributes rather than "innerWidth" and "innerHeight".
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;code&gt;"none"&lt;/code&gt;
                  &lt;p&gt;
                   don't show any controls for the media player and don't allow
                   control access through alternate means, such as context menus.
                  &lt;/p&gt;
                  &lt;p&gt;
                   This value is typically only used in kiosk-type applications
                   where no user control over the playing of the media is allowed.
                   It is typically used in conjunction with setting the
                   "autostart" attribute to "true", and the "playCount" attribute
                   to "0" to cause the media play immediately and then loop.
                  &lt;/p&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;"noneVisible"&lt;/code&gt;
                  &lt;p&gt;
                   don't show any controls for the media player but allow control
                   access through alternate means, such as context menus.
                  &lt;/p&gt;
                  &lt;p&gt;
                   This value is typically only used in applications where user
                   control over the playing of the media is allowed, but
                   not encouraged.  It is typically used in conjunction with
                   setting the "autostart" attribute to "true", and the
                   "playCount" attribute to "0" to cause the media to play
                   immediately and then loop.
                  &lt;/p&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;"minimal"&lt;/code&gt;
                  &lt;p&gt;
                    show a minimal set of controls for playing media on the media
                    player. 
                  &lt;/p&gt;
                  &lt;p&gt;
                   This value gives users control over the most
                   important media playing controls, while occupying the least
                   amount of additional space on the user agent.
                  &lt;/p&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;"typical"&lt;/code&gt;
                  &lt;p&gt;
                   show the typical set of controls for playing media on the
                   media player.
                  &lt;/p&gt;
                  &lt;p&gt;
                   This value, the default, gives users control over the most
                   common media playing controls, without occupying an inordinate
                   amount of extra space on the user agent.
                  &lt;/p&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;"all"&lt;/code&gt;
                  &lt;p&gt;
                   Show all available controls for playing media on the media player
                  &lt;/p&gt;
                  &lt;p&gt;
                   Using this setting can cause large amount of additional space
                   to be required, depending on the media player used.
                  &lt;/p&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
              &lt;p&gt;
                The default of this attribute is &lt;code&gt;"typical"&lt;/code&gt;.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>message</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.output.CoreMessageTag</tag-class>
    <description>Component that displays a message on behalf of a component.
Trinidad input components typically support automatically showing
their own messages, so this tag should be used only when
setting the "simple" attribute to true.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>for</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the relative ID from this component to the component whose messages will be displayed</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>message</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the error, warning, or informational text.</description>
    </attribute>
    <attribute>
      <name>messageType</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the type of the message; acceptable values
          are "error", "warning", "info", and "none".  Defaults to "none".</description>
    </attribute>
  </tag>
  <tag>
    <name>messages</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.output.CoreMessagesTag</tag-class>
    <description>The messages bean is used at the top of an application page to give
        the user important messaging information.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>message</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the main text message for the box.</description>
    </attribute>
    <attribute>
      <name>text</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the overridden title text.</description>
    </attribute>
    <attribute>
      <name>globalOnly</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether to render all messages or just global messages. Normally
global messages are rendered followed by messages for individual
components. If this attribute is set to true, only the global
messages will be rendered.</description>
    </attribute>
  </tag>
  <tag>
    <name>navigationPane</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.nav.CoreNavigationPaneTag</tag-class>
    <description>The navigationPane component creates a series of navigation items representing one level in a navigation hierarchy.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>var</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the hierarchy of navigation data - must be of type 
            org.apache.myfaces.trinidad.model.MenuModel</description>
    </attribute>
    <attribute>
      <name>level</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the level, based on a 0 based index, in the menuModel to render based on the focusPath of the menuModel.</description>
    </attribute>
    <attribute>
      <name>varStatus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this 
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Whether the component is disabled.</description>
    </attribute>
    <attribute>
      <name>hint</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;How the navigational items are displayed.  Options are:
              &lt;ul&gt;&lt;li&gt;bar
                &lt;/li&gt;&lt;li&gt;buttons
                &lt;/li&gt;&lt;li&gt;choice
                &lt;/li&gt;&lt;li&gt;list
                &lt;/li&gt;&lt;li&gt;tabs
                &lt;/li&gt;&lt;/ul&gt;
               &lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>title</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Text that describes the items.  (This attribute is only applicable if the rendering hint supports it, e.g. "choice".)</description>
    </attribute>
  </tag>
  <tag>
    <name>navigationTree</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.nav.CoreNavigationTreeTag</tag-class>
    <description>The Trinidad NavigationTree is used to display data that is structured in a hierarchical format.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>var</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).</description>
    </attribute>
    <attribute>
      <name>rowDisclosureListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an ExpansionListener</description>
    </attribute>
    <attribute>
      <name>disclosedRowKeys</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the set of disclosed rows for this component.
Each entry in the set is a rowKey.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the hierarchy of tree data - must be of type 
            org.apache.myfaces.trinidad.model.MenuModel</description>
    </attribute>
    <attribute>
      <name>startLevel</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the starting level, based on a 0 based index, in the menuModel to render based on the focusPath of the menuModel.</description>
    </attribute>
    <attribute>
      <name>varStatus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this 
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether data validation 
          should be skipped when row disclosure
          events are generated by this component.

          When immediate is false (the default), events will
          be delivered during the Invoke Application phase, which
          will trigger validation.  When set to true,  events
          will be executed during the Apply Request Values phase.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>outputDocument</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.output.CoreOutputDocumentTag</tag-class>
    <description>The outputDocument component supports styled text with line breaks.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>titleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the style class of the title. This property will be 
         considered only if a title facet is used.</description>
    </attribute>
    <attribute>
      <name>separatorClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the style class of the separator. This property will be 
         considered only if a separator facet is used.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>outputFormatted</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.output.CoreOutputFormattedTag</tag-class>
    <description>The outputFormatted bean accepts a string in its "value" attribute
        containing a very limited set of HTML markup and outputs formatted
        results.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>styleUsage</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the style usage, intended to make it easier to
              put the correct style on the text.
              Set this attribute when the outputFormatted
              is for instruction text, page stamp text, or inContextBranding
              text.
              The valid values are "instruction" ,
              "pageStamp", and "inContextBranding".
              If styleUsage and styleClass attributes are both set,
              the styleClass attribute takes precedence.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>outputLabel</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.output.CoreOutputLabelTag</tag-class>
    <description>Component that displays a label for a form component.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set.
              For accessibility reasons, this functionality is not supported in 
              screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>showRequired</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the 
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
    </attribute>
    <attribute>
      <name>valueAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>for</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the ID of the component that this component
refers to</description>
    </attribute>
  </tag>
  <tag>
    <name>outputText</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.output.CoreOutputTextTag</tag-class>
    <description>The outputText component supports styled text.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>truncateAt</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the length at which the text should automatically begin
              truncating.  When set to zero (the default), the string
              will never truncate.  Values from one to thirteen will
              be treated as thirteen - the outputText component will not
              truncate strings shorter than thirteen characters.</description>
    </attribute>
    <attribute>
      <name>description</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an additional description to be attached
to the text, for use in improving accessibility.  The description will
be available to screen readers and other accessibility agents, but will
not be otherwise visible.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>escape</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; an attribute controlling whether output will
be escaped for the current markup language or not.  This attribute
defaults to true, and should only be set to false if absolutely necessary.
When set to false, you may exposed to cross-site scripting attacks if
the value of this component is any way derived from values supplied
by a user;  see &lt;code&gt;outputFormatted&lt;/code&gt; for a safe
alternative.  In addition, nearly all attributes are ignored when "escape"
is set to false (e.g., "styleClass" is not output).&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>page</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.nav.CorePageTag</tag-class>
    <description>The Page component is similar to the PanelPage component, except that instead of having navigation1, navigation2, navigation3, and navigationGlobal facets for adding navigation item information, the user binds a model object and a stamp to render these areas.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>var</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).</description>
    </attribute>
    <attribute>
      <name>rowDisclosureListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an ExpansionListener</description>
    </attribute>
    <attribute>
      <name>disclosedRowKeys</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the set of disclosed rows for this component.
Each entry in the set is a rowKey.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the hierarchy of menu data - must be of type 
            org.apache.myfaces.trinidad.model.MenuModel</description>
    </attribute>
    <attribute>
      <name>varStatus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this 
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether data validation 
          should be skipped when row disclosure
          events are generated by this component.

          When immediate is false (the default), events will
          be delivered during the Invoke Application phase, which
          will trigger validation.  When set to true,  events
          will be executed during the Apply Request Values phase.</description>
    </attribute>
    <attribute>
      <name>chromeType</name>
      <rtexprvalue>false</rtexprvalue>
      <description>what the chromeType is for the page: compact or expanded. If
              compact, the productBranding will be shown alongside the 
              corporate branding instead of below the corporate branding.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>panelAccordion</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CorePanelAccordionTag</tag-class>
    <description>The panelAccordion control creates, contains and shows a series of items defined by showDetailItem nodes.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>discloseNone</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Indicates whether a minimum of one detail item must be
disclosed at a time.  Use "false" (the default) to keep a minimum of one
detail item disclosed at all times.  Use "true" to make it possible for
all items to be collapsed.</description>
    </attribute>
    <attribute>
      <name>discloseMany</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Indicates whether more than one detail item may be
disclosed at a time.  Use "false" (the default) to keep a maximum of
one detail item disclosed at all times.  Use "true" to make it
possible for multiple detail items to be disclosed.</description>
    </attribute>
  </tag>
  <tag>
    <name>panelBorderLayout</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CorePanelBorderLayoutTag</tag-class>
    <description>The panelBorderLayout component is a layout element which lays out all of its
          children consecutively in its middle, and supports the following
          facets: top, bottom, left, right, start, end, innerTop, innerBottom, innerLeft, innerRight, innerStart, and innerEnd</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>panelBox</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CorePanelBoxTag</tag-class>
    <description>The panelBox is used to place ancillary information on a page,
offset by a certain color.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>text</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The header of the content container.</description>
    </attribute>
    <attribute>
      <name>background</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the appearance type of the content container. It should be one of "light", 
"medium", "dark", or "transparent"</description>
    </attribute>
    <attribute>
      <name>icon</name>
      <rtexprvalue>false</rtexprvalue>
      <description>An URL to an image to use for the icon of
the content container.</description>
    </attribute>
    <attribute>
      <name>contentStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The inline style of the content region.</description>
    </attribute>
  </tag>
  <tag>
    <name>panelButtonBar</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CorePanelButtonBarTag</tag-class>
    <description>The panelButtonBar lays out a set of buttons.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>halign</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the horizontal alignment to one of start, end, left,
right, or center.</description>
    </attribute>
  </tag>
  <tag>
    <name>panelChoice</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CorePanelChoiceTag</tag-class>
    <description>The panelChoice control creates, contains and shows a series of items defined by showDetailItem nodes.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the user-visible text of the item</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>labelAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>position</name>
      <rtexprvalue>false</rtexprvalue>
      <description>position of the control elements. Defaults to
         "start", if not specified. Other value supported is"top".</description>
    </attribute>
    <attribute>
      <name>alignment</name>
      <rtexprvalue>false</rtexprvalue>
      <description>alignment of the elements. Defaults to
         "center", if not specified. Other values are "start",
         "end", "top", and "bottom".</description>
    </attribute>
  </tag>
  <tag>
    <name>panelFormLayout</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CorePanelFormLayoutTag</tag-class>
    <description>The panelFormLayout lays out input form controls, such that their labels and fields line up vertically.  The children of this component are input controls, they are inputText, inputHidden, inputFile, inputColor, inputListOfValues, inputDate, selectBooleanCheckBox, selectBooleanRadio, selectOneChoice, selectOneListBox, selectOneRadio, selectManyListBox and panelLabelAndMessage.  These components must have their "simple" attribute set to false (the default).  For cases where other controls are required inside panelFormLayout, wrap them in a panelLabelAndMessage.

This component can be used to lay out multiple columns using the rows attribute.  The children are laid out down and then across.  Note that this layout is not a table layout so there is no overall table row.  Instead, rows are unique per column; in one column a row may consume more vertical space than a nearby row in another column.

The panelFormLayout is an example of one of the components that has support for grouping its children components.
If you place panelFormLayout child items inside of a group, separators will be drawn around the group of form items if adjacent to other form items (separators won't be drawn at the top if the group is the first item in the column or, similarly, at the bottom if the group is the last item in the column).
Grouped panelFormLayout items are kept in the same column of the panelFormLayout even when the assigned rows attribute is set to a value smaller than the number of items in the group.
The panelFormLayout component also supports the group component in its footer facet so you can place more than one item in the footer.  You can even group footer items one additional time to get separators to appear.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>fieldWidth</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The preferred width of the field.  Usually a percentage, but may be specified as either a percentage or an absolute number of pixels.  If the width is not specified, it will default appropriately.  If specified as a percentage the labelWidth plus the fieldWidth should add up to 100%, regardless of the number of columns.  If the fieldWidth is specified and is a percentage the labelWidth will be derived appropriately if not specified.

    This attribute is not supported on the following agent types:
 phone, voice.</description>
    </attribute>
    <attribute>
      <name>labelWidth</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The preferred width of the label.  Usually a percentage, but may be specified as either a percentage or an absolute number of pixels.  If the width is not specified, it will default appropriately.  If specified as a percentage the labelWidth plus the fieldWidth should add up to 100%, regardless of the number of columns.  If the labelWidth is specified and is a percentage the fieldWidth will be derived appropriately if not specified.

    This attribute is not supported on the following agent types:
 phone, voice.</description>
    </attribute>
    <attribute>
      <name>maxColumns</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Sets the maximum number of columns to show.  This attribute defaults to 3 and 2 on PDAs.  If this panelFormLayout is inside of another panelFormLayout, this will always be 1.

    This attribute is not supported on the following agent types:
 phone, voice.</description>
    </attribute>
    <attribute>
      <name>rows</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Sets the number of rows after which to start a new column.  This attribute defaults to Integer.MAX_VALUE.  The number of rows actually rendered depends also on the "maxColumns" property.  If the children will not fit in the given number of rows and columns, the number of rows will increase to accomodate the children.

    This attribute is not supported on the following agent types:
 phone, voice.</description>
    </attribute>
  </tag>
  <tag>
    <name>panelGroupLayout</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CorePanelGroupLayoutTag</tag-class>
    <description>A panel component that displays its children in a group.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>layout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Type of layout, either "vertical", "horizontal" (no wrapping) or"default" (horizontal with wrapping).</description>
    </attribute>
  </tag>
  <tag>
    <name>panelHeader</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CorePanelHeaderTag</tag-class>
    <description>The panelHeader control places a label and optional icon at the top of a section.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>text</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label of the header.</description>
    </attribute>
    <attribute>
      <name>icon</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the URI for the icon of the header.</description>
    </attribute>
    <attribute>
      <name>messageType</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Set if an error, info, confirmation, or warning header is needed.</description>
    </attribute>
    <attribute>
      <name>size</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Size of this panelHeader. The largest is 0 and corresponds to an H1 header
        the smallest is 5 and corresponds to an H6 Header.  Note that this version of the tag will 
        display all sizes above 2 the same as size 2. Setting the size to a negative number will
        allow the header to be calculated according to its parent header.  The default value for 
        this property is -1.</description>
    </attribute>
  </tag>
  <tag>
    <name>panelHorizontalLayout</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CorePanelHorizontalLayoutTag</tag-class>
    <description>The panelHorizontalLayout control is a layout element that
arranges its children horizontally. The vertical and horizontal alignment
can be specified.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>valign</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the vertical alignment to one of top, bottom, middle, or baseline.</description>
    </attribute>
    <attribute>
      <name>halign</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the horizontal alignment to one of start, end, left,
right, or center.</description>
    </attribute>
  </tag>
  <tag>
    <name>panelLabelAndMessage</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CorePanelLabelAndMessageTag</tag-class>
    <description>This component lays out a label and children.  Typically, the only child of this component will be an input element of some sort, but as many children as necessary can be added.  When using panelLabelAndMessage with Trinidad input components, you should always set simple="true" on the input components.  Non-simple Trinidad input components already effectively have all the functionality of panelLabelAndMessage.
      To lay out multiple panelLabelAndMessage components - or multiple non-simple Trinidad input components - you can use the panelForm component.  When panelLabelAndMessage components are placed inside a panelForm the labels will line up.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>showRequired</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the panel should show an indicator that its contents are required.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label of the bean.</description>
    </attribute>
    <attribute>
      <name>labelStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Specifies inline styles for the label portion of the component, e.g. "vertical-align: bottom;" to align the label to the bottom of the container.</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>labelAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>An attribute that will simultaneously set both the "label" and "accessKey" attributes from a single value, using conventional ampersand notation.  For example, setting this attribute to "T&amp;amp;ext" will set the label to "Text" and the access key to 'e'.</description>
    </attribute>
    <attribute>
      <name>for</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The ID of the component that this component's label refers to.</description>
    </attribute>
  </tag>
  <tag>
    <name>panelList</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CorePanelListTag</tag-class>
    <description>The panelList control outputs each visible child
          in a list with a bullet next to it.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>listStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Styles the list. For example, you can style the list to be squares like this:
      listStyle='list-style-type:square'</description>
    </attribute>
    <attribute>
      <name>rows</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Sets
                  the number of rows after which to start a new column. 
                  This attribute defaults to Integer.MAX_VALUE.
                  The number of rows actually rendered depends also on the
                  "maxColumns" attribute. 
                  If the children will not fit in the given number 
                  of rows and columns, the number of rows will 
                  increase to accomodate the children.

    This attribute is not supported on the following agent types:
 phone, voice.</description>
    </attribute>
    <attribute>
      <name>maxColumns</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Sets
                  the maximum number of columns to show. 
                  This attribute defaults to 3 and defaults to 2 for PDA's

    This attribute is not supported on the following agent types:
 phone, voice.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>panelPage</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CorePanelPageTag</tag-class>
    <description>PanelPage lays out an entire page.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>auxiliary1Size</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Specifies the number of pixels that the auxiliary1 content should consume (this is a width if the orientationis "start" or "end" or a height if the orientation is "bottom").</description>
    </attribute>
    <attribute>
      <name>auxiliary2Size</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Specifies the number of pixels that the auxiliary2 content should consume (this is a width if the orientationis "start" or "end" or a height if the orientation is "bottom").</description>
    </attribute>
    <attribute>
      <name>auxiliaryGlobalSize</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Specifies the number of pixels that the auxiliaryGlobal content should consume (this is a width if the orientationis "start" or "end" or a height if the orientation is "bottom").</description>
    </attribute>
  </tag>
  <tag>
    <name>panelPageHeader</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CorePanelPageHeaderTag</tag-class>
    <description>PanelPageHeader lays out the top portion of a page.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>chromeType</name>
      <rtexprvalue>false</rtexprvalue>
      <description>what the chromeType is for the page: compact or expanded. If
              compact, the productBranding will be shown alongside the 
              corporate branding instead of below the corporate branding.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>panelPopup</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CorePanelPopupTag</tag-class>
    <description>The panelPopup is used to place ancillary information on a page,
made visible via a clickable link.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>icon</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The text to render as a link to launch the popup panel.  If the 'trigger'
        facet is defined, then this attribute is ignored.  If the 'text' attribute is also specified, 
        then the icon and text will both be rendered.</description>
    </attribute>
    <attribute>
      <name>text</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The text to render as a link to launch the popup panel.  If the 'trigger'
        facet is defined, then this attribute is ignored.</description>
    </attribute>
    <attribute>
      <name>title</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The title of the panel when visible.  The titlebar is not rendered if this attribute
        is not specified.</description>
    </attribute>
    <attribute>
      <name>modal</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The display mode of the panel.  Defaults to "false" (non-modal). 
        Non-Modal panels will close when the user clicks off the panel. Modal popups are 
        rendered with a titlebar and close icon.  Clicking the close icon will close the 
        modal popup.</description>
    </attribute>
    <attribute>
      <name>alignment</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The position of the content container when visible. Defaults to
         "none" (appears relative control), if not specified. Other values are "center" (centered on screen).</description>
    </attribute>
    <attribute>
      <name>contentStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The inline style of the content region.</description>
    </attribute>
    <attribute>
      <name>triggerStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The inline style of the trigger.  This style 
        will be applied trigger specified by either the text 
        and/or icon attribute, or the 'trigger' facet.</description>
    </attribute>
    <attribute>
      <name>width</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Set the width of the popup.  If not present the width defaults to the width of the content.</description>
    </attribute>
    <attribute>
      <name>height</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Set the height of the popup.  If not present the width defaults to the height of the content.</description>
    </attribute>
  </tag>
  <tag>
    <name>panelRadio</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CorePanelRadioTag</tag-class>
    <description>The panelRadio control creates, contains and shows a series of items defined by showDetailItem nodes.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the user-visible text of the item</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>position</name>
      <rtexprvalue>false</rtexprvalue>
      <description>position of the control elements. Defaults to
         "start", if not specified. Other value supported is"top".</description>
    </attribute>
    <attribute>
      <name>alignment</name>
      <rtexprvalue>false</rtexprvalue>
      <description>alignment of the elements. Defaults to
         "center", if not specified. Other values are "start",
         "end", "top", and "bottom".</description>
    </attribute>
  </tag>
  <tag>
    <name>panelSideBar</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CorePanelSideBarTag</tag-class>
    <description>The panelSideBar control renders a side navigation bar.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>width</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the width of the panelSideBar in pixels or as a percentage.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>panelTabbed</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CorePanelTabbedTag</tag-class>
    <description>The panelTabbed control creates, contains and shows a series of items defined by showDetailItem nodes.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>position</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the position of the tab bar. Defaults to
             "both", if not specified. Other values are "above" and "below".</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>panelTip</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CorePanelTipTag</tag-class>
    <description>The panelTip tag provides a container for page or section level hints
to the user.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>poll</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.CorePollTag</tag-class>
    <description>This components polls the server periodically so that any dependent
          components get a chance to update themselves.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether data validation 
          should be skipped when poll
          events are generated by this component.

          When immediate is false (the default), events will
          be delivered during the Invoke Application phase, which
          will trigger validation.  When set to true,  events
          will be executed during the Apply Request Values phase.</description>
    </attribute>
    <attribute>
      <name>pollListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a poll listener</description>
    </attribute>
    <attribute>
      <name>interval</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the time between poll events, in milliseconds. 
            The default is 5000. If in screen-reader mode, 
            make sure the interval is long enough for the
            screen reader to read through the re-render before a 
            new poll occurs.</description>
    </attribute>
  </tag>
  <tag>
    <name>processChoiceBar</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.nav.CoreProcessChoiceBarTag</tag-class>
    <description>ProcessChoiceBar is a UIXProcess component that renders a previous
          button, a choice bar, and a next button.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>var</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the hierarchy of data - must be of type 
            org.apache.myfaces.trinidad.model.MenuModel</description>
    </attribute>
    <attribute>
      <name>varStatus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this 
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>progressIndicator</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.output.CoreProgressIndicatorTag</tag-class>
    <description>The progressIndicator component can be used to give users 
          an understanding that there is a back end task in progress.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The data model being used by this progress component.
              The model should be of type 
              org.apache.myfaces.trinidad.model.BoundedRangeModel.</description>
    </attribute>
    <attribute>
      <name>action</name>
      <rtexprvalue>false</rtexprvalue>
      <description>A reference to an action method sent by the progress component, 
              or the static outcome of an action. This is invoked when the task
              under progress is complete.</description>
    </attribute>
    <attribute>
      <name>actionListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>A method reference to an action listener.
            This is invoked after the task in progress is complete.</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether data validation - client-side or
            server-side -
          will be skipped when
          events are generated by this component.

          When immediate is true, the command's action and
          ActionListeners, including the default ActionListener
          provided by the JavaServer Faces implementation,
          will be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.  Because
          validation runs during Process Validators (after
          Apply Request Values, but before Invoke Application),
          setting immediate to true will skip validation.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>resetButton</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreResetButtonTag</tag-class>
    <description>The reset button control creates a push button which will
          reset the content of a form.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>text</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the textual label of the button.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the reset button should be disabled.</description>
    </attribute>
    <attribute>
      <name>textAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "text"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "T&amp;amp;amp;ext" will
              set the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to this button.
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              &lt;p&gt;
                If the same access key appears in multiple locations in the
                same page of output, the rendering user agent will cycle
                among the elements accessed by the similar keys.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute
                &lt;strong&gt;must&lt;/strong&gt; exist in the
                &lt;code&gt;Text&lt;/code&gt; attribute of this button instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey.
                The easiest, and most convenient
                way to specify both the text and the mnemonic together is
                to use textAndAccessKey.
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>selectBooleanCheckbox</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreSelectBooleanCheckboxTag</tag-class>
    <description>The selectBooleanCheckbox control is a standard browser input
          checkbox.  It supports displaying a prompt, text, and messages.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
    </attribute>
    <attribute>
      <name>required</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
    </attribute>
    <attribute>
      <name>validator</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a validator method</description>
    </attribute>
    <attribute>
      <name>valueChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an value change listener</description>
    </attribute>
    <attribute>
      <name>requiredMessageDetail</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>selected</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not the component is
              currently selected.  This is a typesafe alias for the "value"
              attribute.</description>
    </attribute>
    <attribute>
      <name>contentStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
    </attribute>
    <attribute>
      <name>autoSubmit</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
    </attribute>
    <attribute>
      <name>readOnly</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is read-only.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is disabled.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label of the bean.</description>
    </attribute>
    <attribute>
      <name>simple</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired, 
tip), and may use simpler layout primitives</description>
    </attribute>
    <attribute>
      <name>text</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the text value of the checkbox.</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to this checkbox.
          For accessibility reasons, this functionality is not supported in 
          screen reader mode.
          &lt;p&gt;
            If the same access key appears in multiple locations in the
            same page of output, the rendering user agent will cycle
            among the elements accessed by the similar keys.
          &lt;/p&gt;&lt;p&gt;
            This attribute is sometimes referred to as the "mnemonic".
          &lt;/p&gt;&lt;p&gt;
            The character specified by this attribute
            &lt;strong&gt;must&lt;/strong&gt;exist in the
            &lt;code&gt;text&lt;/code&gt;attribute of this selectBooleanCheckbox instance.
            If it does not, the user will receive no visual indication of
            the existence of the accessKey.
            &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>textAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "text"
          and "accessKey" attributes from a single value, using
          conventional ampersand ('&amp;amp;') notation.
          &lt;p&gt;
          For example, setting this attribute to "T&amp;amp;amp;ext" will
          set the text to "Text" and the access key to 'e'.
          &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>onchange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when the value is changed.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onblur</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onfocus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>showRequired</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the 
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
    </attribute>
  </tag>
  <tag>
    <name>selectBooleanRadio</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreSelectBooleanRadioTag</tag-class>
    <description>The selectBooleanRadio control maps to a single browser input
          radio, grouped with all other selectBooleanRadio controls
          in the same form which share the same "group" attribute.
          It supports displaying a prompt, text, and messages.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
    </attribute>
    <attribute>
      <name>required</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
    </attribute>
    <attribute>
      <name>validator</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a validator method</description>
    </attribute>
    <attribute>
      <name>valueChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an value change listener</description>
    </attribute>
    <attribute>
      <name>requiredMessageDetail</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>selected</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not the component is
              currently selected.  This is a typesafe alias for the "value"
              attribute.</description>
    </attribute>
    <attribute>
      <name>contentStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
    </attribute>
    <attribute>
      <name>autoSubmit</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
    </attribute>
    <attribute>
      <name>readOnly</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is read-only.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is disabled.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label of the bean.</description>
    </attribute>
    <attribute>
      <name>simple</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired, 
tip), and may use simpler layout primitives</description>
    </attribute>
    <attribute>
      <name>text</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the text of the radio button.</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to this radio button.
          For accessibility reasons, this functionality is not supported in 
          screen reader mode.
          &lt;p&gt;
            If the same access key appears in multiple locations in the
            same page of output, the rendering user agent will cycle
            among the elements accessed by the similar keys.
          &lt;/p&gt;&lt;p&gt;
            This attribute is sometimes referred to as the "mnemonic".
          &lt;/p&gt;&lt;p&gt;
            The character specified by this attribute
            &lt;strong&gt;must&lt;/strong&gt;exist in the
            &lt;code&gt;text&lt;/code&gt;attribute of this CheckBox instance.
            If it does not, the user will receive no visual indication of
            the existence of the accessKey.
            &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>textAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "text"
          and "accessKey" attributes from a single value, using
          conventional ampersand ('&amp;amp;') notation.
          &lt;p&gt;
          For example, setting this attribute to "T&amp;amp;amp;ext" will
          set the text to "Text" and the access key to 'e'.
          &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>group</name>
      <rtexprvalue>false</rtexprvalue>
    </attribute>
    <attribute>
      <name>onchange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when the value is changed.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onblur</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onfocus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>showRequired</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the 
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
    </attribute>
  </tag>
  <tag>
    <name>selectItem</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreSelectItemTag</tag-class>
    <description>The selectItem tag represents a single item that the user
may select from a list, choice, radio, or shuttle Trinidad control.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value used to identify this item when the
              parent control is submitted to the server.  If no value is specified
              for a particular item, the item's contents will be used as its
              value.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the user-visible text of the item</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the item is disabled.  By default, no
          items are disabled.</description>
    </attribute>
    <attribute>
      <name>longDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the description associated with this option. 
        This is used in selectManyShuttle and selectOrderShuttle, and ignored otherwise.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the bean.  This text
         is commonly used by user agents to display advisory information about the option.</description>
    </attribute>
  </tag>
  <tag>
    <name>selectManyCheckbox</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreSelectManyCheckboxTag</tag-class>
    <description>The selectManyCheckbox component creates a component which allows
          the user to select many values from a series of checkboxes.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
    </attribute>
    <attribute>
      <name>required</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
    </attribute>
    <attribute>
      <name>validator</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a validator method</description>
    </attribute>
    <attribute>
      <name>valueChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an value change listener</description>
    </attribute>
    <attribute>
      <name>requiredMessageDetail</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>contentStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
    </attribute>
    <attribute>
      <name>layout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the control displays the buttons 
              horizontally or vertically.The valid values are "horizontal" and 
              "vertical",the default being "vertical".</description>
    </attribute>
    <attribute>
      <name>valuePassThru</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not the values are passed through to
        the client. When valuePassThru is false
        the value and the options' values
        are converted to indexes before being sent to the client. 
        Therefore, when valuePassThru is false, 
        there is no need to write your own converter when you are using custom Objects
        as your values and/or options.
        If you need to know the actual values on the client-side, then you can set 
        valuePassThru to true. This will pass the values through to the client, 
        using your custom converter if it is available; a custom converter is
        needed if you are using custom objects. The default is false.</description>
    </attribute>
    <attribute>
      <name>readOnly</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is read-only.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is disabled.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label of the bean.</description>
    </attribute>
    <attribute>
      <name>simple</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired, 
tip), and may use simpler layout primitives</description>
    </attribute>
    <attribute>
      <name>onchange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when the value is changed.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onblur</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onfocus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>showRequired</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the 
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>labelAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>autoSubmit</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
    </attribute>
  </tag>
  <tag>
    <name>selectManyListbox</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreSelectManyListboxTag</tag-class>
    <description>The selectManyListbox component creates a component which allows
          the user to select many values from a list of items.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
    </attribute>
    <attribute>
      <name>required</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
    </attribute>
    <attribute>
      <name>validator</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a validator method</description>
    </attribute>
    <attribute>
      <name>valueChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an value change listener</description>
    </attribute>
    <attribute>
      <name>requiredMessageDetail</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>contentStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
    </attribute>
    <attribute>
      <name>size</name>
      <rtexprvalue>false</rtexprvalue>
      <description>how many items should be visible.  Small values may be overridden if the platform cannot render a list of that size correctly.</description>
    </attribute>
    <attribute>
      <name>valuePassThru</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not the values are passed through to
        the client. When valuePassThru is false
        the value and the options' values
        are converted to indexes before being sent to the client. 
        Therefore, when valuePassThru is false, 
        there is no need to write your own converter when you are using custom Objects
        as your values and/or options.
        If you need to know the actual values on the client-side, then you can set 
        valuePassThru to true. This will pass the values through to the client, 
        using your custom converter if it is available; a custom converter is
        needed if you are using custom objects. The default is false.</description>
    </attribute>
    <attribute>
      <name>readOnly</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is read-only.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is disabled.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label of the bean.</description>
    </attribute>
    <attribute>
      <name>simple</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired, 
tip), and may use simpler layout primitives</description>
    </attribute>
    <attribute>
      <name>onchange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when the value is changed.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onblur</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onfocus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>showRequired</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the 
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>labelAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>autoSubmit</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
    </attribute>
  </tag>
  <tag>
    <name>selectManyShuttle</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreSelectManyShuttleTag</tag-class>
    <description>The selectManyShuttle component provides a mechanism for selecting
   multiple values from a list of values by allowing the user to move
   items between two lists.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
    </attribute>
    <attribute>
      <name>required</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
    </attribute>
    <attribute>
      <name>validator</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a validator method</description>
    </attribute>
    <attribute>
      <name>valueChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an value change listener</description>
    </attribute>
    <attribute>
      <name>requiredMessageDetail</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>valuePassThru</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not the values are passed through to
        the client. When valuePassThru is false
        the value and the options' values
        are converted to indexes before being sent to the client. 
        Therefore, when valuePassThru is false, 
        there is no need to write your own converter when you are using custom Objects
        as your values and/or options.
        If you need to know the actual values on the client-side, then you can set 
        valuePassThru to true. This will pass the values through to the client, 
        using your custom converter if it is available; a custom converter is
        needed if you are using custom objects. The default is false.</description>
    </attribute>
    <attribute>
      <name>readOnly</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is read-only.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is disabled.</description>
    </attribute>
    <attribute>
      <name>onchange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when the value is changed.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onblur</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onfocus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>size</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the display size(number of items) of the lists. The size 
              specified must be between 10 and 20 items. If the attribute is not 
              set or has a value less than 10, the size would have a default or 
              minimum value of 10. If the attribute value specified is more than 
              20 items, the size would have the maximum value of 20.</description>
    </attribute>
    <attribute>
      <name>leadingHeader</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the header of the leading list of the shuttle.</description>
    </attribute>
    <attribute>
      <name>trailingHeader</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the header of the trailing list of the shuttle.</description>
    </attribute>
    <attribute>
      <name>leadingDescShown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not the leading list has an area to display descriptions.</description>
    </attribute>
    <attribute>
      <name>trailingDescShown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not the trailing list has an area to display descriptions.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label for the shuttle that is used to identify the component only when displaying error messages. The label specified does not otherwise appear on the page.</description>
    </attribute>
  </tag>
  <tag>
    <name>selectOneChoice</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreSelectOneChoiceTag</tag-class>
    <description>The selectOneChoice component creates a menu-style component, which allows the user to select a single value from a list of items.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
    </attribute>
    <attribute>
      <name>required</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
    </attribute>
    <attribute>
      <name>validator</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a validator method</description>
    </attribute>
    <attribute>
      <name>valueChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an value change listener</description>
    </attribute>
    <attribute>
      <name>requiredMessageDetail</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>contentStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
    </attribute>
    <attribute>
      <name>unselectedLabel</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The label for the option that represents a value of null, meaning nothing is selected. If unselectedLabel is not set and if the component does not have a selected value, then an option with an empty string as the label and value is rendered as the first option in the choice box (if there isn't an empty option already defined). Once an option has been successfully selected, and if unselectedLabel is not set, then the empty option will not be rendered.</description>
    </attribute>
    <attribute>
      <name>labelAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>valuePassThru</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not the values are passed through to
        the client. When valuePassThru is false
        the value and the options' values
        are converted to indexes before being sent to the client. 
        Therefore, when valuePassThru is false, 
        there is no need to write your own converter when you are using custom Objects
        as your values and/or options.
        If you need to know the actual values on the client-side, then you can set 
        valuePassThru to true. This will pass the values through to the client, 
        using your custom converter if it is available; a custom converter is
        needed if you are using custom objects. The default is false.</description>
    </attribute>
    <attribute>
      <name>readOnly</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is read-only.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is disabled.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label of the bean.</description>
    </attribute>
    <attribute>
      <name>simple</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired, 
tip), and may use simpler layout primitives</description>
    </attribute>
    <attribute>
      <name>onchange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when the value is changed.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onblur</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onfocus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>showRequired</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the 
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>autoSubmit</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
    </attribute>
  </tag>
  <tag>
    <name>selectOneListbox</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreSelectOneListboxTag</tag-class>
    <description>The selectOneListbox  component creates a component which allows
          the user to select a single value from a list of items.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
    </attribute>
    <attribute>
      <name>required</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
    </attribute>
    <attribute>
      <name>validator</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a validator method</description>
    </attribute>
    <attribute>
      <name>valueChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an value change listener</description>
    </attribute>
    <attribute>
      <name>requiredMessageDetail</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>contentStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
    </attribute>
    <attribute>
      <name>size</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The number of items that should be visible in the list. The renderer may constrain the maximum and minimum number of items shown.</description>
    </attribute>
    <attribute>
      <name>valuePassThru</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not the values are passed through to
        the client. When valuePassThru is false
        the value and the options' values
        are converted to indexes before being sent to the client. 
        Therefore, when valuePassThru is false, 
        there is no need to write your own converter when you are using custom Objects
        as your values and/or options.
        If you need to know the actual values on the client-side, then you can set 
        valuePassThru to true. This will pass the values through to the client, 
        using your custom converter if it is available; a custom converter is
        needed if you are using custom objects. The default is false.</description>
    </attribute>
    <attribute>
      <name>unselectedLabel</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label for an additional item that indicates no selection has
   been made.  When the user selects this item, "required" validation will
   not pass, or a null value will be set if the component is not "required".</description>
    </attribute>
    <attribute>
      <name>readOnly</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is read-only.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is disabled.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label of the bean.</description>
    </attribute>
    <attribute>
      <name>simple</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired, 
tip), and may use simpler layout primitives</description>
    </attribute>
    <attribute>
      <name>onchange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when the value is changed.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onblur</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onfocus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>showRequired</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the 
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>labelAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>autoSubmit</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
    </attribute>
  </tag>
  <tag>
    <name>selectOneRadio</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreSelectOneRadioTag</tag-class>
    <description>The selectOneRadio component creates a component
          which allows the user to select a single value from a set of items
          displayed as a series of radio buttons.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
    </attribute>
    <attribute>
      <name>required</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
    </attribute>
    <attribute>
      <name>validator</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a validator method</description>
    </attribute>
    <attribute>
      <name>valueChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an value change listener</description>
    </attribute>
    <attribute>
      <name>requiredMessageDetail</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>contentStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to attach to the content of the component.  For example, you can set the width of that portion to 100 pixels by setting this attribute to "width: 100px".</description>
    </attribute>
    <attribute>
      <name>unselectedLabel</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label for an additional item that indicates no selection has
been made.  When the user selects this item, "required" validation will
not pass, or a null value will be set if the component is not "required".</description>
    </attribute>
    <attribute>
      <name>layout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the control displays the buttons 
              horizontally or vertically.The valid values are "horizontal" and 
              "vertical", the default being "vertical".</description>
    </attribute>
    <attribute>
      <name>valuePassThru</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not the values are passed through to
        the client. When valuePassThru is false
        the value and the options' values
        are converted to indexes before being sent to the client. 
        Therefore, when valuePassThru is false, 
        there is no need to write your own converter when you are using custom Objects
        as your values and/or options.
        If you need to know the actual values on the client-side, then you can set 
        valuePassThru to true. This will pass the values through to the client, 
        using your custom converter if it is available; a custom converter is
        needed if you are using custom objects. The default is false.</description>
    </attribute>
    <attribute>
      <name>readOnly</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is read-only.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is disabled.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label of the bean.</description>
    </attribute>
    <attribute>
      <name>simple</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey,  showRequired, 
tip), and may use simpler layout primitives</description>
    </attribute>
    <attribute>
      <name>onchange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when the value is changed.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onblur</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onfocus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>showRequired</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the 
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>labelAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>autoSubmit</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).</description>
    </attribute>
  </tag>
  <tag>
    <name>selectOrderShuttle</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreSelectOrderShuttleTag</tag-class>
    <description>The selectOrderShuttle component provides a mechanism for selecting
   multiple values from a list of values by allowing the user to move
   items between two lists, and reordering that list of values.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
    </attribute>
    <attribute>
      <name>converter</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a converter object</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.</description>
    </attribute>
    <attribute>
      <name>required</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.</description>
    </attribute>
    <attribute>
      <name>validator</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a validator method</description>
    </attribute>
    <attribute>
      <name>valueChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an value change listener</description>
    </attribute>
    <attribute>
      <name>requiredMessageDetail</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>reorderOnly</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the shuttle is in "reorder only" mode, where the user can reorder the list of values, but cannot add or remove them.</description>
    </attribute>
    <attribute>
      <name>valuePassThru</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not the values are passed through to
        the client. When valuePassThru is false
        the value and the options' values
        are converted to indexes before being sent to the client. 
        Therefore, when valuePassThru is false, 
        there is no need to write your own converter when you are using custom Objects
        as your values and/or options.
        If you need to know the actual values on the client-side, then you can set 
        valuePassThru to true. This will pass the values through to the client, 
        using your custom converter if it is available; a custom converter is
        needed if you are using custom objects. The default is false.</description>
    </attribute>
    <attribute>
      <name>readOnly</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is read-only.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the element is disabled.</description>
    </attribute>
    <attribute>
      <name>onchange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>event handler for when the value is changed.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onblur</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component losing the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>onfocus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the event handler for the component gaining the focus.

    This attribute is not supported on the following agent types:
 pda, phone, voice.</description>
    </attribute>
    <attribute>
      <name>size</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the display size(number of items) of the lists. The size 
              specified must be between 10 and 20 items. If the attribute is not 
              set or has a value less than 10, the size would have a default or 
              minimum value of 10. If the attribute value specified is more than 
              20 items, the size would have the maximum value of 20.</description>
    </attribute>
    <attribute>
      <name>leadingHeader</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the header of the leading list of the shuttle.</description>
    </attribute>
    <attribute>
      <name>trailingHeader</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the header of the trailing list of the shuttle.</description>
    </attribute>
    <attribute>
      <name>leadingDescShown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not the leading list has an area to display descriptions.</description>
    </attribute>
    <attribute>
      <name>trailingDescShown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not the trailing list has an area to display descriptions.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label for the shuttle that is used to identify the component only when displaying error messages. The label specified does not otherwise appear on the page.</description>
    </attribute>
  </tag>
  <tag>
    <name>selectRangeChoiceBar</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.data.CoreSelectRangeChoiceBarTag</tag-class>
    <description>SelectRangeChoiceBar is used to allow the user to select a range of
          records to display among a larger set of records. 
          It allows the user to move back and forth through these records 
          through a choice and buttons.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>var</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the name of the EL variable that provides access to the "start"
              and "end" variables that point to the start and end row in
              the each range from the data model. This can be used to customize
              the range text.</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether data validation 
          should be skipped when range change
          events are generated by this component.

          When immediate is false (the default), events will
          be delivered during the Invoke Application phase, which
          will trigger validation.  When set to true,  events
          will be executed during the Apply Request Values phase.</description>
    </attribute>
    <attribute>
      <name>rangeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a rangeChange listener that
         will be called when a new range is selected.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt; the data model being used by this component.
The specific model class is
        &lt;code&gt;org.apache.myfaces.trinidad.model.CollectionModel&lt;/code&gt;.

        You may also use other model instances, e.g.,  
        &lt;code&gt;java.util.List&lt;/code&gt;  ,
        array, and  &lt;code&gt;javax.faces.model.DataModel&lt;/code&gt;.
        This component will automatically convert the instance
        into a &lt;code&gt;CollectionModel&lt;/code&gt;.&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rows</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the maximum number of rows to display in a single range of rows.
Some ranges might have fewer
than the number of rows specified by this attribute (eg: the last range
might have an insufficient number of rows).
To display all rows at once, set this attribute to 0.</description>
    </attribute>
    <attribute>
      <name>first</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the index of the first row in the currently range of rows.
This index is zero-based. This attribute is used to control
which range of rows to display to the user.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>separator</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.output.CoreSeparatorTag</tag-class>
    <description>The separator is used anywhere to create a horizontal separator 
between items.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
  </tag>
  <tag>
    <name>showDetail</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CoreShowDetailTag</tag-class>
    <description>The showDetail provides a means of toggling a group of components between being 
hidden or shown.  If the "prompt" facet is present, the component in the facet 
will be put next to the disclosure icon.  If the prompt facet is not present
but either the disclosedText or the undisclosedText attributes are set, then
the text in that attribute will be displayed next to the disclosure icon.
If the prompt facet is not set but both the disclosedText and undisclosedText 
attributes are set then the disclosedText will be displayed when disclosed="true" 
and undisclosedText will be displayed when disclosed="false".  If the prompt 
facet is not set and neither the disclosedText or undisclosedText attributes are
set, then the label will default to "Hide" for the disclosed text and "Show" for
the undisclosed text.  For the purposes of EL, setting disclosedText or 
undisclosedText to null is the same as not setting the value.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>disclosed</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not to disclose the children

    This attribute is not supported on the following agent types:
 phone, voice.</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether data validation - client-side or
            server-side - should be skipped when
          events are generated by this component.

          When immediate is false (the default), the disclosure event will
          be delivered during the Invoke Application phase, which
          will trigger validation.  When set to true, the disclosure
          event will be executed during the Apply Request Values phase.</description>
    </attribute>
    <attribute>
      <name>disclosureListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a disclosure listener</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>disclosedText</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the text to display when the children are disclosed.  If this attribute is set
and the undisclosedText attribute is not set, this text will be displayed for
both the disclosed state AND the undisclosed state.

    This attribute is not supported on the following agent types:
 phone, voice.</description>
    </attribute>
    <attribute>
      <name>undisclosedText</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the text to display when the children are undisclosed.  If this attribute is set
and the disclosedText attribute is not set, this text will be displayed for
both the disclosed state AND the undisclosed state.

    This attribute is not supported on the following agent types:
 phone, voice.</description>
    </attribute>
  </tag>
  <tag>
    <name>showDetailHeader</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CoreShowDetailHeaderTag</tag-class>
    <description>The showDetailHeader provides a means of toggling the contents under a header 
between being disclosed(shown) or undisclosed(hidden).</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>disclosed</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not to disclose the children

    This attribute is not supported on the following agent types:
 phone, voice.</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether data validation - client-side or
            server-side - should be skipped when
          events are generated by this component.

          When immediate is false (the default), the disclosure event will
          be delivered during the Invoke Application phase, which
          will trigger validation.  When set to true, the disclosure
          event will be executed during the Apply Request Values phase.</description>
    </attribute>
    <attribute>
      <name>disclosureListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a disclosure listener</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>text</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the label of the header.</description>
    </attribute>
    <attribute>
      <name>icon</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the URI for the icon of the header.</description>
    </attribute>
    <attribute>
      <name>messageType</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Set if an error, info, confirmation, or warning header is needed.</description>
    </attribute>
    <attribute>
      <name>size</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Size of this panelHeader. The largest is 0 and corresponds to an H1 header
        the smallest is 5 and corresponds to an H6 Header.  Note that this version of the tag will 
        display all sizes above 2 the same as size 2. Setting the size to a negative number will
        allow the header to be calculated according to its parent header.  The default value for 
        this property is -1.</description>
    </attribute>
  </tag>
  <tag>
    <name>showDetailItem</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.layout.CoreShowDetailItemTag</tag-class>
    <description>The showDetailItem represents a single item with specific
contents that can be selected by users to be shown in a showOne component.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>disclosed</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not to disclose the children

    This attribute is not supported on the following agent types:
 phone, voice.</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether data validation - client-side or
            server-side - should be skipped when
          events are generated by this component.

          When immediate is false (the default), the disclosure event will
          be delivered during the Invoke Application phase, which
          will trigger validation.  When set to true, the disclosure
          event will be executed during the Apply Request Values phase.</description>
    </attribute>
    <attribute>
      <name>disclosureListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a disclosure listener</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>disabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If value is "true", the component becomes non-interactive.  
Otherwise,the default value is "false" and component assumes 
its expected behavior.</description>
    </attribute>
    <attribute>
      <name>text</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the textual label of the showDetailItem.</description>
    </attribute>
    <attribute>
      <name>textAndAccessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>An attribute that will simultaneously set both the "text"
and "accessKey" attributes from a single value, using
conventional ampersand ('&amp;amp;') notation.
&lt;p&gt;
  For example, setting this attribute to "T&amp;amp;amp;ext" will
  set the text to "Text" and the access key to 'e'.
&lt;/p&gt;</description>
    </attribute>
    <attribute>
      <name>accessKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Character used to gain quick access to this showDetailItem.
For accessibility reasons, this functionality is not supported 
in screen reader mode.
&lt;p&gt;
  If the same access key appears in multiple locations in the
  same page of output, the rendering user agent will cycle
  among the elements accessed by the similar keys.
&lt;/p&gt;
&lt;p&gt;
  This attribute is sometimes referred to as the "mnemonic".
&lt;/p&gt;</description>
    </attribute>
    <attribute>
      <name>flex</name>
      <rtexprvalue>false</rtexprvalue>
      <description>A non-negative integer that indicates the flexibility of this 
component in its container.  If the container supports it, flex 
is used to determine how space is distributed among its children.  
Components with larger flex values will be made larger than 
components with lower flex values.  This is done so at the ratio 
determined by the flex of each of the two components.  The actual 
value is only relevant if there are other flexible components 
(components with flex values larger than zero) within the same 
container.</description>
    </attribute>
  </tag>
  <tag>
    <name>singleStepButtonBar</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.nav.CoreSingleStepButtonBarTag</tag-class>
    <description>SingleStepButtonBar renders a Previous button,
         text describing the current step and the maximum steps, and a Next button.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>selectedStep</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the current step. The valid range is 1 to maxStep.
              It defaults to 1.</description>
    </attribute>
    <attribute>
      <name>maxStep</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the last possible step. If this value is not known, 
              it should be set to
              MAX_VALUE_UNKNOWN (-1),
              which is also the default value. If maxStep is
              MAX_VALUE_UNKNOWN, then no text is rendered between the Back/Next
              buttons. When maxStep is 2 and selectedStep
              is 1, then only a Continue button is rendered.</description>
    </attribute>
    <attribute>
      <name>previousActionListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an action listener 
             that will be called when the singleStep component navigates
             to the previous step.</description>
    </attribute>
    <attribute>
      <name>nextActionListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an action listener  
             that will be called when the singleStep component navigates
             to the next step.</description>
    </attribute>
    <attribute>
      <name>nextAction</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a reference to an action method  
             that will be called when the singleStep component navigates
             to the next step, or the static outcome of the action.</description>
    </attribute>
    <attribute>
      <name>previousAction</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a reference to an action method  
             that will be called when the singleStep component navigates
             to the previous step, or the static outcome of the action.</description>
    </attribute>
    <attribute>
      <name>text</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the text description of items being navigated.
            The default is "Step".</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>spacer</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.output.CoreSpacerTag</tag-class>
    <description>spacers occupy a fixed amount of
          space in a layout.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>width</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the width of the spacer item.</description>
    </attribute>
    <attribute>
      <name>height</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the height of the spacer item.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the short description of the bean.  This text
         is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
         This component will listen on the trigger components. If one of the
         trigger components receives an event that will cause it to update
         in some way, this component will request to be updated too.</description>
    </attribute>
  </tag>
  <tag>
    <name>statusIndicator</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.output.CoreStatusIndicatorTag</tag-class>
    <description>The statusIndicator component shows whether the page is busy processing or is ready.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>subform</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.CoreSubformTag</tag-class>
    <description>The subform tag represents an independently submittable
region of a page.  The contents of a subform will only be validated
(or otherwise processed) if a component inside of the subform is
responsible for submitting the page.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>default</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the subform should assume it
has been submitted.  When set to "default", "submitted" will be
considered true if no other subform has been submitted.</description>
    </attribute>
  </tag>
  <tag>
    <name>table</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.data.CoreTableTag</tag-class>
    <description>The Trinidad Table is used to display tabular data. It also supports selection (both single and multiple), sorting, record navigation and detail-disclosure.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>var</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).</description>
    </attribute>
    <attribute>
      <name>varStatus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this 
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the data model being used by this component.
The specific model class is
        &lt;code&gt;org.apache.myfaces.trinidad.model.CollectionModel&lt;/code&gt;.

        You may also use other model instances, e.g.,  
        &lt;code&gt;java.util.List&lt;/code&gt;  ,
        array, and  &lt;code&gt;javax.faces.model.DataModel&lt;/code&gt;.
        This component will automatically convert the instance
        into a &lt;code&gt;CollectionModel&lt;/code&gt;.</description>
    </attribute>
    <attribute>
      <name>rows</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the maximum number of rows to display in a single range of rows.
Some ranges might have fewer
than the number of rows specified by this attribute (eg: the last range
might have an insufficient number of rows).
To display all rows at once, set this attribute to 0.</description>
    </attribute>
    <attribute>
      <name>first</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the index of the first row in the currently range of rows.
This index is zero-based. This attribute is used to control
which range of rows to display to the user.</description>
    </attribute>
    <attribute>
      <name>rowDisclosureListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an ExpansionListener</description>
    </attribute>
    <attribute>
      <name>disclosedRowKeys</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the set of disclosed rows for this component.
Each entry in the set is a rowKey.</description>
    </attribute>
    <attribute>
      <name>selectionListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a selection listener</description>
    </attribute>
    <attribute>
      <name>selectedRowKeys</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the selection state for this component.</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not data validation - client-side or
            server-side -
          should take place when
          events are generated by this component.

          When immediate is true, the default ActionListener
          provided by the JavaServer Faces implementation
          should be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.</description>
    </attribute>
    <attribute>
      <name>sortListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a sort listener</description>
    </attribute>
    <attribute>
      <name>rangeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a rangeChange listener that
         will be called when a new range is selected.</description>
    </attribute>
    <attribute>
      <name>horizontalGridVisible</name>
      <rtexprvalue>false</rtexprvalue>
      <description>if the horizontal grid lines will be drawn.</description>
    </attribute>
    <attribute>
      <name>verticalGridVisible</name>
      <rtexprvalue>false</rtexprvalue>
      <description>if the vertical grid lines will be drawn.</description>
    </attribute>
    <attribute>
      <name>emptyText</name>
      <rtexprvalue>false</rtexprvalue>
      <description>text displayed when a table is empty.</description>
    </attribute>
    <attribute>
      <name>columnBandingInterval</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the interval between which the column banding alternates.  For example, a columnBandingInterval of 1 would display alternately banded columns.</description>
    </attribute>
    <attribute>
      <name>rowBandingInterval</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the interval between which the row banding alternates.  For example, rowBandingInterval=1 would displayalternately banded rows in the Grid.</description>
    </attribute>
    <attribute>
      <name>rowSelection</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether rows in this table selectable. Valid values are "none", "single", "multiple"</description>
    </attribute>
    <attribute>
      <name>autoSubmit</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).  This only takes effect if rowSelection attribute enabled.</description>
    </attribute>
    <attribute>
      <name>width</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the width of the table.  The value must either be a number of pixels or a percentage - it is not a CSS width.</description>
    </attribute>
    <attribute>
      <name>summary</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the summary of this table's purpose and structure
         for user agents rendering to non-visual media.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>allDetailsEnabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not to enable the show/hide all
              links above the table,
              which allow the user to show/hide all the detail rows.
              To enable the detail rows, a "detailStamp" facet must be set on
              this Table.

    This attribute is not supported on the following agent types:
 phone, voice.</description>
    </attribute>
  </tag>
  <tag>
    <name>train</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.nav.CoreTrainTag</tag-class>
    <description>Train is a UIXProcess component that renders a train.
          A train is a horizontal series of train stations connected by
          a horizontal line. Each train station
          is an image and text describing the page in the multi-page process.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>var</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the hierarchy of data - must be of type 
            org.apache.myfaces.trinidad.model.MenuModel</description>
    </attribute>
    <attribute>
      <name>varStatus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this 
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>tree</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.data.CoreTreeTag</tag-class>
    <description>Represents an interactive tree component.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>var</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).</description>
    </attribute>
    <attribute>
      <name>selectedRowKeys</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the selection state for this component.</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not data validation - client-side or
            server-side -
          should take place when
          events are generated by this component.

          When immediate is true, the default ActionListener
          provided by the JavaServer Faces implementation
          should be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.</description>
    </attribute>
    <attribute>
      <name>rowDisclosureListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an ExpansionListener</description>
    </attribute>
    <attribute>
      <name>disclosedRowKeys</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the set of disclosed rows for this component.
Each entry in the set is a rowKey.</description>
    </attribute>
    <attribute>
      <name>selectionListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a selection listener</description>
    </attribute>
    <attribute>
      <name>varStatus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
          Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this 
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the hierarchy of tree data - must be of type 
        org.apache.myfaces.trinidad.model.TreeModel</description>
    </attribute>
    <attribute>
      <name>focusRowKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the rowKey of the currently focused row.
        The rowKeys of the ancestor rows of the focus row are added
        to the expandedRowKeys RowKeySet by default.</description>
    </attribute>
    <attribute>
      <name>focusListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a focus listener</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
  </tag>
  <tag>
    <name>treeTable</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.core.data.CoreTreeTableTag</tag-class>
    <description>The Trinidad TreeTable is used to display data that is structured in a hierarchical format.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>var</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).</description>
    </attribute>
    <attribute>
      <name>selectedRowKeys</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the selection state for this component.</description>
    </attribute>
    <attribute>
      <name>immediate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether or not data validation - client-side or
            server-side -
          should take place when
          events are generated by this component.

          When immediate is true, the default ActionListener
          provided by the JavaServer Faces implementation
          should be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.</description>
    </attribute>
    <attribute>
      <name>rowDisclosureListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an ExpansionListener</description>
    </attribute>
    <attribute>
      <name>disclosedRowKeys</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the set of disclosed rows for this component.
Each entry in the set is a rowKey.</description>
    </attribute>
    <attribute>
      <name>selectionListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a selection listener</description>
    </attribute>
    <attribute>
      <name>varStatus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
          Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this 
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the hierarchy of tree data - must be of type 
        org.apache.myfaces.trinidad.model.TreeModel</description>
    </attribute>
    <attribute>
      <name>focusRowKey</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the rowKey of the currently focused row.
        The rowKeys of the ancestor rows of the focus row are added
        to the expandedRowKeys RowKeySet by default.</description>
    </attribute>
    <attribute>
      <name>focusListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a focus listener</description>
    </attribute>
    <attribute>
      <name>rowsByDepth</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the maximum number of records that can be displayed at
              one time (range size).
              Each level of depth in the tree can have a different range size.
              The first number in the array sets the range size for the root
              collection. Each subsequent number sets the range size for the
              corresponding depth. The last number becomes the default for
              each subsequent level of depth.

              If a node has more children than
              the range size, navigation rows will be rendered above and
              below the child nodes.</description>
    </attribute>
    <attribute>
      <name>rangeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to a rangeChange listener that
         will be called when a new range is selected.</description>
    </attribute>
    <attribute>
      <name>horizontalGridVisible</name>
      <rtexprvalue>false</rtexprvalue>
      <description>if the horizontal grid lines will be drawn.</description>
    </attribute>
    <attribute>
      <name>verticalGridVisible</name>
      <rtexprvalue>false</rtexprvalue>
      <description>if the vertical grid lines will be drawn.</description>
    </attribute>
    <attribute>
      <name>emptyText</name>
      <rtexprvalue>false</rtexprvalue>
      <description>text displayed when a table is empty.</description>
    </attribute>
    <attribute>
      <name>columnBandingInterval</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the interval between which the column banding alternates.  For example, a columnBandingInterval of 1 would display alternately banded columns.</description>
    </attribute>
    <attribute>
      <name>rowBandingInterval</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the interval between which the row banding alternates.  For example, rowBandingInterval=1 would displayalternately banded rows in the Grid.</description>
    </attribute>
    <attribute>
      <name>rowSelection</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether rows in this table selectable. Valid values are "none", "single", "multiple"</description>
    </attribute>
    <attribute>
      <name>autoSubmit</name>
      <rtexprvalue>false</rtexprvalue>
      <description>If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).  This only takes effect if rowSelection attribute enabled.</description>
    </attribute>
    <attribute>
      <name>width</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the width of the table.  The value must either be a number of pixels or a percentage - it is not a CSS width.</description>
    </attribute>
    <attribute>
      <name>summary</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the summary of this table's purpose and structure
         for user agents rendering to non-visual media.</description>
    </attribute>
    <attribute>
      <name>inlineStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the CSS styles to use for this component.</description>
    </attribute>
    <attribute>
      <name>styleClass</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a CSS style class to use for this component.</description>
    </attribute>
    <attribute>
      <name>shortDesc</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The short description of the component. This text is commonly used by user agents to display tooltip help text.</description>
    </attribute>
    <attribute>
      <name>partialTriggers</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component, and must account for
        NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        search from the parent naming container, ":::" will search
        from the grandparent naming container, etc.</description>
    </attribute>
    <attribute>
      <name>onclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>ondblclick</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an ondblclick Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousedown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousedown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseover</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseover Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmousemove</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmousemove Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onmouseout</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onmouseout Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeypress</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeypress Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeydown</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeydown Javascript handler.</description>
    </attribute>
    <attribute>
      <name>onkeyup</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an onkeyup Javascript handler.</description>
    </attribute>
    <attribute>
      <name>expandAllEnabled</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Whether the Expand All, Collapse All links should be rendered.</description>
    </attribute>
  </tag>
  <tag>
    <name>group</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.UIXGroupTag</tag-class>
    <description>The group component is an invisible control that aggregates semantically-related children; the group itself has no associated client representation (visual or API).
Some parent components may have special representation for groups like adding separators around the group but this is a special case and is not always rendered this way.
In most cases, only the children of the group will be rendered directly to the page.
There will be no layout applied to the children so the natural layout behavior of the underlying HTML elements will apply.
If you require a more predictable layout, you should use a layout component such as panelGroupLayout.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
  </tag>
  <tag>
    <name>iterator</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.UIXIteratorTag</tag-class>
    <description>UIXIterator is a component that performs iteration
over its child components.  It is like a UIXTable without any chrome.
While functionally similar to a forEach tag, an iterator is a component
that does its processing during rendering, while forEach runs during
the assembly of the component tree, and doesn't leave behind a component in the
heirarchy.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>var</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).</description>
    </attribute>
    <attribute>
      <name>varStatus</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;
 Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this 
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>value</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the data model being used by this component.
The specific model class is
        &lt;code&gt;org.apache.myfaces.trinidad.model.CollectionModel&lt;/code&gt;.

        You may also use other model instances, e.g.,  
        &lt;code&gt;java.util.List&lt;/code&gt;  ,
        array, and  &lt;code&gt;javax.faces.model.DataModel&lt;/code&gt;.
        This component will automatically convert the instance
        into a &lt;code&gt;CollectionModel&lt;/code&gt;.</description>
    </attribute>
    <attribute>
      <name>rows</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the maximum number of rows to display in a single range of rows.
Some ranges might have fewer
than the number of rows specified by this attribute (eg: the last range
might have an insufficient number of rows).
To display all rows at once, set this attribute to 0.</description>
    </attribute>
    <attribute>
      <name>first</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the index of the first row in the currently range of rows.
This index is zero-based. This attribute is used to control
which range of rows to display to the user.</description>
    </attribute>
  </tag>
  <tag>
    <name>switcher</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.UIXSwitcherTag</tag-class>
    <description>The switcher component dynamically decides which facet component
should be rendered.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>rendered</name>
      <rtexprvalue>false</rtexprvalue>
      <description>whether the component is rendered. When set to false, no output
                   will be delivered for this component.</description>
    </attribute>
    <attribute>
      <name>binding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>an EL reference that will store the component instance on a
bean.  This can be used to give programmatic access to a component
from a backing bean, or to move creation of the component to a backing bean.</description>
    </attribute>
    <attribute>
      <name>attributeChangeListener</name>
      <rtexprvalue>false</rtexprvalue>
      <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
    </attribute>
    <attribute>
      <name>facetName</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the name of the facet to render and process.</description>
    </attribute>
    <attribute>
      <name>defaultFacet</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the name of the facet to render and process if "facetName"
              is null or otherwise does not refer to an existing facet.</description>
    </attribute>
  </tag>
  <tag>
    <name>convertColor</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.convert.ConvertColorTag</tag-class>
    <description>Converts an string, to and from java.awt.Color objects.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the identifier for the component</description>
    </attribute>
    <attribute>
      <name>patterns</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The set of acceptable patterns, as a whitespace sepa
rated list.
              The first pattern in the list will be used for formatting
              java.awt.Color values.  All patterns will be tried in
              order to convert Strings back into java.awt.Colors.
              If no patterns are set, the default is "#RRGGBB r,g,b".</description>
    </attribute>
    <attribute>
      <name>transparentAllowed</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Whether the converter should allow generation of a "
transparent"
color (a black color with an alpha of zero). The converter uses
a String version of "transparent" that is translated for the
user's locale.</description>
    </attribute>
    <attribute>
      <name>messageDetailConvert</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;&lt;p&gt;
              Custom error message to be used, for creating detail part of
              faces message, when users input does not match the specified
              pattern.
             &lt;/p&gt;
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
               &lt;li&gt;
                {1} value entered by the user
               &lt;/li&gt;
               &lt;li&gt;
                {2} the pattern the converter is expecting
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
  </tag>
  <tag>
    <name>convertDateTime</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.convert.ConvertDateTimeTag</tag-class>
    <description>Converts string into java.util.Date and vice versa based on the pattern
          and style set.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the identifier for the component</description>
    </attribute>
    <attribute>
      <name>messageDetailConvertDate</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;&lt;p&gt;
              Custom error message to be used, for creating detail part of
              faces message, for values that cannot be converted to date when
              the pattern / secondary pattern is set or when
              &lt;code&gt;type&lt;/code&gt; is set to
              &lt;code&gt;'date'&lt;/code&gt; and &lt;code&gt;pattern&lt;/code&gt;
              is not set or is null.
             &lt;/p&gt;
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
               &lt;li&gt;
                {1} value entered by the user
               &lt;/li&gt;
               &lt;li&gt;
                {2} an example of the format the converter is expecting
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>messageDetailConvertTime</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;&lt;p&gt;
              Custom error message to be used, for creating detail part of
              faces message, for time based value that cannot be converted
              to date when &lt;code&gt;type&lt;/code&gt; is set to
              &lt;code&gt;'time'&lt;/code&gt;, &lt;code&gt;pattern&lt;/code&gt; is
              not set or is null
             &lt;/p&gt;
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
               &lt;li&gt;
                {1} value entered by the user
               &lt;/li&gt;
               &lt;li&gt;
                {2} an example of the format the converter is expecting
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>messageDetailConvertBoth</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;&lt;p&gt;
              Custom error message to be used, for creating detail part of
              faces message, for date-time based value that cannot be converted
              to date when &lt;code&gt;type&lt;/code&gt; is set to
              &lt;code&gt;'both'&lt;/code&gt; and &lt;code&gt;pattern&lt;/code&gt;
              is not set or is null.
             &lt;/p&gt;
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
               &lt;li&gt;
                {1} value entered by the user
               &lt;/li&gt;
               &lt;li&gt;
                {2} an example of the format the converter is expecting
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>dateStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Predefined formatting style which determines how the date component
               of a date string is to be formatted and parsed. Applied only if type
               is "date" or "both". Valid values are "shortish", "short", "default",
               "medium", "long", and "full". Default value is "shortish".</description>
    </attribute>
    <attribute>
      <name>locale</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Locale whose predefined styles for dates and times are used during
               formatting or parsing. If not specified or if null, the Locale returned by
               FacesContext.getViewRoot().getLocale() will be used.</description>
    </attribute>
    <attribute>
      <name>pattern</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Custom formatting pattern which determines how the date/time string
              should be formatted and parsed.</description>
    </attribute>
    <attribute>
      <name>secondaryPattern</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Second pattern, which will be used as a second attempt to parse a
               string if the primary pattern or styles fail, but is never used for
               formatting strings.</description>
    </attribute>
    <attribute>
      <name>timeStyle</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Predefined formatting style which determines how the time component of
               a date string is to be formatted and parsed. Applied only if type is
               "time" or "both". Valid values are "default", "short", "medium",
               "long", and "full". Default value is "short".</description>
    </attribute>
    <attribute>
      <name>timeZone</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Time zone in which to interpret any time information in the date
               string. If not set here, picks this value from
               trinidad-config.xml configuration file. If not defined there, then
               it is defaulted to GMT.</description>
    </attribute>
    <attribute>
      <name>type</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Specifies what contents the string value will be formatted to
               include, or parsed. Valid values are "date", "time", and "both".
               Default value is "date".</description>
    </attribute>
  </tag>
  <tag>
    <name>convertNumber</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.convert.ConvertNumberTag</tag-class>
    <description>Converts an string to a Number and vice versa based on the 'pattern' or the 'type' set.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the identifier for the component</description>
    </attribute>
    <attribute>
      <name>currencyCode</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The ISO 4217 currency code, applied only when formatting currencies.
           Currency code can also be set for the entire application in trinidad-config.xml file.
           If currency code is not set on the converter, and if set on
           trinidad-config.xml configuration file it will be used by calling
           &lt;code&gt;RequestContext().getCurrenctInstance().getCurrencyCode().&lt;/code&gt;
           This currency code will be used during call to getAsString() for formatting,
           provided type is set to 'currency'.</description>
    </attribute>
    <attribute>
      <name>messageDetailConvertCurrency</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;&lt;p&gt;
          Custom error message to be used, for creating detail part of the
          &lt;code&gt;FacesMessage&lt;/code&gt;, when
          &lt;code&gt;value&lt;/code&gt; cannot be converted to a number, when
          &lt;code&gt;type&lt;/code&gt; is set to
          &lt;code&gt;'currency'&lt;/code&gt; and &lt;code&gt;pattern&lt;/code&gt;
          is null or not set.
         &lt;/p&gt;
          &lt;p&gt;
           &lt;strong&gt;
            Parameters:
           &lt;/strong&gt;
           &lt;ul&gt;
            &lt;li&gt;
             {0} the label that identifies the component
            &lt;/li&gt;
            &lt;li&gt;
             {1} value entered by the user
            &lt;/li&gt;
           &lt;/ul&gt;
          &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>messageDetailConvertNumber</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;&lt;p&gt;
          Custom error message to be used, for creating detail part of the
          &lt;code&gt;FacesMessage&lt;/code&gt;, when
          &lt;code&gt;value&lt;/code&gt; cannot be converted to a number, when
          &lt;code&gt;type&lt;/code&gt; is set to &lt;code&gt;'number'&lt;/code&gt;
          and &lt;code&gt;pattern&lt;/code&gt; is null or not set.
         &lt;/p&gt;
         &lt;p&gt;
          &lt;strong&gt;
           Parameters:
          &lt;/strong&gt;
          &lt;ul&gt;
           &lt;li&gt;
            {0} the label that identifies the component
           &lt;/li&gt;
           &lt;li&gt;
            {1} value entered by the user
           &lt;/li&gt;
          &lt;/ul&gt;
         &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>messageDetailConvertPattern</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;&lt;p&gt;
          Custom error message to be used, for creating detail part of the
          &lt;code&gt;FacesMessage&lt;/code&gt; message, when
          &lt;code&gt;value&lt;/code&gt; cannot be converted to a number, based
          on the &lt;code&gt;pattern&lt;/code&gt; set.
         &lt;/p&gt;
         &lt;p&gt;
          &lt;strong&gt;
           Parameters:
          &lt;/strong&gt;
          &lt;ul&gt;
           &lt;li&gt;
            {0} the label that identifies the component
           &lt;/li&gt;
           &lt;li&gt;
            {1} value entered by the user
           &lt;/li&gt;
           &lt;li&gt;
            {2} the specified conversion pattern
           &lt;/li&gt;
          &lt;/ul&gt;
         &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>messageDetailConvertPercent</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;html&gt;&lt;p&gt;
          Custom error message to be used, for creating detail part of the
          &lt;code&gt;FacesMessage&lt;/code&gt;, when
          &lt;code&gt;value&lt;/code&gt; cannot be converted to a number, when
          &lt;code&gt;type&lt;/code&gt; is set to
          &lt;code&gt;'percent'&lt;/code&gt; and &lt;code&gt;pattern&lt;/code&gt;
          is null or not set.
         &lt;/p&gt;
         &lt;p&gt;
          &lt;strong&gt;
           Parameters:
          &lt;/strong&gt;
          &lt;ul&gt;
           &lt;li&gt;
            {0} the label that identifies the component
           &lt;/li&gt;
           &lt;li&gt;
            {1} value entered by the user
           &lt;/li&gt;
          &lt;/ul&gt;
         &lt;/p&gt;&lt;/html&gt;</description>
    </attribute>
    <attribute>
      <name>currencySymbol</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Currency symbol, is applied only when formatting currencies.
          If currency code is set then symbol will be ignored.</description>
    </attribute>
    <attribute>
      <name>groupingUsed</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Flag specifying whether formatted output will contain grouping separators.
          Default value is true.</description>
    </attribute>
    <attribute>
      <name>integerOnly</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Flag specifying whether only the integer part of the value will be formatted
           and parsed. Default value is false.</description>
    </attribute>
    <attribute>
      <name>locale</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Locale whose predefined styles for numbers are used during formatting and parsing.
          If not specified, the Locale returned by FacesContext.getViewRoot().getLocale()
          will be used.</description>
    </attribute>
    <attribute>
      <name>maxFractionDigits</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Maximum number of digits that will be formatted in the fractional portion of the
          output.</description>
    </attribute>
    <attribute>
      <name>maxIntegerDigits</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Maximum number of digits that will be formatted in the integer portion of the
          output.</description>
    </attribute>
    <attribute>
      <name>minFractionDigits</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Minimum number of digits that will be formatted in the fractional portion of
           the output.</description>
    </attribute>
    <attribute>
      <name>minIntegerDigits</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Minimum number of digits that will be formatted in the integer portion of the
          output.</description>
    </attribute>
    <attribute>
      <name>pattern</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Custom formatting pattern which determins how the number string should be
          formatted and parsed.</description>
    </attribute>
    <attribute>
      <name>type</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Specifies how the number string will be formatted and parsed.
           Valid values are "number", "currency", and "percent".
           Default value is "number".</description>
    </attribute>
  </tag>
  <tag>
    <name>validateByteLength</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.validator.ValidateByteLengthTag</tag-class>
    <description>Validate the byte length of strings when encoded.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the identifier for the component</description>
    </attribute>
    <attribute>
      <name>maximum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>maximum number of allowable bytes when the string is encoded</description>
    </attribute>
    <attribute>
      <name>encoding</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the Java encoding used for the string.</description>
    </attribute>
    <attribute>
      <name>messageDetailMaximum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;p&gt;
              Custom error message to be used, for creating detail part of
              faces message, when conversion fails for input that
              exceeds the maximum byte length.
             &lt;/p&gt;
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
               &lt;li&gt;
                {1} value entered by the user
               &lt;/li&gt;
               &lt;li&gt;
                {2} the maximum length
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;</description>
    </attribute>
  </tag>
  <tag>
    <name>validateDateRestriction</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.validator.ValidateDateRestrictionTag</tag-class>
    <description>Validate that the date entered is within a given restriction.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the identifier for the component</description>
    </attribute>
    <attribute>
      <name>invalidMonths</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Specify the month which are invalid for your use case.
           The attribute takes a whitespace delimited list of months.
           Possible values are jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec.</description>
    </attribute>
    <attribute>
      <name>invalidDaysOfWeek</name>
      <rtexprvalue>false</rtexprvalue>
      <description>Specify the weekdays which are invalid for your use case.
           The attribute takes whitespace delimited list of weekdays.
           Possible values are sun, mon, tue, wed, thu, fri, sat.</description>
    </attribute>
    <attribute>
      <name>invalidDays</name>
      <rtexprvalue>false</rtexprvalue>
      <description>To specifiy a concrete List of Dates, use the invalidDays attribute and wire it
           to a DateListProvider implementation. This returns a list of dates, which are invalid.</description>
    </attribute>
    <attribute>
      <name>messageDetailInvalidMonths</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;p&gt;
           The detail error message to be used for constructing faces messages,
           when input value exceeds the &lt;code&gt;invalidMonths&lt;/code&gt; value
           set.
          &lt;/p&gt;
          &lt;p&gt;
           &lt;strong&gt;
            Parameters:
           &lt;/strong&gt;
           &lt;ul&gt;
            &lt;li&gt;
             {0} the label that identifies the component
            &lt;/li&gt;
            &lt;li&gt;
             {1} value entered by the user
            &lt;/li&gt;
            &lt;li&gt;
             {2} the invalid month
            &lt;/li&gt;
           &lt;/ul&gt;
          &lt;/p&gt;</description>
    </attribute>
    <attribute>
      <name>messageDetailInvalidDaysOfWeek</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;p&gt;
           The detail error message to be used for constructing faces messages,
           when input value is less than the set &lt;code&gt;invalidDaysOfWeek&lt;/code&gt;
           value.
          &lt;/p&gt;
          &lt;p&gt;
           &lt;strong&gt;
            Parameters:
           &lt;/strong&gt;
           &lt;ul&gt;
            &lt;li&gt;
             {0} the label that identifies the component
            &lt;/li&gt;
            &lt;li&gt;
             {1} value entered by the user
            &lt;/li&gt;
            &lt;li&gt;
             {2} the invalid weekday
            &lt;/li&gt;
           &lt;/ul&gt;
          &lt;/p&gt;</description>
    </attribute>
    <attribute>
      <name>messageDetailInvalidDays</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;p&gt;
           The detail error message to be used for constructing faces messages,
           when input value is less than the set &lt;code&gt;invalidDate&lt;/code&gt;
           value.
          &lt;/p&gt;
          &lt;p&gt;
           &lt;strong&gt;
            Parameters:
           &lt;/strong&gt;
           &lt;ul&gt;
            &lt;li&gt;
             {0} the label that identifies the component
            &lt;/li&gt;
            &lt;li&gt;
             {1} value entered by the user
            &lt;/li&gt;
            &lt;li&gt;
             {2} the invalid date
            &lt;/li&gt;
           &lt;/ul&gt;
          &lt;/p&gt;</description>
    </attribute>
  </tag>
  <tag>
    <name>validateDateTimeRange</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.validator.ValidateDateTimeRangeTag</tag-class>
    <description>Validate that the date entered is within a given range.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the identifier for the component</description>
    </attribute>
    <attribute>
      <name>maximum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the maximum java.util.Date.
           ISO 8601 date strings, of the form 'yyyy-MM-dd'
           (for example 2004-06-22) is also allowed.
           This will be parsed to date.</description>
    </attribute>
    <attribute>
      <name>minimum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The minimum java.util.Date.
           ISO 8601 date strings, of the form 'yyyy-MM-dd'
           (for example 2004-06-22) are also allowed.
           This will be parsed to date.</description>
    </attribute>
    <attribute>
      <name>messageDetailMaximum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;p&gt;
           The detail error message to be used for constructing faces messages,
           when input value exceeds the &lt;code&gt;maximum&lt;/code&gt; value
           set.
          &lt;/p&gt;
          &lt;p&gt;
           &lt;strong&gt;
            Parameters:
           &lt;/strong&gt;
           &lt;ul&gt;
            &lt;li&gt;
             {0} the label that identifies the component
            &lt;/li&gt;
            &lt;li&gt;
             {1} value entered by the user
            &lt;/li&gt;
            &lt;li&gt;
             {2} the maximum allowed date
            &lt;/li&gt;
           &lt;/ul&gt;
          &lt;/p&gt;</description>
    </attribute>
    <attribute>
      <name>messageDetailMinimum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;p&gt;
           The detail error message to be used for constructing faces messages,
           when input value is less than the set &lt;code&gt;minimum&lt;/code&gt;
           value.
          &lt;/p&gt;
          &lt;p&gt;
           &lt;strong&gt;
            Parameters:
           &lt;/strong&gt;
           &lt;ul&gt;
            &lt;li&gt;
             {0} the label that identifies the component
            &lt;/li&gt;
            &lt;li&gt;
             {1} value entered by the user
            &lt;/li&gt;
            &lt;li&gt;
             {2} the minimum allowed date
            &lt;/li&gt;
           &lt;/ul&gt;
          &lt;/p&gt;</description>
    </attribute>
    <attribute>
      <name>messageDetailNotInRange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;p&gt;
           The detail error message to be used for constructing faces messages,
           if input value is not with in the range, when
           &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt; is
           set.
          &lt;/p&gt;
          &lt;p&gt;
           &lt;strong&gt;
            Parameters:
           &lt;/strong&gt;
           &lt;ul&gt;
            &lt;li&gt;
             {0} the label that identifies the component
            &lt;/li&gt;
            &lt;li&gt;
             {1} value entered by the user
            &lt;/li&gt;
            &lt;li&gt;
             {2} the minimum allowed date
            &lt;/li&gt;
            &lt;li&gt;
             {3} the maximum allowed date
            &lt;/li&gt;
           &lt;/ul&gt;
          &lt;/p&gt;</description>
    </attribute>
  </tag>
  <tag>
    <name>validateDoubleRange</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.validator.ValidateDoubleRangeTag</tag-class>
    <description>Validate that the date entered is within a given range.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the identifier for the component</description>
    </attribute>
    <attribute>
      <name>maximum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The maximum double value of the entered value.</description>
    </attribute>
    <attribute>
      <name>minimum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The minimum double value of the entered value..</description>
    </attribute>
    <attribute>
      <name>messageDetailMaximum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;p&gt;
           The detail error message to be used for constructing faces messages,
           when input value exceeds the &lt;code&gt;maximum&lt;/code&gt; value
           set.
          &lt;/p&gt;
          &lt;p&gt;
           &lt;strong&gt;
            Parameters:
           &lt;/strong&gt;
           &lt;ul&gt;
            &lt;li&gt;
             {0} the label that identifies the component
            &lt;/li&gt;
            &lt;li&gt;
             {1} value entered by the user
            &lt;/li&gt;
            &lt;li&gt;
             {2} the maximum allowed value
            &lt;/li&gt;
           &lt;/ul&gt;
          &lt;/p&gt;</description>
    </attribute>
    <attribute>
      <name>messageDetailMinimum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;p&gt;
           The detail error message to be used for constructing faces messages,
           when input value is less than the set &lt;code&gt;minimum&lt;/code&gt;
           value.
          &lt;/p&gt;
          &lt;p&gt;
           &lt;strong&gt;
            Parameters:
           &lt;/strong&gt;
           &lt;ul&gt;
            &lt;li&gt;
             {0} the label that identifies the component
            &lt;/li&gt;
            &lt;li&gt;
             {1} value entered by the user
            &lt;/li&gt;
            &lt;li&gt;
             {2} the minimum allowed value
            &lt;/li&gt;
           &lt;/ul&gt;
          &lt;/p&gt;</description>
    </attribute>
    <attribute>
      <name>messageDetailNotInRange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;p&gt;
           The detail error message to be used for constructing faces messages,
           if input value is not with in the range, when
           &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt; is
           set.
          &lt;/p&gt;
          &lt;p&gt;
           &lt;strong&gt;
            Parameters:
           &lt;/strong&gt;
           &lt;ul&gt;
            &lt;li&gt;
             {0} the label that identifies the component
            &lt;/li&gt;
            &lt;li&gt;
             {1} value entered by the user
            &lt;/li&gt;
            &lt;li&gt;
             {2} the minimum allowed value
            &lt;/li&gt;
            &lt;li&gt;
             {3} the maximum allowed value
            &lt;/li&gt;
           &lt;/ul&gt;
          &lt;/p&gt;</description>
    </attribute>
  </tag>
  <tag>
    <name>validateLength</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.validator.ValidateLengthTag</tag-class>
    <description>Validate that the string entered is of a given length.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the identifier for the component</description>
    </attribute>
    <attribute>
      <name>maximum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the maximum length of the entered value.</description>
    </attribute>
    <attribute>
      <name>minimum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the minimum length of the entered value.</description>
    </attribute>
    <attribute>
      <name>messageDetailMaximum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;p&gt;
           The detail error message to be used for constructing faces messages,
           when input value exceeds the &lt;code&gt;maximum&lt;/code&gt; length
           set.
          &lt;/p&gt;
          &lt;p&gt;
           &lt;strong&gt;
            Parameters:
           &lt;/strong&gt;
           &lt;ul&gt;
            &lt;li&gt;
             {0} the label that identifies the component
            &lt;/li&gt;
            &lt;li&gt;
             {1} value entered by the user
            &lt;/li&gt;
            &lt;li&gt;
             {2} the maximum allowed length
            &lt;/li&gt;
           &lt;/ul&gt;
          &lt;/p&gt;</description>
    </attribute>
    <attribute>
      <name>messageDetailMinimum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;p&gt;
           The detail error message to be used for constructing faces messages,
           when input value is less than the set &lt;code&gt;minimum&lt;/code&gt;
           length.
          &lt;/p&gt;
          &lt;p&gt;
           &lt;strong&gt;
            Parameters:
           &lt;/strong&gt;
           &lt;ul&gt;
            &lt;li&gt;
             {0} the label that identifies the component
            &lt;/li&gt;
            &lt;li&gt;
             {1} value entered by the user
            &lt;/li&gt;
            &lt;li&gt;
             {2} the minimum allowed length
            &lt;/li&gt;
           &lt;/ul&gt;
          &lt;/p&gt;</description>
    </attribute>
    <attribute>
      <name>messageDetailNotInRange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;p&gt;
           The detail error message to be used for constructing faces messages,
           if input value is not of an acceptable length, when both
           &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt; are
           set.
          &lt;/p&gt;
          &lt;p&gt;
           &lt;strong&gt;
            Parameters:
           &lt;/strong&gt;
           &lt;ul&gt;
            &lt;li&gt;
             {0} the label that identifies the component
            &lt;/li&gt;
            &lt;li&gt;
             {1} value entered by the user
            &lt;/li&gt;
            &lt;li&gt;
             {2} the minimum allowed length
            &lt;/li&gt;
            &lt;li&gt;
             {3} the maximum allowed length
            &lt;/li&gt;
           &lt;/ul&gt;
          &lt;/p&gt;</description>
    </attribute>
    <attribute>
      <name>messageDetailExact</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;p&gt;
           The detail error message to be used for constructing faces messages,
           if input value is not of an acceptable length, when both
           &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt; are
           set to the same value.
          &lt;/p&gt;
          &lt;p&gt;
           &lt;strong&gt;
            Parameters:
           &lt;/strong&gt;
           &lt;ul&gt;
            &lt;li&gt;
             {0} the label that identifies the component
            &lt;/li&gt;
            &lt;li&gt;
             {1} value entered by the user
            &lt;/li&gt;
            &lt;li&gt;
             {2} the allowed length
            &lt;/li&gt;
           &lt;/ul&gt;
          &lt;/p&gt;</description>
    </attribute>
  </tag>
  <tag>
    <name>validateLongRange</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.validator.ValidateLongRangeTag</tag-class>
    <description>Validate that the date entered is within a given range.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the identifier for the component</description>
    </attribute>
    <attribute>
      <name>maximum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The maximum long value of the entered value.</description>
    </attribute>
    <attribute>
      <name>minimum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>The minimum long value of the entered value..</description>
    </attribute>
    <attribute>
      <name>messageDetailMaximum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;p&gt;
           The detail error message to be used for constructing faces messages,
           when input value exceeds the &lt;code&gt;maximum&lt;/code&gt; value
           set.
          &lt;/p&gt;
          &lt;p&gt;
           &lt;strong&gt;
            Parameters:
           &lt;/strong&gt;
           &lt;ul&gt;
            &lt;li&gt;
             {0} the label that identifies the component
            &lt;/li&gt;
            &lt;li&gt;
             {1} value entered by the user
            &lt;/li&gt;
            &lt;li&gt;
             {2} the maximum allowed value
            &lt;/li&gt;
           &lt;/ul&gt;
          &lt;/p&gt;</description>
    </attribute>
    <attribute>
      <name>messageDetailMinimum</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;p&gt;
           The detail error message to be used for constructing faces messages,
           when input value is less than the set &lt;code&gt;minimum&lt;/code&gt;
           value.
          &lt;/p&gt;
          &lt;p&gt;
           &lt;strong&gt;
            Parameters:
           &lt;/strong&gt;
           &lt;ul&gt;
            &lt;li&gt;
             {0} the label that identifies the component
            &lt;/li&gt;
            &lt;li&gt;
             {1} value entered by the user
            &lt;/li&gt;
            &lt;li&gt;
             {2} the minimum allowed value
            &lt;/li&gt;
           &lt;/ul&gt;
          &lt;/p&gt;</description>
    </attribute>
    <attribute>
      <name>messageDetailNotInRange</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;p&gt;
           The detail error message to be used for constructing faces messages,
           if input value is not with in the range, when
           &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt; is
           set.
          &lt;/p&gt;
          &lt;p&gt;
           &lt;strong&gt;
            Parameters:
           &lt;/strong&gt;
           &lt;ul&gt;
            &lt;li&gt;
             {0} the label that identifies the component
            &lt;/li&gt;
            &lt;li&gt;
             {1} value entered by the user
            &lt;/li&gt;
            &lt;li&gt;
             {2} the minimum allowed value
            &lt;/li&gt;
            &lt;li&gt;
             {3} the maximum allowed value
            &lt;/li&gt;
           &lt;/ul&gt;
          &lt;/p&gt;</description>
    </attribute>
  </tag>
  <tag>
    <name>validateRegExp</name>
    <tag-class>org.apache.myfaces.trinidadinternal.taglib.validator.ValidateRegExpTag</tag-class>
    <description>Validate expression using Java regular expression syntax.</description>
    <attribute>
      <name>id</name>
      <rtexprvalue>false</rtexprvalue>
      <description>the identifier for the component</description>
    </attribute>
    <attribute>
      <name>pattern</name>
      <rtexprvalue>false</rtexprvalue>
      <description>pattern to be matched in the input value.</description>
    </attribute>
    <attribute>
      <name>messageDetailNoMatch</name>
      <rtexprvalue>false</rtexprvalue>
      <description>&lt;p&gt;
              Custom error message to be used, for creating detail part of
              faces message, when users input does not match the specified
              pattern.
             &lt;/p&gt;
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
               &lt;li&gt;
                {1} value entered by the user
               &lt;/li&gt;
               &lt;li&gt;
                {2} represents the 'pattern' expected in the input
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;</description>
    </attribute>
  </tag>
</taglib>